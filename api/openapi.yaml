openapi: 3.0.0
info:
  description: "<b>Contact:</b> To contact our support click <a href='https://landing.sevdesk.de/service-support-center-technik'>here</a><br><br>\
    \ \r\n# General information\r\nWelcome to our API!<br>\r\nsevDesk offers you the\
    \ possibility of retrieving data using an interface, namely the sevDesk API, and\
    \ making changes without having to use the web UI. The sevDesk interface is a\
    \ REST-Full API. All sevDesk data and functions that are used in the web UI can\
    \ also be controlled through the API.\r\n\n# Cross-Origin Resource Sharing\r\n\
    This API features Cross-Origin Resource Sharing (CORS).<br>\r\nIt enables cross-domain\
    \ communication from the browser.<br>\r\nAll responses have a wildcard same-origin\
    \ which makes them completely public and accessible to everyone, including any\
    \ code on any site.\r\n\r\n# Embedding resources\r\nWhen retrieving resources\
    \ by using this API, you might encounter nested resources in the resources you\
    \ requested.<br>\r\nFor example, an invoice always contains a contact, of which\
    \ you can see the ID and the object name.<br>\r\nThis API gives you the possibility\
    \ to embed these resources completely into the resources you originally requested.<br>\r\
    \nTaking our invoice example, this would mean, that you would not only see the\
    \ ID and object name of a contact, but rather the complete contact resource.\r\
    \n\r\nTo embed resources, all you need to do is to add the query parameter 'embed'\
    \ to your GET request.<br>\r\nAs values, you can provide the name of the nested\
    \ resource.<br>\r\nMultiple nested resources are also possible by providing multiple\
    \ names, separated by a comma.\r\n \n# Authentication and Authorization\n The\
    \ sevDesk API uses a token authentication to authorize calls. For this purpose\
    \ every sevDesk administrator has one API token, which is a <b>hexadecimal string</b>\
    \ containing <b>32 characters</b>. The following clip shows where you can find\
    \ the API token if this is your first time with our API.<br><br> <video src='OpenAPI/img/findingTheApiToken.mp4'\
    \ controls width='640' height='360'> Ihr Browser kann dieses Video nicht wiedergeben.<br/>\
    \ Dieses Video zeigt wie sie Ihr sevDesk API Token finden. </video> <br> The token\
    \ will be needed in every request that you want to send and needs to be attached\
    \ to the request url as a <b>Query Parameter</b><br> or provided as a value of\
    \ an <b>Authorization Header</b>.<br> For security reasons, we suggest putting\
    \ the API Token in the Authorization Header and not in the query string.<br> However,\
    \ in the request examples in this documentation, we will keep it in the query\
    \ string, as it is easier for you to copy them and try them yourself.<br> The\
    \ following url is an example that shows where your token needs to be placed as\
    \ a query parameter.<br> In this case, we used some random API token. <ul> <li><span>ht</span>tps://my.sevdesk.de/api/v1/Contact?token=<span\
    \ style='color:red'>b7794de0085f5cd00560f160f290af38</span></li> </ul> The next\
    \ example shows the token in the Authorization Header. <ul> <li>\"Authorization\"\
    \ :<span style='color:red'>\"b7794de0085f5cd00560f160f290af38\"</span></li> </ul>\
    \ The api tokens have an infinite lifetime and, in other words, exist as long\
    \ as the sevDesk user exists.<br> For this reason, the user should <b>NEVER</b>\
    \ be deleted.<br> If really necessary, it is advisable to save the api token as\
    \ we will <b>NOT</b> be able to retrieve it afterwards!<br> It is also possible\
    \ to generate a new API token, for example, if you want to prevent the usage of\
    \ your sevDesk account by other people who got your current API token.<br> To\
    \ achieve this, you just need to click on the \"generate new\" symbol to the right\
    \ of your token and confirm it with your password. \n# API News\n To never miss\
    \ API news and updates again, subscribe to our <b>free API newsletter</b> and\
    \ get all relevant information to keep your sevDesk software running smoothly.\
    \ To subscribe, simply click <a href = 'https://landing.sevdesk.de/api-newsletter'><b>here</b></a>\
    \ and confirm the email address to which we may send all updates relevant to you.\
    \ \n# API Requests\n In our case, REST API requests need to be build by combining\
    \ the following components. <table> <tr> <th><b>Component</b></th> <th><b>Description</b></th>\
    \ </tr> <tr> <td>HTTP-Methods</td> <td> <ul> <li>GET (retrieve a resource)</li>\
    \ <li>POST (create a resource)</li> <li>PUT (update a resource)</li> <li>DELETE\
    \ (delete a resource)</li> </ul> </td> </tr> <tr> <td>URL of the API</td> <td><span\
    \ style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span></td>\
    \ </tr> <tr> <td>URI of the resource</td> <td>The resource to query.<br>For example\
    \ contacts in sevDesk:<br><br> <span style='color:red'>/Contact</span><br><br>\
    \ Which will result in the following complete URL:<br><br> <span style='color:\
    \ #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span><span\
    \ style='color:red'>/Contact</span> </td> </tr> <tr> <td>Query parameters</td>\
    \ <td>Are attached by using the connectives <b>?</b> and <b>&</b> in the URL.<br></td>\
    \ </tr> <tr> <td>Request headers</td> <td>Typical request headers are for example:<br>\
    \ <div> <br> <ul> <li>Content-type</li> <li>Authorization</li> <li>Accept-Encoding</li>\
    \ <li>User-Agent</li> <li>...</li> </ul> </div> </td> </tr> <tr> <td>Request body</td>\
    \ <td>Mostly required in POST and PUT requests.<br> Often the request body contains\
    \ json, in our case, it also accepts url-encoded data. </td> </tr> </table><br>\
    \ <span style='color:red'>Note</span>: please pass a meaningful entry at the header\
    \ \"User-Agent\". If the \"User-Agent\" is set meaningfully, we can offer better\
    \ support in case of queries from customers.<br> An example how such a \"User-Agent\"\
    \ can look like: \"Integration-name by abc\". <br><br> This is a sample request\
    \ for retrieving existing contacts in sevDesk using curl:<br><br> <img src='OpenAPI/img/GETRequest.PNG'\
    \ alt='Get Request' height='150'><br><br> As you can see, the request contains\
    \ all the components mentioned above.<br> It's HTTP method is GET, it has a correct\
    \ endpoint (<span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span><span\
    \ style='color:red'>/Contact</span>), query parameters like <b>token</b> and additional\
    \ <b>header</b> information!<br><br> <b>Query Parameters</b><br><br> As you might\
    \ have seen in the sample request above, there are several other parameters besides\
    \ \"token\", located in the url.<br> Those are mostly optional but prove to be\
    \ very useful for a lot of requests as they can limit, extend, sort or filter\
    \ the data you will get as a response.<br><br> These are the three most used query\
    \ parameter for the sevDesk API. <table> <tr> <th><b>Parameter</b></th> <th><b>Description</b></th>\
    \ </tr> <tr> <td>limit</td> <td>Limits the number of entries that are returned.<br>\
    \ Most useful in GET requests which will most likely deliver big sets of data\
    \ like country or currency lists.<br> In this case, you can bypass the default\
    \ limitation on returned entries by providing a high number. </td> </tr> <tr>\
    \ <td>offset</td> <td>Specifies a certain offset for the data that will be returned.<br>\
    \ As an example, you can specify \"offset=2\" if you want all entries except for\
    \ the first two.</td> </tr> <tr> <td>embed</td> <td>Will extend some of the returned\
    \ data.<br> A brief example can be found below.</td> </tr> </table> This is an\
    \ example for the usage of the embed parameter.<br> The following first request\
    \ will return all company contact entries in sevDesk up to a limit of 100 without\
    \ any additional information and no offset.<br><br> <img src='OpenAPI/img/ContactQueryWithoutEmbed.PNG'\
    \ width='900' height='850'><br><br> Now have a look at the category attribute\
    \ located in the response.<br> Naturally, it just contains the id and the object\
    \ name of the object but no further information.<br> We will now use the parameter\
    \ embed with the value \"category\".<br><br> <img src='OpenAPI/img/ContactQueryWithEmbed.PNG'\
    \ width='900' height='850'><br><br> As you can see, the category object is now\
    \ extended and shows all the attributes and their corresponding values.<br><br>\
    \ There are lot of other query parameters that can be used to filter the returned\
    \ data for objects that match a certain pattern, however, those will not be mentioned\
    \ here and instead can be found at the detail documentation of the most used API\
    \ endpoints like contact, invoice or voucher.<br><br> <b>Request Headers</b><br><br>\
    \ The HTTP request (response) headers allow the client as well as the server to\
    \ pass additional information with the request.<br> They transfer the parameters\
    \ and arguments which are important for transmitting data over HTTP.<br> Three\
    \ headers which are useful / necessary when using the sevDesk API are \"Authorization,\
    \ \"Accept\" and \"Content-type\".<br> Underneath is a brief description of why\
    \ and how they should be used.<br><br> <b>Authorization</b><br><br> Can be used\
    \ if you want to provide your API token in the header instead of having it in\
    \ the url. <ul> <li>Authorization:<span style='color:red'>yourApiToken</span></li>\
    \ </ul> <b>Accept</b><br><br> Specifies the format of the response.<br> Required\
    \ for operations with a response body. <ul> <li>Accept:application/<span style='color:red'>format</span>\
    \ </li> </ul> In our case, <code><span style='color:red'>format</span></code>\
    \ could be replaced with <code>json</code> or <code>xml</code><br><br> <b>Content-type</b><br><br>\
    \ Specifies which format is used in the request.<br> Is required for operations\
    \ with a request body. <ul> <li>Content-type:application/<span style='color:red'>format</span></li>\
    \ </ul> In our case,<code><span style='color:red'>format</span></code>could be\
    \ replaced with <code>json</code> or <code>x-www-form-urlencoded</code> <br><br><b>API\
    \ Responses</b><br><br> HTTP status codes<br> When calling the sevDesk API it\
    \ is very likely that you will get a HTTP status code in the response.<br> Some\
    \ API calls will also return JSON response bodies which will contain information\
    \ about the resource.<br> Each status code which is returned will either be a\
    \ <b>success</b> code or an <b>error</b> code.<br><br> Success codes <table> <tr>\
    \ <th><b>Status code</b></th> <th><b>Description</b></th> </tr> <tr> <td><code>200\
    \ OK</code></td> <td>The request was successful</td> </tr> <tr> <td><code>201\
    \ Created</code></td> <td>Most likely to be found in the response of a <b>POST</b>\
    \ request.<br> This code indicates that the desired resource was successfully\
    \ created.</td> </tr> </table> <br>Error codes <table> <tr> <th><b>Status code</b></th>\
    \ <th><b>Description</b></th> </tr> <tr> <td><code>400 Bad request</code></td>\
    \ <td>The request you sent is most likely syntactically incorrect.<br> You should\
    \ check if the parameters in the request body or the url are correct.</td> </tr>\
    \ <tr> <td><code>401 Unauthorized</code></td> <td>The authentication failed.<br>\
    \ Most likely caused by a missing or wrong API token.</td> </tr> <tr> <td><code>403\
    \ Forbidden</code></td> <td>You do not have the permission the access the resource\
    \ which is requested.</td> </tr> <tr> <td><code>404 Not found</code></td> <td>The\
    \ resource you specified does not exist.</td> </tr> <tr> <td><code>500 Internal\
    \ server error</code></td> <td>An internal server error has occurred.<br> Normally\
    \ this means that something went wrong on our side.<br> However, sometimes this\
    \ error will appear if we missed to catch an error which is normally a 400 status\
    \ code! </td> </tr> </table> \n# Your First Request\n After reading the introduction\
    \ to our API, you should now be able to make your first call.<br> For testing\
    \ our API, we would always recommend to create a trial account for sevDesk to\
    \ prevent unwanted changes to your main account.<br> A trial account will be in\
    \ the highest tariff (materials management), so every sevDesk function can be\
    \ tested! <br><br>To start testing we would recommend one of the following tools:\
    \ <ul> <li><a href='https://www.getpostman.com/'>Postman</a></li> <li><a href='https://curl.haxx.se/download.html'>cURL</a></li>\
    \ </ul> This example will illustrate your first request, which is creating a new\
    \ Contact in sevDesk.<br> <ol> <li>Download <a href='https://www.getpostman.com/'><b>Postman</b></a>\
    \ for your desired system and start the application</li> <li>Enter <span><b>ht</span>tps://my.sevdesk.de/api/v1/Contact</b>\
    \ as the url</li> <li>Use the connective <b>?</b> to append <b>token=</b> to the\
    \ end of the url, or create an authorization header. Insert your API token as\
    \ the value</li> <li>For this test, select <b>POST</b> as the HTTP method</li>\
    \ <li>Go to <b>Headers</b> and enter the key-value pair <b>Content-type</b> +\
    \ <b>application/x-www-form-urlencoded</b><br> As an alternative, you can just\
    \ go to <b>Body</b> and select <b>x-www-form-urlencoded</b></li> <li>Now go to\
    \ <b>Body</b> (if you are not there yet) and enter the key-value pairs as shown\
    \ in the following picture<br><br> <img src='OpenAPI/img/FirstRequestPostman.PNG'\
    \ width='900'><br><br></li> <li>Click on <b>Send</b>. Your response should now\
    \ look like this:<br><br> <img src='OpenAPI/img/FirstRequestResponse.PNG' width='900'></li>\
    \ </ol> As you can see, a successful response in this case returns a JSON-formatted\
    \ response body containing the contact you just created.<br> For keeping it simple,\
    \ this was only a minimal example of creating a contact.<br> There are however\
    \ numerous combinations of parameters that you can provide which add information\
    \ to your contact."
  title: sevDesk API
  version: 2.0.0
  x-logo:
    backgroundColor: '#263241'
    altText: sevDesk Logo
    url: https://my.sevdesk.de/img/logos/1_100.png
servers:
- description: Our main application instance which most of our customers work with
  url: https://my.sevdesk.de/api/v1
- description: "Our swiss application instance, hosted and maintained by smart seven\
    \ AG"
  url: https://my.pebesmart.ch/api/v1
- description: sevDesk internal local instance
  url: http://sevdesk.local/api/v1
security:
- api_key: []
tags:
- description: "\n# Purpose of invoices in sevDesk\n Every time one of our sevDesk\
    \ customers sells an item or provides a service an invoice needs to be created.<br>\
    \ These invoice can then be payed by the end-customers so that the selling process\
    \ is completed.<br> The invoices are directly connected to the transactions of\
    \ the customer, so every time an invoice is created and marked as payed, there\
    \ must be a transaction on some bank account.<br> The invoice must then be linked\
    \ to this transaction, otherwise false reports for tax offices and other institutions\
    \ can be the case. \n# Attributes of an invoice\n Here is the table of all attributes\
    \ of invoices.<br> Necessary attributes, which must not be left out, are marked\
    \ red.<br> Attributes which are strongly recommended for valid bookkeeping are\
    \ marked orange.<br> There is also a distinction between invoice types, as not\
    \ all attributes are useful for all types.<br> <table> <tr> <th>Attribute</th>\
    \ <th>Invoice Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr>\
    \ <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> Defines the\
    \ vat-regulation for the invoice.<br> Can be: <ul> <li>default</li> <li>eu</li>\
    \ <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr>\
    \ <tr> <td><span style='color:red'>currency</span></td> <td>Any</td> <td> Currency\
    \ of the invoice.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:red'>taxText</span></td> <td>Any</td> <td>\
    \ Text describing the vat regulation you chose.<br> A common text of our German\
    \ customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td>\
    \ <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td>Any</td>\
    \ <td> The tax rate of the invoice.<br> Please be aware, that this value will\
    \ be overwritten by tax rates of the invoice positions. </td> <td>Integer</td>\
    \ </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td>Any</td>\
    \ <td> The sevDesk user which acts as a contact person for this invoice.<br> </td>\
    \ <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td>Any</td>\
    \ <td> If the sevDesk account is falling under the small entrepreneur scheme the\
    \ invoices must't contain any vat.<br> If this is the case, this attribute should\
    \ be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>invoiceDate</span></td>\
    \ <td>Any</td> <td> The invoice date. </td> <td>Date / Timestamp</td> </tr> <tr>\
    \ <td><span style='color:red'>status</span></td> <td>Any</td> <td> The invoice\
    \ status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>showNet</span></td>\
    \ <td>Any</td> <td> This attribute determines, if the price you give the invoice\
    \ positions will be regarded as gross or net.<br> If true, the price attribute\
    \ will hold the net value, otherwise the gross value, as described in the section\
    \ above. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>discount</span></td>\
    \ <td>Any</td> <td> If the end-customer gets a discount if he pays the invoice\
    \ in a given time, you can specify the percentage of the discount here.<br> Should\
    \ this be the case, you will need to provide a value for the attribute <b>discountTime</b>\
    \ too, otherwise there is no time given and the end-customer won't get a discount.<br>\
    \ If you don't want this, just leave this attribute at zero. </td> <td>Integer</td>\
    \ </tr> <tr> <td>discountTime</td> <td>Any</td> <td> If a value other than zero\
    \ is used for the discount attribute you need to specify the amount of days for\
    \ which the discount is granted. </td> <td>Integer</td> </tr> <tr> <td>enshrined</td>\
    \ <td>Any</td> <td> If the invoice is enshrined, it can not longer be changed.<br>\
    \ If you want this, you can provide the value \"1\".<br> Please be aware, that\
    \ this action can not be undone. </td> <td>Boolean</td> </tr> <tr> <td>customerInternalNote</td>\
    \ <td>Any</td> <td> You can use this attribute to provide a note for the invoice.<br>\
    \ It can be used for reference numbers, order numbers or other important information.\
    \ </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td>\
    \ <td>Any</td> <td> Holds the <b>complete</b> address to which the invoice is\
    \ directed.<br> You can use line brakes to separate the different address parts.\
    \ </td> <td>String</td> </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The\
    \ delivery date of the invoice.<br> This can also be a date range if you provide\
    \ another timestamp for <b>deliveryDateUntil</b>. </td> <td>Timestamp</td> </tr>\
    \ <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here\
    \ if you want the delivery date to be a date range and you have already given\
    \ a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td> </tr> <tr> <td><span\
    \ style='color:darkorange'>sendType</span></td> <td>Any</td> <td> If you don't\
    \ plan to send the invoice over another endpoint like <b>/Invoice/sendViaEmail</b>\
    \ or <b>Invoice/sendBy</b> but instead give it the status \"200\" directly, you\
    \ need to specify a send type here.<br> Valid types are: VPR (printed), VPDF (downloaded),\
    \ VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td>origin</td> <td>Any</td>\
    \ <td> You can specify the object from which an invoice originated, like an order.<br>\
    \ Just provide the ID of this object. </td> <td>Integer</td> </tr> <tr> <td><span\
    \ style='color:darkorange'>invoiceNumber</span></td> <td>Any</td> <td> The invoice\
    \ number. </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td> Your own tax set\
    \ that should be used if you defined <b>custom</b> as taxType.<br> </td> <td>Nested\
    \ object (TaxSet)</td> </tr> <tr> <td><span style='color:darkorange'>contact</span></td>\
    \ <td>Any</td> <td> The end-customer to which the invoice is directed.<br> Please\
    \ note, you <b>need</b> to provide a contact if the invoice has any other status\
    \ than 100. </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>header</span></td>\
    \ <td>Any</td> <td> The invoice header.<br> Usually consists of the invoice number\
    \ and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td>Any</td>\
    \ <td> A head text for the invoice.<br> Can contain certain html tags. </td> <td>String</td>\
    \ </tr> <tr> <td>footText</td> <td>Any</td> <td> A foot text for the invoice.<br>\
    \ Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>timeToPay</td>\
    \ <td>Any</td> <td> The time the end-customer has to pay the invoice in days.\
    \ </td> <td>Integer</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date\
    \ the end-customer has payed the invoice. </td> <td>Timestamp</td> </tr> <tr>\
    \ <td>paymentMethod</td> <td>Any</td> <td> The payment method for the invoice.<br>\
    \ Needs the ID of a specified payment method. </td> <td>Integer</td> </tr> <tr>\
    \ <td>costCentre</td> <td>Any</td> <td> A cost centre for the invoice. </td> <td>Nested\
    \ object (CostCentre)</td> </tr> <tr> <td>sendDate</td> <td>Any</td> <td> The\
    \ date the invoice was sent to the end-customer. </td> <td>Timestamp</td> </tr>\
    \ <tr> <td><span style='color:red'>invoiceType</span></td> <td><ul> <li>RE - invoice</li>\
    \ <li>WKR - recurring invoice</li> <li>SR - cancellation invoice</li> <li>MA -\
    \ invoice remider</li> <li>TR - partial invoice</li> <li>ER - final invoice</li>\
    \ </td> <td> The invoice type. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>dunningLevel</span></td>\
    \ <td>Reminders</td> <td> The dunning level.<br> Starts with 1 (Payment reminder)\
    \ and should be incremented by one every time another reminder is sent. </td>\
    \ <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>reminderDeadline</span></td>\
    \ <td>Reminders</td> <td> The deadline for the next reminder. </td> <td>Timestamp</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>reminderDebit</span></td> <td>Reminders</td>\
    \ <td> The reminder debit. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>reminderTotal</span></td>\
    \ <td>Reminders</td> <td> The total reminder amount. </td> <td>Double</td> </tr>\
    \ <tr> <td><span style='color:darkorange'>reminderCharge</span></td> <td>Reminders</td>\
    \ <td> The additional reminder charge. </td> <td>Double</td> </tr> <tr> <td><span\
    \ style='color:darkorange'>accountIntervall</span></td> <td>Recurring Invoices</td>\
    \ <td> The interval in which recurring invoices are due. </td> <td>ISO-8601 Duration</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>accountNextInvoice</span></td>\
    \ <td>Recurring Invoices</td> <td> The date when the next invoice is due. </td>\
    \ <td>Timestamp</td> </tr> </table> \n# The invoice number\n At this point we\
    \ wan't to pay special attention to the invoice number again.<br> The invoice\
    \ number is not an attribute that must be supplied when creating an invoice, however\
    \ for most, if not all of our customers, a correct enumeration is the key to structured\
    \ bookkeeping, which is why duplicate entries must be avoided.<br> For this reason,\
    \ most of the time a manual assignment of numbers is not the best idea and we\
    \ are happy to provide you a endpoints which will help out finding the next invoice\
    \ number.<br><br> This GET request will check what the next invoice number should\
    \ be, so that a correct enumeration is kept.<br> The concrete endpoint can be\
    \ used for a multitude of enumerations, but we will just concentrate on checking\
    \ the next invoice number.<br> You can change the <b>type</b> query string parameter\
    \ to your needs, depending on the invoice type for which you want the next number.\
    \ <ul> <li><code>ht<span>tps://my.sevdesk.de/api/v1/SevSequence/Factory/getByType?objectType=Invoice&type=RE</span></code></li>\
    \ </ul> \n# Types and status of invoices\n Invoice types <br> Invoices are most\
    \ certainly the most complex objects that can be handled over the API. There are\
    \ multiple types of invoices and these invoices can have multiple status again.\
    \ Let's have a look at the different types of invoices first.<br> <table> <tr>\
    \ <th>Invoice Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr>\
    \ <td>Normal invoice</td> <td> A normal invoice which documents a simple selling\
    \ process. </td> <td> RE </td> </tr> <tr> <td>Recurring invoice</td> <td> An invoice\
    \ which generates normal invoices with the same values regularly in fixed time\
    \ frames (every month, year, ...). </td> <td> WKR </td> </tr> <tr> <td>Cancellation\
    \ invoice</td> <td> An invoice which cancels another already created normal invoice.\
    \ </td> <td> SR </td> </tr> <tr> <td>Reminder invoice</td> <td> An invoice which\
    \ gets created if the end-customer failed to pay a normal invoice in a given time\
    \ frame.<br> Often includes some kind of reminder fee. </td> <td> MA </td> </tr>\
    \ <tr> <td>Part invoice</td> <td> Part of a complete invoice. All part invoices\
    \ together result in the complete invoice.<br> Often used if the end-customer\
    \ can partly pay for items or services. </td> <td> TR </td> </tr> <tr> <td>Final\
    \ invoice</td> <td> The final invoice of all part invoices which completes the\
    \ invoice.<br> After the final invoice is payed by the end-customer, the selling\
    \ process is complete. </td> <td> ER </td> </tr> </table><br> For now we will\
    \ only cover the normal invoices, as this is complex enough.<br> However, it is\
    \ important to keep in mind the abbreviations for all types of invoices or at\
    \ least the one you will need.<br> This is, because you will need to provide the\
    \ invoice type when creating an invoice.<br> <br> <b>Invoice status</b><br> Now\
    \ that we have covered all invoice types, let's move to the different status they\
    \ can have.<br> <table> <tr> <th>Invoice status</th> <th>Meaning</th> <th>Status\
    \ code</th> </tr> <tr> <td>Deactivated recurring invoice</td> <td> The invoice\
    \ is a deactivated recurring invoice.<br> This status code is only relevant for\
    \ recurring invoices. </td> <td> 50 </td> </tr> <tr> <td>Draft</td> <td> The invoice\
    \ is still a draft.<br> It has not been sent to the end-customer and can still\
    \ be changed. </td> <td> 100 </td> </tr> <tr> <td>Open / Due</td> <td> The invoice\
    \ has been sent to the end-customer.<br> It is either shown as <b>open</b> if\
    \ the pay date is not exceeded or <b>due</b> if it is. </td> <td> 200 </td> </tr>\
    \ <tr> <td>Payed</td> <td> The invoice has been payed by the end-customer.<br>\
    \ This means, that it is linked to a transaction on some payment account in sevDesk.\
    \ </td> <td> 1000 </td> </tr> </table><br> It is again important to keep in mind\
    \ the status codes for all status of invoices or at least the one you will need.<br>\
    \ This is, because you will need to provide the status code when creating an invoice.<br>\
    \ \n# How to book an invoice\n Booking the invoice with a transaction is probably\
    \ the most important part in the bookkeeping process.<br> There are several ways\
    \ on correctly booking an invoice, all by using the same endpoint.<br> This endpoint\
    \ is called <b>/Invoice/{id}/bookAmount</b>.<br><br> The first way of correctly\
    \ booking an invoice is to book it on the standard check account which is provided\
    \ by sevDesk.<br> This is perhaps the easiest way, as no transaction needs to\
    \ be manually created or searched.<br> The fitting transaction will automatically\
    \ be created on the standard account and the invoice will be booked with it.<br>\
    \ This works the same way with the register check account.<br><br> <img src='OpenAPI/img/bookAmountStandard.PNG'\
    \ width= '800px'><br><br> In the second variant, it is necessary that a transaction\
    \ already exists, because it is not automatically generated in a manual account\
    \ or online/finapi account.<br> For this, you must either create the transactions\
    \ or, in the case of an online/finapi account, import the transactions. When booking\
    \ the invoices it is important that an id and an objectName are passed along,\
    \ otherwise a logic error will occur.<br> <img src='OpenAPI/img/bookAmountWithTransaction.PNG'\
    \ width= '800px'><br><br> \n# How to filter for certain invoices\n Often you don't\
    \ want to retrieve all invoices in a sevDesk account or one specific invoice of\
    \ which you know the ID, but rather a list of invoices or a single invoice with\
    \ certain properties.<br> For this purpose we provide a bunch of filters that\
    \ you can attach to your GET query string for nearly all endpoints.<br> Here are\
    \ all filters applicable to an invoice query.<br> <table> <tr> <th>Filter</th>\
    \ <th>Description</th> </tr> <tr> <td>partiallyPaid=true</td> <td> Retrieve all\
    \ invoices which are partially paid </td> </tr> <tr> <td>orderByDebit=true</td>\
    \ <td>Retrieve all invoices ordered by their debit</td> </tr> <tr> <td>orderByDueTime=true</td>\
    \ <td>Retrieve all invoices ordered by their due time</td> </tr> <tr> <td>showAll=true</td>\
    \ <td>Retrieve all invoices of all types</td> </tr> <tr> <td>invoiceNumber={number}</td>\
    \ <td>Only retrieve all invoices with number as a invoice number</td> </tr> <tr>\
    \ <td>delinquent=true</td> <td>Only retrieve delinquent (due) invoices</td> </tr>\
    \ <tr> <td>notdelinquent=true</td> <td>Only retrieve invoices which are not delinquent\
    \ (due)</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only\
    \ retrieve all invoices with id as a tag.<br> You can specify multiple tags by\
    \ adding more array entries. </td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td>\
    \ <td>Only retrieve all invoices with id as a cost centre.<br> </td> </tr> <tr>\
    \ <td>status={status}</td> <td>Only retrieve invoices of a given status</td> </tr>\
    \ <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all invoices created\
    \ before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve\
    \ all invoices created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td>\
    \ <td>Only retrieve all invoices updated last before timestamp</td> </tr> <tr>\
    \ <td>updateAfter={timestamp}</td> <td>Only retrieve all invoices updated last\
    \ after timestamp</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td>\
    \ <td>Only retrieve all invoices with id as a contact<br> </td> </tr> <tr> <td>orderByDueDate=true</td>\
    \ <td>Retrieve all invoices ordered by their due date</td> </tr> <tr> <td>customerIntenalNote={note}</td>\
    \ <td>Only retrieve all invoices with note as a customer internal note</td> </tr>\
    \ <tr> <td>day={timestamp}</td> <td>Only retrieve all invoices where invoice date\
    \ falls on the day of timestamp</td> </tr> <tr> <td>startDate={timestamp}</td>\
    \ <td>Only retrieve all invoices where invoice date is bigger than timestamp</td>\
    \ </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all invoices where\
    \ invoice date is smaller than timestamp<br> If startDate and endDate are both\
    \ supplied, you will get all invoices in the defined range </td> </tr> <tr> <td>header={header}</td>\
    \ <td>Only retrieve all invoices with header as a header</td> </tr> <tr> <td>onlyDunned=true</td>\
    \ <td>Retrieve all invoices which are dunned</td> </tr> <tr> <td>showWkr=all</td>\
    \ <td>Retrieve all recurring invoices</td> </tr> <tr> <td>showMa=all</td> <td>Retrieve\
    \ all invoices which are payment reminders</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td>\
    \ <td>Only retrieve all invoices with id as an origin</td> </tr> <tr> <td>invoiceType={type}</td>\
    \ <td>Only retrieve all invoices with type as an invoice type</td> </tr> <tr>\
    \ <td>paymentMethod[id]={id}&paymentMethod[objectName]=PaymentMethod</td> <td>Only\
    \ retrieve all invoices with id as a payment method</td> </tr> <tr> <td>headerSearch={header}</td>\
    \ <td>Only retrieve all invoices of which the header is like header</td> </tr>\
    \ <tr> <td>headerStartsWith={headerStart}</td> <td>Only retrieve all invoices\
    \ of which the header starts with headerStart</td> </tr> <tr> <td>headerOrNumber={headerOrNumber}</td>\
    \ <td>Only retrieve all invoices of which the header or invoice number is like\
    \ headerOrNumber</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search\
    \ for invoices related to searchTerm</td> </tr> <tr> <td>orderByInvoiceNumber={ASC/DESC}</td>\
    \ <td>Order all invoices after invoice number in ASC/DESC order</td> </tr> <tr>\
    \ <td>invoiceNumberGreater={number}</td> <td>Only retrieve all invoices of which\
    \ the invoice number is bigger than number</td> </tr> <tr> <td>invoiceNumberSmaller={number}</td>\
    \ <td>Only retrieve all invoices of which the invoice number is smaller than number</td>\
    \ </tr> <tr> <td>sendType={type}</td> <td>Only retrieve all invoices with type\
    \ as a send type</td> </tr> <tr> <td>fulltextSearch={text}</td> <td>Search for\
    \ invoices, positions or contact with text as a text</td> </tr> </table>"
  name: Invoice
- description: "\n# Invoice positions\n Every invoice naturally contains one or more\
    \ invoice positions sometimes also called invoice items, invoice lines or line\
    \ items.<br> These positions can but mustn't contain parts from the sevDesk inventory.<br>\
    \ In sevDesk the invoice object itself just provides the skeleton to which positions\
    \ can be added.<br> Without the positions, the invoice would have a sum of zero\
    \ and therefore no real meaning.<br> For this reason it is necessary that we have\
    \ a closer look at invoice positions in this section.<br><br> What makes up a\
    \ invoice position?<br><br> A invoice position basically consist of: <ul> <li>A\
    \ part (optional but strongly recommended)</li> <li>The name of the part or item</li>\
    \ <li>A price for one unit of this part or item</li> <li>A unit in which the part\
    \ or item is measured</li> <li>A quantity showing how many units of the part or\
    \ item are in the position</li> <li>A tax rate</li> <li>An invoice to which the\
    \ position belongs</li> </ul> The total gross sum of the invoice position is then\
    \ calculated by the price being multiplied with the quantity and the tax rate,\
    \ which is previously converted to a point number.<br> So for a price of 100,\
    \ a quantity of two and a tax rate of 19 this would be:<br> 100 * 2 * 1,19 = 238<br><br>\
    \ There is also the option of regarding the price as the gross price.<br> This\
    \ is regulated by an attribute of invoice which is called showNet. More about\
    \ it in the attribute list.<br> In this case, the total sum will be the price\
    \ you provided and the net price will be calculated by our system.<br> Some of\
    \ our customers prefer this method, however make sure that you don't get prices\
    \ mixed up. \n# Invoice position attributes\n Here is the table of all attributes\
    \ of invoice positions.<br> Necessary attributes, which must not be left out,\
    \ are marked red.<br> Attributes which are strongly recommended for valid bookkeeping\
    \ are marked orange.<br> There is also a distinction between invoice types, as\
    \ not all attributes are useful for all types.<br> <table> <tr> <th>Attribute</th>\
    \ <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td>\
    \ <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span\
    \ style='color:red'>unity</span></td> <td> The unity in which one item is measured.\
    \ </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td>\
    \ <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>invoice</span></td>\
    \ <td> The invoice to which the position belongs. </td> <td>Nested object (Invoice)</td>\
    \ </tr> <tr> <td>discount</td> <td> A discount amount for the specific position.\
    \ </td> <td>Double</td> </tr> <tr> <td>text</td> <td> A text describing the position.\
    \ </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of\
    \ the position if there are multiple positions in an invoice.<br> Needs to start\
    \ with zero and is incremented for every new position.<br> If you want to order\
    \ them differently, you can change their position numbers to your needs. </td>\
    \ <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td>\
    \ <td> The name of the item in the position. </td> <td>String</td> </tr> <tr>\
    \ <td><span style='color:darkorange'>price</span></td> <td> The price for one\
    \ unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td> <span\
    \ style='color:darkorange'> part</span></td> <td> You can define a part from your\
    \ sevDesk inventory here.<br> Please be aware, you will still need to provide\
    \ the name, price and everything else as this will not automatically be generated.\
    \ </td> <td>Nested object (Part)</td> </tr> </table> \n# How to create/update\
    \ an invoice position\n You can create an invoice position when creating an invoice,\
    \ for more information visit the Invoice endpoint.<br> If you want to update an\
    \ invoice position for an existing invoice, then you must use the same endpoint\
    \ as when creating an invoice, then passing in the <span style='color:red'><b>ID</b></span>\
    \ along with the <span style='color:red'><b>objectName</b></span> of the invoice\
    \ and <span style='color:red'><b>mapAll</b></span>.<br> <ul> <li><code>{\"invoice\"\
    : { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"Invoice\", \"<b>mapAll</b>\": true},\
    \ <br>\"invoicePos\":[{...}]</code></li> </ul> In order to update an invoice position\
    \ in an existing invoice, the <span style='color:red'><b>ID</b></span> and the\
    \ <span style='color:red'><b>objectName</b></span> of the invoice must be transferred\
    \ and in the invoice position the <span style='color:red'><b>ID</b></span> of\
    \ the invoice position to be updated<br> <ul> <li><code>\"invoice\": { \"<b>id</b>\"\
    : 0, \"<b>objectName</b>\": \"Invoice\", \"<b>mapAll</b>\": true},<br> \"invoicePos\"\
    :[{\"<b>id</b>\": 0, ...}]</code></li> </ul>"
  name: InvoicePos
- description: "A check account is a payment account on which payments to or from\
    \ the customer are stored.<br> There are three general types of check accounts:\
    \ <ul><li>Offline</li> <li>Online</li> <li>Register</li> </ul> Offline accounts\
    \ are accounts on which transactions can be created and booked over the API or\
    \ over CSV and MT940 imports.<br> The only exception is the standard account,\
    \ on which transactions can not be created over the API.<br> Please also note,\
    \ that accounts with CSV and MT940 imports will have online given as the value\
    \ for their type attribute.<br> Nevertheless, they count as offline accounts.<br>\
    \ Online accounts are directly connected to a bank application and can not be\
    \ manipulated over the API.<br> Register accounts represent the cash register\
    \ for sevDesk account holders needing one and they behave the same way as offline\
    \ accounts.<br><br>Regarding the check accounts, you will most certainly only\
    \ need to request existing check accounts for using their ID in further requests.<br>\
    \ Therefore, you only need to send normal GET requests to the CheckAccount endpoint.<br>"
  name: CheckAccount
- description: "A check account transaction is a payment on a check account from or\
    \ to the customer.<br> They are essential for booking invoices, vouchers (receipts)\
    \ and credit notes with them to mark them as payed.<br> For a correct bookkeeping,\
    \ there is always one or multiple transactions linked to an invoice, a voucher\
    \ or a credit note, until the relevant object is completely payed."
  name: CheckAccountTransaction
- description: "Vouchers (receipts) is a generic term for various documents that serve\
    \ as proof of business transactions for the bookkeeping.<br> Incoming and outgoing\
    \ invoices, coupons and receipts are among the most common types of documents.<br>\
    \ Every time one of our sevDesk customers makes a monetary input or output, the\
    \ transaction needs to be documented with a receipt.<br> In sevDesk our customers\
    \ can create a digital version of this receipt, the voucher, to which the actual\
    \ offline receipt can be attached.<br> These vouchers can then be payed by the\
    \ end-customers or by the customer, depending if it is an input or output, so\
    \ that the transaction process is completely documented.<br> The vouchers are\
    \ directly connected to the transactions of the customer, so every time a voucher\
    \ is created and marked as payed, there must be a transaction on some bank account.<br>\
    \ The voucher must then be linked to this transaction, otherwise false reports\
    \ for tax offices and other institutions can be the case.<br> \n# Attributes of\
    \ a voucher\n Here is the table of all attributes of voucher.<br> Necessary attributes,\
    \ which must not be left out, are marked red.<br> Attributes which are strongly\
    \ recommended for valid bookkeeping are marked orange.<br> There is also a distinction\
    \ between voucher types, as not all attributes are useful for all types. <table>\
    \ <tr> <th>Attribute</th> <th>Voucher Type</th> <th>Description</th> <th>Attribute\
    \ Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td>\
    \ <td> Defines if the vat-regulation for the voucher<br> Can be: <ul> <li>default</li>\
    \ <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td>Any</td> <td>\
    \ The tax rate of the voucher.<br> Please be aware, that this value will be overwritten\
    \ by tax rates of the voucher positions. </td> <td>Integer</td> </tr> <tr> <td><span\
    \ style='color:red'>voucherType</span></td> <td>Any</td> <td> The type of the\
    \ voucher. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>voucherDate</span></td>\
    \ <td>Any</td> <td> The voucher date. </td> <td>Date / Timestamp</td> </tr> <tr>\
    \ <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the voucher.<br>\
    \ This can also be a date range if you provide another timestamp for <b>deliveryDateUntil</b>.\
    \ </td> <td>Date / Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td>\
    \ <td> You can provide a value here if you want the delivery date to be a date\
    \ range and you have already given a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td>\
    \ </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td>\
    \ The voucher status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>creditDebit</span></td>\
    \ <td>Any</td> <td> Defines if the voucher is a credit (income) or debit (output).<br>\
    \ If you supply <b>C</b> as the value, the voucher is a credit.<br> If you supply\
    \ <b>D</b> as the value, the voucher is a debit. </td> <td>String</td> </tr> <tr>\
    \ <td>enshrined</td> <td>Any</td> <td> If the voucher is enshrined, it can not\
    \ longer be changed.<br> If you want this, you can provide the value \"1\".<br>\
    \ Please be aware, that this action can not be undone. </td> <td>Boolean</td>\
    \ </tr> <tr> <td>taxSet</td> <td>Any</td> <td> If you supplied <b>custom</b> as\
    \ the value for <b>taxType</b>, you can specify which tax set should be used.\
    \ </td> <td>Nested object (TaxSet)</td> </tr> <tr> <td><span style='color:darkorange'>paymentDeadline</span></td>\
    \ <td>Any</td> <td> The payment deadline of the voucher.<br> If this date is exceeded,\
    \ the voucher will be shown as due. </td> <td>Timestamp</td> </tr> <tr> <td><span\
    \ style='color:darkorange'>supplierNameAtSave</span></td> <td>Any</td> <td> The\
    \ name of the end-customer (contact) used for the voucher.<br> </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>description</span></td> <td>Any</td>\
    \ <td> The voucher number or voucher description. </td> <td>String</td> </tr>\
    \ <tr> <td><span style='color:darkorange'>supplier</span></td> <td>Any</td> <td>\
    \ The end-customer to which the voucher is directed.<br> Please note, you <b>need</b>\
    \ to provide a contact if the voucher has any other status than 100. </td> <td>Nested\
    \ object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>document</span></td>\
    \ <td>Any</td> <td> The document of the voucher.<br> </td> <td>Nested object (Document)</td>\
    \ </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the voucher was payed\
    \ by the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td>costCentre</td>\
    \ <td>Any</td> <td> A cost centre for the voucher. </td> <td>Nested object (CostCentre)</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>recurringIntervall</span></td>\
    \ <td>Recurring Vouchers</td> <td> The interval in which recurring vouchers are\
    \ due in months.<br> Possible values are:<br> <ul> <li>1 (monthly)</li> <li>3\
    \ (quarterly)</li> <li>6 (semiannual)</li> <li>12 (yearly)</li> <li>24 (every\
    \ 2 years)</li> <li>36 (every 3 years)</li> <li>48 (every 4 years)</li> <li>60\
    \ (every 5 years)</li> </ul> </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>recurringStartDate</span></td>\
    \ <td>Recurring Vouchers</td> <td> The date when the recurring vouchers start.\
    \ </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringNextVoucher</span></td>\
    \ <td>Recurring Vouchers</td> <td> The date when the next voucher is due. </td>\
    \ <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringLastVoucher</span></td>\
    \ <td>Recurring Vouchers</td> <td> The date the last previous voucher was generated.\
    \ </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringEndDate</span></td>\
    \ <td>Recurring Vouchers</td> <td> The date the generation of recurring vouchers\
    \ ends. </td> <td>Timestamp</td> </tr> </table> \n# Types and status of vouchers\n\
    \ Vouchers are one of the more complex objects that can be handled over the API.<br>\
    \ There are two types of vouchers and these vouchers can have multiple status\
    \ again.<br> Let's have a look at the different types of vouchers first.<br> <table>\
    \ <tr> <th>Voucher Type</th> <th>Description</th> <th>Abbreviation</th> </tr>\
    \ <tr> <td>Normal voucher</td> <td> A normal voucher which documents a simple\
    \ selling process. </td> <td> VOU </td> </tr> <tr> <td>Recurring voucher</td>\
    \ <td> A voucher which generates normal vouchers with the same values regularly\
    \ in fixed time frames (every month, year, ...). </td> <td> RV </td> </tr> </table>\
    \ <br> For now we will only cover the normal vouchers, as this is complex enough.<br><br>\
    \ <b>Voucher status</b> Now that we have covered all voucher types, let's move\
    \ to the different status they can have.<br> <table> <tr> <th>Voucher status</th>\
    \ <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The voucher\
    \ is still a draft.<br> It has not been marked as completed an can still be changed.\
    \ </td> <td> 50 </td> </tr> <tr> <td>Unpaid / Due</td> <td> The voucher has been\
    \ completed but not payed.<br> It is either shown as <b>unpaid</b> if the pay\
    \ date is not exceeded or <b>due</b> if it is. </td> <td> 100 </td> </tr> <tr>\
    \ <td>Payed</td> <td> The voucher has been payed by the end-customer or the sevDesk\
    \ customer.<br> This means, that it is linked to a transaction on some payment\
    \ account in sevDesk. </td> <td> 1000 </td> </tr> </table> <br> It is important\
    \ to keep in mind the status codes for all status of vouchers or at least the\
    \ one you will need.<br> This is, because you will need to provide the status\
    \ code when creating a voucher. \n# Accounting type\n An accounting type is the\
    \ booking account used in voucher positions.<br> It is essential that you always\
    \ provide one, as it is relevant for multiple business reports.<br> In general,\
    \ accounting types are differentiated into income and output accounting types.<br>\
    \ Income types should only be used for debit vouchers and output types only for\
    \ credit vouchers!<br> Here are two examples how accounting types can be chosen\
    \ by our customers in the web interface:<br><br> <img src='OpenAPI/img/creditAccountingTypes.PNG'\
    \ width= '700px'><br><br> <img src='OpenAPI/img/debitAccountingType.PNG' width=\
    \ '700px'><br><br> Regarding the accounting types, you will most certainly only\
    \ need to request existing accounting types for using their ID in further requests.<br>\
    \ Therefore, you only need to send normal GET requests to the AccountingType endpoint.<br>\
    \ \n# How to filter for certain vouchers\n <table> <tr> <th>Filter</th> <th>Description</th>\
    \ </tr> <tr> <td>accountingType[id]={id}&accountingType[objectName]=AccountingType</td>\
    \ <td>Only retrieve all vouchers which contain at least one position using id\
    \ as an accounting type.<br> </td> </tr> <tr> <td>withoutCatering=true</td> <td>Retrieve\
    \ all vouchers except catering vouchers.</td> </tr> <tr> <td>year={year}</td>\
    \ <td>Only retrieve all vouchers with a voucher date in year.</td> </tr> <tr>\
    \ <td>month={month}</td> <td>Only retrieve all vouchers with a voucher date in\
    \ month.<br> Can be combined with a year. </td> </tr> <tr> <td>descriptionLike={description}</td>\
    \ <td>Only retrieve all vouchers with a description containing description.</td>\
    \ </tr> <tr> <td>creditDebit={C/D}</td> <td>Supply <b>C</b> to only retrieve credit\
    \ vouchers and <b>D</b> to only retrieve debit vouchers.</td> </tr> <tr> <td>supplierName={name}</td>\
    \ <td>Only retrieve all vouchers with a supplier having a name like name.</td>\
    \ </tr> <tr> <td>commentLike={comment}</td> <td>Only retrieve all vouchers having\
    \ a position with a comment like comment.</td> </tr> <tr> <td>searchCommentOrDescription={text}</td>\
    \ <td>Only retrieve all vouchers having a position with comment like text or a\
    \ description like text.</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td>\
    \ <td>Only retrieve all vouchers with id as a contact<br> </td> </tr> <tr> <td>createBefore={timestamp}</td>\
    \ <td>Only retrieve all vouchers created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td>\
    \ <td>Only retrieve all vouchers created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td>\
    \ <td>Only retrieve all vouchers updated last before timestamp</td> </tr> <tr>\
    \ <td>updateAfter={timestamp}</td> <td>Only retrieve all vouchers updated last\
    \ after timestamp</td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve\
    \ all vouchers where voucher date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td>\
    \ <td> Only retrieve all vouchers where voucher date is smaller than timestamp<br>\
    \ If startDate and endDate are both supplied, you will get all vouchers in the\
    \ defined range. </td> </tr> <tr> <td>object[id]={id}&object[objectName]={objectName}</td>\
    \ <td>Only retrieve all vouchers with a linked object with ID id and objectName\
    \ as object name.<br> </td> </tr> <tr> <td>startPayDate={timestamp}</td> <td>Only\
    \ retrieve all vouchers where pay date is bigger than timestamp</td> </tr> <tr>\
    \ <td>endPayDate={timestamp}</td> <td> Only retrieve all vouchers where pay date\
    \ is smaller than timestamp<br> If startPayDate and endPayDate are both supplied,\
    \ you will get all vouchers in the defined range. </td> </tr> <tr> <td>status={status}</td>\
    \ <td>Only retrieve vouchers of a given status</td> </tr> <tr> <td>orderByDebit=true</td>\
    \ <td>Retrieve all vouchers ordered by their debit</td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td>\
    \ <td>Only retrieve all vouchers with id as a cost centre.<br> </td> </tr> <tr>\
    \ <td>voucherType={type}</td> <td>Only retrieve all vouchers with type as a voucher\
    \ type</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only\
    \ retrieve all vouchers with id as an origin</td> </tr> <tr> <td>globalSearch={searchTerm}</td>\
    \ <td>Search for vouchers related to searchTerm</td> </tr> <tr> <td>contactOrObject[id]={id}&contactOrObject[objectName]={objectName}</td>\
    \ <td>Only retrieve all vouchers with a linked object or a contact with ID id\
    \ and objectName as object name.<br> </td> </tr> <tr> <td>orderByVoucherNumber={ASC/DESC}</td>\
    \ <td>Order all vouchers after voucher number in ASC/DESC order</td> </tr> <tr>\
    \ <td>delinquent=true</td> <td>Only retrieve delinquent (due) vouchers</td> </tr>\
    \ <tr> <td>hasDocument=true</td> <td>Only retrieve vouchers which have an attached\
    \ document</td> </tr> <tr> <td>noRv=true</td> <td>Only retrieve vouchers which\
    \ are not of type RV</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td>\
    \ <td>Only retrieve all vouchers with id as a tag.<br> You can specify multiple\
    \ tags by adding more array entries. </td> </tr> <tr> <td>startAmount={amount}</td>\
    \ <td>Only retrieve all vouchers with a sum bigger than amount.<br> If your provided\
    \ amount is negative, it will retrieve all vouchers with a sum smaller than amount.</td>\
    \ </tr> <tr> <td>endAmount={amount}</td> <td> Only retrieve all vouchers with\
    \ a sum smaller than amount.<br> If your provided amount is negative, it will\
    \ retrieve all vouchers with a sum bigger than amount.<br> If startAmount and\
    \ endAmount are both supplied, you will get all vouchers in the defined range.\
    \ </td> </tr> <tr> <td>fulltextSearch={text}</td> <td>Search for vouchers, positions\
    \ or contact with text as a text</td> </tr> <tr> <td>fulltextSearchObjects={object1,\
    \ object2, ...}</td> <td>Enables different objects to search in with the fulltextSearch.</td>\
    \ </tr> </table><br>"
  name: Voucher
- description: "Every voucher can contain one or more voucher positions.<br> These\
    \ positions must contain an accounting type (booking account) so that the voucher\
    \ can be booked accordingly.<br> In sevDesk the voucher object itself just provides\
    \ the skeleton to which positions can be added.<br> Without the positions, the\
    \ voucher would have a sum of zero and therefore no real meaning.<br> For this\
    \ reason it is necessary that we have a closer look at voucher positions in this\
    \ section. \n# What makes up a voucher position?\n A voucher position basically\
    \ consist of: <ul> <li>An accounting type (booking account)</li> <li>A sum</li>\
    \ <li>A tax rate</li> <li>A voucher to which the position belongs</li> </ul> The\
    \ total gross sum of the voucher position is then calculated by the sum being\
    \ multiplied  with the tax rate, which is previously converted to a point number.<br>\
    \ So for a sum of 100 and a tax rate of 19 this would be:<br> 100 * 1,19 = 119<br><br>\
    \ There is also the option of regarding the sum as the gross price.<br> This is\
    \ regulated by an attribute of the voucher position which is called net. More\
    \ about it in the attribute list.<br> In this case, the total sum will be the\
    \ sum you provided and the net price will be calculated by our system.<br> Some\
    \ of our customers prefer this method, however make sure that you don't get prices\
    \ mixed up. \n# Voucher position attributes\n Here is the table of all attributes\
    \ of voucher positions.<br> Necessary attributes, which must not be left out,\
    \ are marked red.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute\
    \ Type</th> </tr> <tr> <td><span style='color:red'>sum</span></td> <td> The sum\
    \ of the voucher position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td>\
    \ <td> The tax rate of the voucher position. </td> <td>Double</td> </tr> <tr>\
    \ <td><span style='color:red'>voucher</span></td> <td> The voucher to which the\
    \ position belongs. </td> <td>Nested object (Voucher)</td> </tr> <tr> <td>comment</td>\
    \ <td> A comment describing the position. </td> <td>String</td> </tr> <tr> <td><span\
    \ style='color:red'>net</span></td> <td> Define if the sum you provided is inclusive\
    \ (false) or exclusive vat (true).<br> All positions must be either net or gross,\
    \ a mixture of the two is not possible. </td> <td>Boolean</td> </tr> <tr> <td><span\
    \ style='color:red'>accountingType</span></td> <td> The accounting type (booking\
    \ account) for the voucher position. </td> <td>Nested object (AccountingType)</td>\
    \ </tr> </table>"
  name: VoucherPos
- description: "\n# Purpose of orders in sevDesk\n Orders serve a multitude of purposes\
    \ in sevDesk.<br> Although strictly speaking an order has just one single purpose,\
    \ we regard three types of objects as orders.<br> The <b>estimate / proposal</b>\
    \ which gets sent to an end-customer by the customer.<br> The <b>order confirmation</b>\
    \ from an accepted estimate.<br> The <b>delivery note</b> which is sent if goods\
    \ have been sent by the customer.<br> If you need to handle any of these objects,\
    \ this detail documentation is the right place!<br> Orders are really similar\
    \ to invoices in regards to their attributes and representation.<br> This is due\
    \ to their close relation to invoices, as invoices can be created from orders.\
    \ \n# Types and status of orders\n Orders are one of the more complex objects\
    \ that can be handled over the API.<br> As already mentioned, there are different\
    \ types of orders and these orders can have multiple status again.<br> Let's have\
    \ a look at the different types of orders first.<br> <table> <tr> <th>Order Type</th>\
    \ <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Estimate / Proposal</td>\
    \ <td> A normal order which documents a simple estimation / proposal for an end-customer.\
    \ </td> <td> AN </td> </tr> <tr> <td>Order confirmation</td> <td> A confirmation\
    \ for an estimate / proposal. </td> <td> AB </td> </tr> <tr> <td>Delivery note</td>\
    \ <td> A confirmation that goods from an estimate / proposal have been sent. </td>\
    \ <td> LI </td> </tr> </table> Fortunately all types of order share the same set\
    \ of attributes so it is only important to keep in mind the abbreviations for\
    \ all types of orders or at least the one you will need.<br> This is, because\
    \ you will need to provide the order type when creating an order.<br><br> <b>Order\
    \ status</b><br> Now that we have covered all order types, let's move to the different\
    \ status they can have.<br><br> <table> <tr> <th>Order status</th> <th>Meaning</th>\
    \ <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The order is still a draft.<br>\
    \ It has not been sent to the end-customer and can still be changed. </td> <td>\
    \ 100 </td> </tr> <tr> <td>Delivered</td> <td> The order has been sent to the\
    \ end-customer.<br> </td> <td> 200 </td> </tr> <tr> <td>Rejected / Cancelled</td>\
    \ <td> The order has been rejected by the end-customer.<br> </td> <td> 300 </td>\
    \ </tr> <tr> <td>Accepted</td> <td> The order has been accepted by the end-customer.<br>\
    \ </td> <td> 500 </td> </tr> <tr> <td>Partially Calculated</td> <td> An invoice\
    \ for parts of the order (but not the full order) has been created.<br> </td>\
    \ <td> 750 </td> </tr> <tr> <td>Calculated</td> <td> The order has been calculated.<br>\
    \ One or more invoices have been created covering the whole order. </td> <td>\
    \ 1000 </td> </tr> </table> It is important to keep in mind the status codes for\
    \ all status of orders or at least the one you will need.<br> This is, because\
    \ you will need to provide the status code when creating an order. \n# Attributes\
    \ of an order\n Here is the table of all attributes of orders.<br> Necessary attributes,\
    \ which must not be left out, are marked red.<br> Attributes which are strongly\
    \ recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th>\
    \ <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td>\
    \ <td> Defines the vat-regulation for the order.<br> Can be: <ul> <li>default</li>\
    \ <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td>\
    \ </tr> <tr> <td>taxSet</td> <td> Your own tax set that should be used if you\
    \ defined <b>custom</b> as taxType.<br> </td> <td>Nested object (TaxSet)</td>\
    \ </tr> <tr> <td><span style='color:red'>currency</span></td> <td> Currency of\
    \ the order.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:red'>version</span></td> <td> Version of the\
    \ order.<br> Can be used if you have multiple drafts for the same order.<br> Should\
    \ start with 0. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>taxText</span></td>\
    \ <td> Text describing the vat regulation you chose.<br> A common text of our\
    \ German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer\
    \ 19% </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td>\
    \ <td> The tax rate of the order.<br> Please be aware, that this value will be\
    \ overwritten by tax rates of the order positions. </td> <td>Integer</td> </tr>\
    \ <tr> <td><span style='color:red'>contactPerson</span></td> <td> The sevDesk\
    \ user which acts as a contact person for this order.<br> </td> <td>Nested object\
    \ (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td> If the sevDesk account\
    \ is falling under the small entrepreneur scheme the order must't contain any\
    \ vat.<br> If this is the case, this attribute should be true, otherwise false.\
    \ </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>orderDate</span></td>\
    \ <td> The order date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td>\
    \ <td> The order status. </td> <td>Integer</td> </tr> <tr> <td>showNet</td> <td>\
    \ This attribute determines, if the price you give the order positions will be\
    \ regarded as gross or net.<br> If true, the price attribute will hold the net\
    \ value, otherwise the gross value. </td> <td>Boolean</td> </tr> <tr> <td>customerInternalNote</td>\
    \ <td> You can use this attribute to provide a note for the order.<br> It can\
    \ be used for reference numbers, order numbers or other important information.\
    \ </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td>\
    \ <td> Holds the <b>complete</b> address to which the order is directed.<br> You\
    \ can use line brakes to separate the different address parts. </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td> If you\
    \ don't plan to send the order over another endpoint like <b>/Order/sendViaEmail</b>\
    \ or <b>Order/sendBy</b> but instead give it the status \"200\" directly, you\
    \ need to specify a send type here.<br> Valid types are: VPR (printed), VPDF (downloaded),\
    \ VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td>origin</td> <td>\
    \ You can specify the object from which an order originated.<br> Just provide\
    \ the ID of this object. </td> <td>Integer</td> </tr> <tr> <td>typeOrigin</td>\
    \ <td> Specifies the object name of the object from which an order originated.<br>\
    \ Most likely <b>Order</b> or <b>Invoice</b>. </td> <td>String</td> </tr> <tr>\
    \ <td><span style='color:red'>orderNumber</span></td> <td> The order number. </td>\
    \ <td>String</td> </tr> <tr> <td><span style='color:red'>contact</span></td> <td>\
    \ The end-customer to which the order is directed.<br> </td> <td>Nested object\
    \ (Contact)</td> </tr> <tr> <td><span style='color:red'>header</span></td> <td>\
    \ The order header.<br> Usually consists of the order number and a prefix. </td>\
    \ <td>String</td> </tr> <tr> <td>headText</td> <td> A head text for the order.<br>\
    \ Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td>\
    \ <td> A foot text for the order.<br> Can contain certain html tags. </td> <td>String</td>\
    \ </tr> <tr> <td>paymentTerms</td> <td> The payment terms for the order.<br> </td>\
    \ <td>Integer</td> </tr> <tr> <td>deliveryTerms</td> <td> The delivery terms for\
    \ the order.<br> </td> <td>Integer</td> </tr> <tr> <td>sendDate</td> <td> The\
    \ date the order was sent to the end-customer. </td> <td>Timestamp</td> </tr>\
    \ <tr> <td><span style='color:red'>orderType</span></td> <td> The order type.\
    \ </td> <td>String</td> </tr> </table> \n# How to filter for certain orders\n\
    \ Often you don't want to retrieve all orders in a sevDesk account or one specific\
    \ order of which you know the ID, but rather a list of orders or a single order\
    \ with certain properties.<br> For this purpose we provide a bunch of filters\
    \ that you can attach to your GET query string for nearly all endpoints.<br> Here\
    \ are all filters applicable to an order query. <table> <tr> <th>Filter</th> <th>Description</th>\
    \ </tr> <tr> <td>orderNumber={number}</td> <td>Only retrieve all orders with number\
    \ as a order number</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td>\
    \ <td>Only retrieve all orders with id as a tag.<br> You can specify multiple\
    \ tags by adding more array entries. </td> </tr> <tr> <td>status={status}</td>\
    \ <td>Only retrieve orders of a given status</td> </tr> <tr> <td>createBefore={timestamp}</td>\
    \ <td>Only retrieve all orders created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td>\
    \ <td>Only retrieve all orders created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td>\
    \ <td>Only retrieve all orders updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td>\
    \ <td>Only retrieve all orders updated last after timestamp</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td>\
    \ <td>Only retrieve all orders with id as a contact<br> </td> </tr> <tr> <td>startDate={timestamp}</td>\
    \ <td>Only retrieve all orders where order date is bigger than timestamp</td>\
    \ </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all orders where\
    \ order date is smaller than timestamp<br> If startDate and endDate are both supplied,\
    \ you will get all orders in the defined range </td> </tr> <tr> <td>orderType={type}</td>\
    \ <td>Only retrieve all orders with type as an order type</td> </tr> <tr> <td>headerSearch={header}</td>\
    \ <td>Only retrieve all orders of which the header is like header</td> </tr> <tr>\
    \ <td>globalSearch={searchTerm}</td> <td>Search for orders related to searchTerm</td>\
    \ </tr> <tr> <td>orderByOrderNumber={ASC/DESC}</td> <td>Order all orders after\
    \ order number in ASC/DESC order</td> </tr> <tr> <td>orderNumberGreater={number}</td>\
    \ <td>Only retrieve all orders of which the order number is bigger than number</td>\
    \ </tr> <tr> <td>orderNumberNumberSmaller={number}</td> <td>Only retrieve all\
    \ orders of which the order number is smaller than number</td> </tr> <tr> <td>startAmount={amount}</td>\
    \ <td>Only retrieve all orders of which the (net/gross) sum is larger or equal\
    \ amount</td> </tr> <tr> <td>endAmount={amount}</td> <td>Only retrieve all orders\
    \ of which the (net/gross) sum is smaller or equal amount</td> </tr> </table>"
  name: Order
- description: |2-

    # Order position attributes
     Here is the tables of all attributes of order positions.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>order</span></td> <td> The order to which the position belongs. </td> <td>Nested object (Order)</td> </tr> <tr> <td>discount</td> <td> A discount amount for the specific position. </td> <td>Double</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in an order.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>part</span></td> <td> You can define a part from your sevDesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table>
  name: OrderPos
- description: "\n# Purpose of credit notes in sevDesk\n A credit notes is essentially\
    \ a special type of invoice which is not written by the service provider but rather\
    \ by the beneficiary.<br> In common use, the term credit note is used when someone\
    \ receives a payment for which he did not write an invoice.<br> In sevDesk you\
    \ need to choose a booking category for the credit note you want to create.<br>\
    \ This booking category describes why you need to create a credit note and can't\
    \ be disregarded.<br> \n# Credit note booking categories\n As mentioned above,\
    \ every credit note needs to have a booking category.<br> The following categories\
    \ are available at the moment. </p> <table> <tr> <th>Booking Category</th> <th>Description</th>\
    \ <th>Abbreviation</th> </tr> <tr> <td>Provision</td> <td> The credit note is\
    \ a provision. </td> <td> PROVISION </td> </tr> <tr> <td>Assigned royalty</td>\
    \ <td> The credit note is a assigned royalty. </td> <td> ROYALTY_ASSIGNED </td>\
    \ </tr> <tr> <td>Unassigned royalty</td> <td> The credit note is a unassigned\
    \ royalty. </td> <td> ROYALTY_UNASSIGNED </td> </tr> <tr> <td>Underachievement\
    \ of invoice</td> <td> The Credit Note is a underachievement of an invoice or\
    \ voucher.<br> If this is the case, you need to provide the ID of this invoice\
    \ or voucher in the attribute refSrcInvoice or refSrcVoucher! </td> <td> UNDERACHIEVEMENT\
    \ </td> </tr> <tr> <td>To be booked on special account</td> <td> The Credit Note\
    \ should be booked on a special account.<br> If this is the case, you need to\
    \ provide the ID of this account in the attribute accountingType! </td> <td> ACCOUNTING_TYPE\
    \ </td> </tr> </table> \n# Types and status of credit notes\n Credit note types\
    \ <br><br> At the moment, a credit note can only have one status.<br> This table\
    \ might be extended in the future, if more status are introduced. <table> <tr>\
    \ <th>Credit Note Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr>\
    \ <td>Normal credit note</td> <td> A normal credit note. </td> <td> CN </td> </tr>\
    \ </table><br> Just like with invoices, it is important to keep in mind the abbreviations\
    \ for all types of credit notes or at least the one you will need.<br> This is,\
    \ because you will need to provide the credit note type when creating an credit\
    \ note. Credit note status<br><br> <b>CreditNote status</b><br> Now that we have\
    \ covered all credit note types, let's move to the different status they can have.<br>\
    \ <table> <tr> <th>Credit note status</th> <th>Meaning</th> <th>Status code</th>\
    \ </tr> <tr> <td>Draft</td> <td> The credit note is still a draft.<br> It has\
    \ not been sent to the end-customer and can still be changed. </td> <td> 100 </td>\
    \ </tr> <tr> <td>Delivered</td> <td> The credit note has been sent to the end-customer.<br>\
    \ </td> <td> 200 </td> </tr> <tr> <td>Payed</td> <td> The credit note has been\
    \ payed.<br> </td> <td> 1000 </td> </tr> </table> It is again important to keep\
    \ in mind the status codes for all status of credit notes or at least the one\
    \ you will need.<br> This is, because you will need to provide the status code\
    \ when creating a credit note. \n# Attributes of a credit note\n Here is the table\
    \ of all attributes of credit notes.<br> Necessary attributes, which must not\
    \ be left out, are marked red.<br> Attributes which are strongly recommended for\
    \ valid bookkeeping are marked orange.<br> There is also a distinction between\
    \ credit note types. <table> <tr> <th>Attribute</th> <th>Credit Note Type</th>\
    \ <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td>\
    \ <td>Any</td> <td> Defines the vat-regulation for the credit note.<br> Can be:\
    \ <ul> <li>default</li> <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li>\
    \ </ul> </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>accountingType</span></td>\
    \ <td>Any</td> <td> The account on which this credit note should be booked.<br>\
    \ This attribute <b>has</b> to be used in case the booking category <b>ACCOUNTING_TYPE</b>\
    \ is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>refSrcInvoice</span></td>\
    \ <td>Any</td> <td> The invoice from which the underachievement originates.<br>\
    \ This attribute <b>has</b> to be used in case the booking category <b>UNDERACHIEVEMENT</b>\
    \ is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>refSrcVoucher</span></td>\
    \ <td>Any</td> <td> The voucher from which the underachievement originates.<br>\
    \ This attribute <b>has</b> to be used in case the booking category <b>UNDERACHIEVEMENT</b>\
    \ is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>currency</span></td>\
    \ <td>Any</td> <td> Currency of the credit note.<br> Needs to be currency code\
    \ according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxText</span></td>\
    \ <td>Any</td> <td> Text describing the vat regulation you chose.<br> A common\
    \ text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer\
    \ 19% </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td>\
    \ <td>Any</td> <td> The tax rate of the credit note.<br> Please be aware, that\
    \ this value will be overwritten by tax rates of the credit note positions. </td>\
    \ <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td>\
    \ <td>Any</td> <td> The sevDesk user which acts as a contact person for this credit\
    \ note.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td>\
    \ <td>Any</td> <td> If the sevDesk account is falling under the small entrepreneur\
    \ scheme the credit notes must't contain any vat.<br> If this is the case, this\
    \ attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr>\
    \ <td><span style='color:red'>creditNoteDate</span></td> <td>Any</td> <td> The\
    \ credit note date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td>\
    \ <td>Any</td> <td> The credit note status. </td> <td>Integer</td> </tr> <tr>\
    \ <td><span style='color:darkorange'>showNet</span></td> <td>Any</td> <td> This\
    \ attribute determines, if the price you give the credit note positions will be\
    \ regarded as gross or net.<br> If true, the price attribute will hold the net\
    \ value, otherwise the gross value, as described in the section above. </td> <td>Boolean</td>\
    \ </tr> <tr> <td>enshrined</td> <td>Any</td> <td> If the credit note is enshrined,\
    \ it can not longer be changed.<br> If you want this, you can provide the value\
    \ \"1\".<br> Please be aware, that this action can not be undone. </td> <td>Boolean</td>\
    \ </tr> <tr> <td>customerInternalNote</td> <td>Any</td> <td> You can use this\
    \ attribute to provide a note for the credit note.<br> It can be used for reference\
    \ numbers, order numbers or other important information. </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td>Any</td>\
    \ <td> Holds the <b>complete</b> address to which the credit note is directed.<br>\
    \ You can use line brakes to separate the different address parts. </td> <td>String</td>\
    \ </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the\
    \ credit note.<br> This can also be a date range if you provide another timestamp\
    \ for <b>deliveryDateUntil</b>. </td> <td>Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td>\
    \ <td>Any</td> <td> You can provide a value here if you want the delivery date\
    \ to be a date range and you have already given a timestamp to <b>deliveryDate</b>.\
    \ </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td>\
    \ <td>Any</td> <td> If you don't plan to send the credit note over another endpoint\
    \ like <b>/CreditNote/sendViaEmail</b> or <b>CreditNote/sendBy</b> but instead\
    \ give it the status \"200\" directly, you need to specify a send type here.<br>\
    \ Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal).\
    \ </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>creditNoteNumber</span></td>\
    \ <td>Any</td> <td> The credit note number. </td> <td>String</td> </tr> <tr> <td><span\
    \ style='color:darkorange'>contact</span></td> <td>Any</td> <td> The end-customer\
    \ to which the credit note is directed.<br> </td> <td>Nested object (Contact)</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>header</span></td> <td>Any</td>\
    \ <td> The credit note header.<br> Usually consists of the credit note number\
    \ and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td>Any</td>\
    \ <td> A head text for the credit note.<br> Can contain certain html tags. </td>\
    \ <td>String</td> </tr> <tr> <td>footText</td> <td>Any</td> <td> A foot text for\
    \ the credit note.<br> Can contain certain html tags. </td> <td>String</td> </tr>\
    \ <tr> <td>payDate</td> <td>Any</td> <td> The date the credit note has been payed.\
    \ </td> <td>Timestamp</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A\
    \ cost centre for the credit note. </td> <td>Nested object (CostCentre)</td> </tr>\
    \ <tr> <td>sendDate</td> <td>Any</td> <td> The date the credit note has been sent\
    \ to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>creditNoteType</span></td>\
    \ <td>Any</td> <td> The credit note type. </td> <td>String</td> </tr> <tr> <td><span\
    \ style='color:red'>bookingCategory</span></td> <td>Any</td> <td> The booking\
    \ category of the credit note.<br> </td> <td>String</td> </tr> <tr> <td>taxSet</td>\
    \ <td> Your own tax set that should be used if you defined <b>custom</b> as taxType.<br>\
    \ </td> <td>Nested object (TaxSet)</td> </tr> </table> \n# The credit note number\n\
    \ At this point we wan't to pay special attention to the credit note number again.<br>\
    \ The credit note number is not an attribute that must be supplied when creating\
    \ a credit note, however for most, if not all of our customers, a correct enumeration\
    \ is the key to structured bookkeeping, which is why duplicate entries must be\
    \ avoided.<br> For this reason, most of the time a manual assignment of numbers\
    \ is not the best idea and we are happy to provide you a endpoints which will\
    \ help out finding the next credit note number. <br><br> This GET request will\
    \ check what the next credit note number should be, so that a correct enumeration\
    \ is kept.<br> The concrete endpoint can be used for a multitude of enumerations,\
    \ but we will just concentrate on checking the next credit note number.<br> You\
    \ can change the <b>type</b> query string parameter to your needs, depending on\
    \ the credit note type for which you want the next number. <ul> <li><b>v1/SevSequence/Factory/getByType?objectType=CreditNote&type=CN<b></li>\
    \ </ul> \n# How to filter for certain credit notes\n Often you don't want to retrieve\
    \ all credit notes in a sevDesk account or one specific credit note of which you\
    \ know the ID, but rather a list of credit notes or a single credit note with\
    \ certain properties.<br> For this purpose we provide a bunch of filters that\
    \ you can attach to your GET query string for nearly all endpoints.<br> Here are\
    \ all filters applicable to a credit note query. <table> <tr> <th>Filter</th>\
    \ <th>Description</th> </tr> <tr> <td>creditNoteNumber={number}</td> <td>Only\
    \ retrieve all credit notes with number as a credit note number</td> </tr> <tr>\
    \ <td>onlyEnshrined=true</td> <td>Only retrieve all credit notes which are enshrined</td>\
    \ </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve\
    \ all credit notes with id as a tag.<br> You can specify multiple tags by adding\
    \ more array entries. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve\
    \ credit notes of a given status</td> </tr> <tr> <td>delinquent=true</td> <td>Only\
    \ retrieve delinquent (due) credit notes</td> </tr> <tr> <td>notdelinquent=true</td>\
    \ <td>Only retrieve credit notes which are not delinquent (due)</td> </tr> <tr>\
    \ <td>customerIntenalNote={note}</td> <td>Only retrieve all credit notes with\
    \ note as a customer internal note</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td>\
    \ <td>Only retrieve all credit notes with id as an origin</td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td>\
    \ <td>Only retrieve all credit notes with id as a cost centre.<br> </td> </tr>\
    \ <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve\
    \ all credit notes with id as a contact<br> </td> </tr> <tr> <td>startDate={timestamp}</td>\
    \ <td>Only retrieve all credit notes where credit note date is bigger than timestamp</td>\
    \ </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all credit notes\
    \ where credit note date is smaller than timestamp<br> If startDate and endDate\
    \ are both supplied, you will get all credit notes in the defined range </td>\
    \ </tr> <tr> <td>day={timestamp}</td> <td>Only retrieve all credit notes where\
    \ credit note date falls on the day of timestamp</td> </tr> <tr> <td>creditNoteType={type}</td>\
    \ <td>Only retrieve all credit notes with type as a credit note type</td> </tr>\
    \ <tr> <td>header={header}</td> <td>Only retrieve all credit notes with header\
    \ as a header</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve\
    \ all credit notes of which the header is like header</td> </tr> <tr> <td>paymentMethod[id]={id}&paymentMethod[objectName]=PaymentMethod</td>\
    \ <td>Only retrieve all credit notes with id as a payment method</td> </tr> <tr>\
    \ <td>headerOrNumber={headerOrNumber}</td> <td>Only retrieve all credit notes\
    \ of which the header or credit note number is like headerOrNumber</td> </tr>\
    \ <tr> <td>headerStartsWith={headerStart}</td> <td>Only retrieve all credit notes\
    \ of which the header starts with headerStart</td> </tr> <tr> <td>globalSearch={searchTerm}</td>\
    \ <td>Search for credit notes related to searchTerm</td> </tr> <tr> <td>orderByCreditNoteNumber={ASC/DESC}</td>\
    \ <td>Order all credit notes after credit note number in ASC/DESC order</td> </tr>\
    \ <tr> <td>partiallyPaid=true</td> <td> Retrieve all credit notes which are partially\
    \ paid </td> </tr> <tr> <td>orderByDueDate=true</td> <td>Retrieve all credit notes\
    \ ordered by their due date</td> </tr> <tr> <td>orderByDueTime=true</td> <td>Retrieve\
    \ all credit notes ordered by their due time</td> </tr> <tr> <td>orderByDebit=true</td>\
    \ <td>Retrieve all credit notes ordered by their debit</td> </tr> <tr> <td>creditNoteNumberGreater={number}</td>\
    \ <td>Only retrieve all credit notes of which the credit note number is bigger\
    \ than number</td> </tr> <tr> <td>creditNoteNumberNumberSmaller={number}</td>\
    \ <td>Only retrieve all credit notes of which the credit note number is smaller\
    \ than number</td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve\
    \ all credit notes of which the (net/gross) sum is larger or equal amount</td>\
    \ </tr> <tr> <td>endAmount={amount}</td> <td>Only retrieve all credit notes of\
    \ which the (net/gross) sum is smaller or equal amount</td> </tr> </table>"
  name: CreditNote
- description: "Just like normal invoices, credit notes naturally contain one or more\
    \ credit note positions sometimes also called items, lines or line items.<br>\
    \ These positions can but mustn't contain parts from the sevDesk inventory.<br>\
    \ In sevDesk the credit note object itself just provides the skeleton to which\
    \ positions can be added.<br> Without the positions, the credit note would have\
    \ a sum of zero and therefore no real meaning.<br> For this reason it is necessary\
    \ that we have a closer look at credit note positions in this section. \n# What\
    \ makes up a credit note position?\n A credit note position basically consist\
    \ of: <ul> <li>A part (optional but strongly recommended)</li> <li>The name of\
    \ the part or item</li> <li>A price for one unit of this part or item</li> <li>A\
    \ unit in which the part or item is measured</li> <li>A quantity showing how many\
    \ units of the part or item are in the position</li> <li>A tax rate</li> <li>An\
    \ credit note to which the position belongs</li> </ul> The total gross sum of\
    \ the credit note position is then calculated by the price being multiplied with\
    \ the quantity and the tax rate, which is previously converted to a point number.<br>\
    \ So for a price of 100, a quantity of two and a tax rate of 19 this would be:<br>\
    \ 100 * 2 * 1,19 = 238 <br><br> There is also the option of regarding the price\
    \ as the gross price.<br> This is regulated by an attribute of credit note which\
    \ is called showNet. More about it in the attribute list.<br> In this case, the\
    \ total sum will be the price you provided and the net price will be calculated\
    \ by our system.<br> Some of our customers prefer this method, however make sure\
    \ that you don't get prices mixed up. \n# Credit note position attributes\n Here\
    \ is the table of all attributes of credit note positions<br> Necessary attributes,\
    \ which must not be left out, are marked red.<br> Attributes which are strongly\
    \ recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th>\
    \ <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td>\
    \ <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span\
    \ style='color:red'>unity</span></td> <td> The unity in which one item is measured.\
    \ </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td>\
    \ <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>creditNote</span></td>\
    \ <td> The creditNote to which the position belongs. </td> <td>Nested object (CreditNote)</td>\
    \ </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td>\
    \ </tr> <tr> <td>positionNumber</td> <td> The number of the position if there\
    \ are multiple positions in a credit note.<br> Needs to start with zero and is\
    \ incremented for every new position.<br> If you want to order them differently,\
    \ you can change their position numbers to your needs. </td> <td>Integer</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name\
    \ of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>price</span></td>\
    \ <td> The price for one unit of the item in the position. </td> <td>Double</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>part</span></td> <td> You can\
    \ define a part from your sevDesk inventory here.<br> Please be aware, you will\
    \ still need to provide the name, price and everything else as this will not automatically\
    \ be generated. </td> <td>Nested object (Part)</td> </tr> </table> \n# How to\
    \ create/update an credit note position\n You can create a credit note position\
    \ when creating a credit note, for more information visit the credit note endpoint.<br>\
    \ If you want to update an credit note position for an existing credit note, then\
    \ you must use the same endpoint as when creating an credit note, then passing\
    \ in the <span style='color:red'><b>ID</b></span> along with the <span style='color:red'><b>objectName</b></span>\
    \ of the credit note and <span style='color:red'><b>mapAll</b></span>.<br> <ul>\
    \ <li><code>{\"creditNote\": { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"CreditNote\"\
    , \"<b>mapAll</b>\": true}, <br>\"creditNotePos\":[{...}]</code></li> </ul> In\
    \ order to update an credit note position in an existing credit note, the <span\
    \ style='color:red'><b>ID</b></span> and the <span style='color:red'><b>objectName</b></span>\
    \ of the credit note must be transferred and in the credit note position the <span\
    \ style='color:red'><b>ID</b></span> of the credit note position to be updated<br>\
    \ <ul> <li><code>\"creditNote\": { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"\
    CreditNote\", \"<b>mapAll</b>\": true},<br> \"creditNotePos\":[{\"<b>id</b>\"\
    : 0, ...}]</code></li> </ul>"
  name: CreditNotePos
- description: "\n# Purpose of contacts in sevDesk\n Every time one of our sevDesk\
    \ customers sells / buys an item or provides a service there is a end customer\
    \ involved to which it is sold / from which it is bought or to which the service\
    \ is provided.<br> These end-customers need to be tracked in sevDesk as our customers\
    \ will need to link them to the invoices, orders, receipts and all other documents\
    \ relevant for their bookkeeping which involve the end customer. \n# Types of\
    \ contacts\n As our customers can either deal with individual persons or with\
    \ whole organisations, we need to differentiate between these two types.<br> Therefore,\
    \ every contact in sevDesk is either a <b>person</b> or a <b>organisation</b>.<br>\
    \ At the moment, both share the same set of attributes but designating values\
    \ to some might not make sense for both types.<br> In the next section, we will\
    \ distinguish between the two and this will become obvious.<br> Furthermore, naturally,\
    \ individuals can be part of organisations but organisations can not be part of\
    \ individuals. Also more in the next section.<br> <br> <b>How do I know to which\
    \ type a contact belongs?</b><br> <br> It is very important to note, that we currently\
    \ don't have any attribute which shows to which type a contact belongs.<br> Instead,\
    \ we separate them by the attributes <b>name</b>, <b>surename</b> and <b>familyname</b>.<br>\
    \ If you designate values to the attribute <b>surename</b> OR <b>familyname</b>\
    \ the contact will be regarded as a individual person.<br> If you designate a\
    \ value to <b>name</b> it will be regarded as an organisation.<br><br> <b>Contact\
    \ Categories</b><br><br> Additionally to the two main types of contacts, every\
    \ contact belongs to one of the following categories: <ul> <li>Supplier (ID: 2)</li>\
    \ <li>Customer (ID: 3)</li> <li>Partner (ID: 4)</li> <li>Prospect Customer (ID:\
    \ 28)</li> </ul> \n# Attributes of a contact\n Here is a table of all attributes\
    \ of a contact.<br> Necessary attributes, which must not be left out, are marked\
    \ red.<br> Attributes which are strongly recommended for valid bookkeeping are\
    \ marked orange. <table> <tr> <th>Attribute</th> <th>Contact Type</th> <th>Description</th>\
    \ <th>Attribute Type</th> </tr> <tr> <td><span style='color:darkorange'>name</span></td>\
    \ <td>Organisations</td> <td> The name of an organisation </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>surename</span></td> <td>Individuals</td>\
    \ <td> The first name of an individual (yes, we know...) </td> <td>String</td>\
    \ </tr> <tr> <td><span style='color:darkorange'>familyname</span></td> <td>Individuals</td>\
    \ <td> The last name of an individual </td> <td>String</td> </tr> <tr> <td>name2</td>\
    \ <td>Individuals</td> <td> The middle name (or name-suffix) of an individual\
    \ </td> <td>String</td> </tr> <tr> <td><span style='color:red'>category</span></td>\
    \ <td>Organisations, Individuals</td> <td> The category of the contact<br> </td>\
    \ <td>Nested object (Category)</td> </tr> <tr> <td>defaultCashbackTime</td> <td>Organisations,\
    \ Individuals</td> <td> Time frame in which a cashback is granted to the customer\
    \ if he pays an invoice </td> <td>Integer</td> </tr> <tr> <td>defaultCashbackPercent</td>\
    \ <td>Organisations, Individuals</td> <td> Percentage of which the price of an\
    \ invoice is reduced if payed in above time frame </td> <td>Double</td> </tr>\
    \ <tr> <td><span style='color:darkorange'>taxNumber</span></td> <td>Organisations,\
    \ Individuals</td> <td> Tax number of the contact. </td> <td>String</td> </tr>\
    \ <tr> <td><span style='color:darkorange'>excemptVat</span></td> <td>Organisations,\
    \ Individuals</td> <td> Defines if the contact is free of vat </td> <td>Boolean</td>\
    \ </tr> <tr> <td>taxType</td> <td>Organisations, Individuals</td> <td> Defines\
    \ if the vat-regulation for the contact<br> Can be: <ul> <li>default</li> <li>eu</li>\
    \ <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr>\
    \ <tr> <td>taxSet</td> <td>Organisations, Individuals</td> <td> You can enter\
    \ the ID of your own vat-regulation here if you provided <b>custom</b> for taxType\
    \ </td> <td>Integer</td> </tr> <tr> <td>defaultTimeToPay</td> <td>Organisations,\
    \ Individuals</td> <td> The default time this end customer has to pay invoices\
    \ </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>bankNumber</span></td>\
    \ <td>Organisations, Individuals</td> <td> The bank number of the contact </td>\
    \ <td>Integer</td> </tr> <tr> <td>birthday</td> <td>Individuals</td> <td> The\
    \ birthday </td> <td>Unix-Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>vatNumber</span></td>\
    \ <td>Organisations, Individuals</td> <td> The vat number </td> <td>String</td>\
    \ </tr> <tr> <td>defaultDiscountAmount</td> <td>Organisations, Individuals</td>\
    \ <td> A default discount amount this contact gets </td> <td>Double</td> </tr>\
    \ <tr> <td>defaultDiscountPercentage</td> <td>Organisations, Individuals</td>\
    \ <td> Define if the value in defaultDiscountAmount is regarded as a percentage.\
    \ </td> <td>Boolean</td> </tr> <tr> <td>gender</td> <td>Individuals</td> <td>\
    \ Gender (m,w, or your own definition) </td> <td>String</td> </tr> <tr> <td>academicTitle</td>\
    \ <td>Individuals</td> <td> Academic title of the contact </td> <td>String</td>\
    \ </tr> <tr> <td>description</td> <td>Organisations, Individuals</td> <td> A description\
    \ for the contact </td> <td>String (can contain some html)</td> </tr> <tr> <td>titel</td>\
    \ <td>Individuals</td> <td> Position an individual holds in an organisation </td>\
    \ <td>String</td> </tr> <tr> <td><span style='color:darkorange'>parent</span></td>\
    \ <td>Individuals</td> <td> The organisation to which this individual belongs\
    \ </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>customerNumber</span></td>\
    \ <td>Organisations, Individuals</td> <td> The customer number of the contact.\
    \ </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>bankAccount</span></td>\
    \ <td>Organisations, Individuals</td> <td> The bank account number </td> <td>String</td>\
    \ </tr> </table> \n# The customer number\n The customer number is not an attribute\
    \ that must be supplied when creating a contact, however for most, if not all\
    \ of our customers, a correct enumeration is the key to structured bookkeeping,\
    \ which is why duplicate entries must be avoided.<br> For this reason, most of\
    \ the time a manual assignment of numbers is not the best idea and we are happy\
    \ to provide you two contact endpoints which will help out.<br><br> The first\
    \ GET request you can send will check if a customer number is still available.<br>\
    \ All you need to provide in the query string is the customer number which should\
    \ be checked. <ul> <li>ht<span>tps://my.sevdesk.de/api/v1/Contact/Mapper/checkCustomerNumberAvailability?customerNumber=KD-1000</span></li>\
    \ </ul> The second GET request you can send will check what the next customer\
    \ number should be, so that a correct enumeration is kept.<br> This time, you\
    \ only need to send the request to the endpoint. <ul> <li>ht<span>tps://my.sevdesk.de/api/v1/Contact/Factory/getNextCustomerNumber</span></li>\
    \ </ul> \n# How to filter for certain contacts\n Often you don't want to retrieve\
    \ all contacts in a sevDesk account or one specific contact of which you know\
    \ the ID, but rather a list of contacts or a single contact with certain properties.<br>\
    \ For this purpose we provide a bunch of filters that you can attach to your GET\
    \ query string for nearly all endpoints.<br> Here are all filters applicable to\
    \ a contact query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr>\
    \ <td>depth=1</td> <td> Retrieve organisations AND persons.<br> This attribute\
    \ is not active as default, so if you don't specify it as true, you will only\
    \ get organisations. </td> </tr> <tr> <td>category[id]={<span style='color:red'>id</span>}&category[objectName]=Category</td>\
    \ <td>Only retrieve all contacts with <span style='color:red'>id</span> as a category</td>\
    \ </tr> <tr> <td>city={<span style='color:red'>cityName</span>}</td> <td>Only\
    \ retrieve all contacts with <span style='color:red'>cityName</span> as a city</td>\
    \ </tr> <tr> <td>tags[x][id]={<span style='color:red'>id</span>}&tags[x][objectName]=Tag</td>\
    \ <td>Only retrieve all contacts with <span style='color:red'>id</span> as a tag.<br>\
    \ You can specify multiple tags by adding more array entries. </td> </tr> <tr>\
    \ <td>customerNumber={<span style='color:red'>number</span>}</td> <td>Only retrieve\
    \ all contacts with <span style='color:red'>number</span> as a customer number</td>\
    \ </tr> <tr> <td>parent[id]={<span style='color:red'>id</span>}&parent[objectName]=Contact</td>\
    \ <td>Only retrieve all contacts with <span style='color:red'>id</span> as a parent\
    \ organisation</td> </tr> <tr> <td>name={<span style='color:red'>name</span>}</td>\
    \ <td>Only retrieve all contacts with <span style='color:red'>name</span> as a\
    \ name, surename or familyname</td> </tr> <tr> <td>zip={<span style='color:red'>zipCode</span>}</td>\
    \ <td>Only retrieve all contacts with <span style='color:red'>zipCode</span> as\
    \ a zip</td> </tr> <tr> <td>country[id]={<span style='color:red'>id</span>}&country[objectName]=StaticCountry</td>\
    \ <td>Only retrieve all contacts with <span style='color:red'>id</span> as a country</td>\
    \ </tr> <tr> <td>createBefore={<span style='color:red'>timestamp</span>}</td>\
    \ <td>Only retrieve all contacts created before <span style='color:red'>timestamp</span></td>\
    \ </tr> <tr> <td>createAfter={<span style='color:red'>timestamp</span>}</td> <td>Only\
    \ retrieve all contacts created after <span style='color:red'>timestamp</span></td>\
    \ </tr> <tr> <td>updateBefore={<span style='color:red'>timestamp</span>}</td>\
    \ <td>Only retrieve all contacts updated last before <span style='color:red'>timestamp</span></td>\
    \ </tr> <tr> <td>updateAfter={<span style='color:red'>timestamp</span>}</td> <td>Only\
    \ retrieve all contacts updated last after <span style='color:red'>timestamp</span></td>\
    \ </tr> <tr> <td>orderByCustomerNumber={<span style='color:red'>ASC/DESC</span>}</td>\
    \ <td>Order all contacts after customer number in <span style='color:red'>ASC/DESC</span>\
    \ order</td> </tr> </table>"
  name: Contact
- description: "As one contact can have multiple addresses, they can not be part of\
    \ the contact attributes.<br> Instead, they have their own endpoint which makes\
    \ it possible to create as many addresses for one contact as needed.<br> For creating\
    \ contact addresses have a look at our Swagger specification. Everything should\
    \ be pretty straight forward."
  name: ContactAddress
- description: "A communication way is a medium with which a contact can be reached\
    \ out to.<br> This can be: <ul> <li>A phone number (landline or mobile)</li> <li>An\
    \ email</li> <li>A website</li> </ul> They can not be a part of the contact attributes\
    \ for the same reason as addresses.<br> Each communication way also is of one\
    \ of the following types, called communication way keys, which are also their\
    \ own resource: <ul> <li>Private (ID: 1)</li> <li>Work (ID: 2)</li> <li>Fax (ID:\
    \ 3)</li> <li>Mobile (ID: 4)</li> <li>Empty (ID: 5)</li> <li>Autobox (ID: 6)</li>\
    \ <li>Newsletter (ID: 7)</li> <li>Invoicing (ID: 8)</li> </ul>"
  name: CommunicationWay
- description: "A accounting contact object belongs to one specific contact object\
    \ and holds the accounting information for this contact, which is mainly the vendor\
    \ / receivable accounts number.<br> This information is very important to guarantee\
    \ valid bookkeeping reports.<br> As this endpoint is also pretty easy to understand,\
    \ we won't cover it here, but we really recommend you having a look at the POST\
    \ to create accounting contacts and at the request which checks if a number is\
    \ still available."
  name: AccountingContact
- description: "\n# Purpose of Layout in sevDesk\n Each invoice, order and credit\
    \ note has a generated document.<br> In this chapter we will show you how the\
    \ layout queries and use them to change the look of your document<br> Please keep\
    \ in mind that every invoice, order and credit note must be rendered beforehand\
    \ so that a document is also available. \n# Attributes of a Layout\n In the layouts\
    \ there are only two different attributes, <b>key</b> and <b>value</b>. For key\
    \ you can pass one of the following values: <ul> <li>template</li> <li>letterpaper</li>\
    \ <li>language</li> <li>payPal</li> </ul> The value depends on which key you have\
    \ chosen. In the following the standard values ​​of the respective keys.<br><br>\
    \ <b>template</b> <table> <tr> <td>Premium 1</td> <td>5bedce4eeebf6f56c5f1d893</td>\
    \ </tr> <tr> <td>Premium 2</td> <td>5bedce4eeebf6f56c5f1d898</td> </tr> <tr> <td>Premium\
    \ 3</td> <td>5bedce4eeebf6f56c5f1d89d</td> </tr> <tr> <td>Premium 4</td> <td>61fbb0058317af2b8e77d106</td>\
    \ </tr> <tr> <td>Premium 5</td> <td>61fbb0058317af2b8e77d10e</td> </tr> <tr> <td>Premium\
    \ 6</td> <td>61fbb0058317af2b8e77d10a</td> </tr> <tr> <td>Simple</td> <td>573f03ad6bd2d516c63070f1</td>\
    \ </tr> <tr> <td>Black</td> <td>573ef2706bd2d50366786471</td> </tr> <tr> <td>Blue</td>\
    \ <td>573f25c56bd2d51c2100cce1</td> </tr> <tr> <td>without contact person and\
    \ customer number</td> <td>573ed07e6bd2d547d21e89e1</td> </tr> <tr> <td>Swiss</td>\
    \ <td>573efc416bd2d5065546eb11</td> </tr> <tr> <td>Standard</td> <td>57986aee6bd2d53306068da1</td>\
    \ </tr> </table><br> <b>letterpaper</b> <table> <tr> <td>Black</td> <td>57d7ff34f23ada297d265f21</td>\
    \ </tr> </table><br> <b>language</b> <table> <tr> <td>German</td> <td>de_DE</td>\
    \ </tr> <tr> <td>German(Autria)</td> <td>de_AT</td> </tr> <tr> <td>German(Swiss)</td>\
    \ <td>de_CH</td> </tr> <tr> <td>English</td> <td>en_US</td> </tr> <tr> <td>Spanish</td>\
    \ <td>es_ES</td> </tr> <tr> <td>French</td> <td>fr_FR</td> </tr> <tr> <td>Italian</td>\
    \ <td>id_IT</td> </tr> <tr> <td>Greek</td> <td>el_GR</td> </tr> </table><br> <b>payPal</b>\
    \ <table> <tr> <td>Show PayPal icon</td> <td>A</td> </tr> <tr> <td>Show link</td>\
    \ <td>B</td> </tr> <tr> <td>Disable Paypal</td> <td>C</td> </tr> <tr> <td>PayPal\
    \ as Strig</td> <td>D</td> </tr> </table>"
  name: Layout
- description: "\n# Purpose of Tag in sevDesk\n Tags are a tool to create groupings\
    \ that can be attached to any invoice, order, voucher and credit note.<br> The\
    \ filter function can also be used with the help of the tags. It must be mentioned\
    \ here that each invoice, order, receipt and credit note can have more than one\
    \ tag and the tag must therefore be passed as an array.<br> An example of how\
    \ to use a tag in invoices: <ul> <li><code>ht<span>tps://my.sevdesk.de/api/v1/Invoice?tags[0][id]={tagId}&tags[0][objectName]=Tag</span></code></li>\
    \ </ul> \n# Tag relation\n With the tag relations you can display all invoices,\
    \ receipts, orders and credit notes that have a tag<br> The tag relation does\
    \ not have to be created separately, as this is automatically created when a tag\
    \ is created.<br> <br>"
  name: Tag
- description: "The contact fields are placeholders that can be titled and filled\
    \ per contact. The contact fields can then be used in invoices, credit notes and\
    \ emails."
  name: ContactField
paths:
  /Voucher/{voucherId}/bookAmount:
    put:
      description: "Booking the voucher with a transaction is probably the most important\
        \ part in the bookkeeping process.<br> There are several ways on correctly\
        \ booking a voucher, all by using the same endpoint.<br> Conveniently, the\
        \ booking process is exactly the same as the process for invoices.<br> For\
        \ this reason, you can have a look at it <a href='https://api.sevdesk.de/#section/How-to-book-an-invoice'>here</a>\
        \ and all you need to to is to change \"Invoice\" into \"Voucher\" in the\
        \ URL."
      operationId: bookVoucher
      parameters:
      - description: ID of voucher to book
        explode: false
        in: path
        name: voucherId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookVoucher_request'
        description: Booking data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookVoucher_200_response'
          description: Successful operation - Returns changed voucher log entry
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Book a voucher
      tags:
      - Voucher
  /Invoice/{invoiceId}/getPdf:
    get:
      description: Retrieves the pdf document of an invoice with additional metadata.
      operationId: invoiceGetPdf
      parameters:
      - description: ID of invoice from which you want the pdf
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      - description: If u want to download the pdf of the invoice.
        example: true
        explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - description: Defines if u want to send the invoice.
        example: true
        explode: true
        in: query
        name: preventSendBy
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceGetPdf_200_response'
          description: A pdf file
        "400":
          description: Bad request. Invoice was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve pdf document of an invoice
      tags:
      - Invoice
  /AccountingContact/{accountingContactId}:
    delete:
      operationId: deleteAccountingContact
      parameters:
      - description: Id of accounting contact resource to delete
        explode: false
        in: path
        name: accountingContactId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - accounting contact deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Deletes an accounting contact
      tags:
      - AccountingContact
    get:
      description: Returns a single accounting contac
      operationId: getAccountingContactById
      parameters:
      - description: ID of accounting contact to return
        explode: false
        in: path
        name: accountingContactId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountingContactById_200_response'
          description: Successful operation
        "400":
          description: Bad request. Accounting contact was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find accounting contact by ID
      tags:
      - AccountingContact
    put:
      description: Update an accounting contact
      operationId: updateAccountingContact
      parameters:
      - description: ID of accounting contact to update
        explode: false
        in: path
        name: accountingContactId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_AccountingContactUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountingContactById_200_response'
          description: Successful operation - Returns changed accounting contact resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an existing accounting contact
      tags:
      - AccountingContact
  /CheckAccountTransaction/{checkAccountTransactionId}:
    delete:
      operationId: deleteCheckAccountTransaction
      parameters:
      - description: Id of check account transaction to delete
        explode: false
        in: path
        name: checkAccountTransactionId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - check account transaction deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server error
      summary: Deletes a check account transaction
      tags:
      - CheckAccountTransaction
    get:
      deprecated: false
      description: Retrieve an existing check account transaction
      operationId: getCheckAccountTransactionById
      parameters:
      - description: ID of check account transaction
        explode: false
        in: path
        name: checkAccountTransactionId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountTransactionById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Find check account transaction by ID
      tags:
      - CheckAccountTransaction
    put:
      description: Update a check account transaction
      operationId: updateCheckAccountTransaction
      parameters:
      - description: ID of check account to update transaction
        explode: false
        in: path
        name: checkAccountTransactionId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccountTransactionUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountTransactionById_200_response'
          description: Successful operation - Returns changed check account resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Update an existing check account transaction
      tags:
      - CheckAccountTransaction
  /creditNote/{creditNoteId}/sendByWithRender:
    get:
      description: "Sending a credit note to end-customers is an important part of\
        \ the bookkeeping process.<br> Depending on the way you want to send the credit\
        \ note, you need to use different endpoints.<br> Let's start with just printing\
        \ out the credit note, meaning we only need to render the pdf."
      operationId: sendCreditNoteByPrinting
      parameters:
      - description: ID of creditNote to return
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      - description: the type you want to print.
        example: PRN
        explode: true
        in: query
        name: sendType
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendCreditNoteByPrinting_200_response'
          description: Successful operation
        "400":
          description: Bad request.
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Send credit note by printing
      tags:
      - CreditNote
  /ContactCustomFieldSetting:
    get:
      description: Retrieve all contact field settings
      operationId: getContactFieldSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldSettings_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve contact field settings
      tags:
      - ContactField
    post:
      description: Create contact field setting
      operationId: createContactFieldSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomFieldSetting'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldSettings_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create contact field setting
      tags:
      - ContactField
  /Export/invoiceCsv:
    get:
      description: Export all invoices as csv
      operationId: exportInvoice
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportInvoice_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export invoice
      tags:
      - Export
  /Invoice/{invoiceId}/sendViaEmail:
    post:
      description: "This endpoint sends the specified invoice to a customer via email.<br>\r\
        \n    This will automatically mark the invoice as sent.<br>\r\n    Please\
        \ note, that in production an invoice is not allowed to be changed after this\
        \ happened!"
      operationId: sendInvoiceViaEMail
      parameters:
      - description: ID of invoice to be sent via email
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInvoiceViaEMail_request'
        description: Mail data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendInvoiceViaEMail_201_response'
          description: Created - Returns created mail object
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Send invoice via email
      tags:
      - Invoice
  /Export/voucherListCsv:
    get:
      description: Export all vouchers as zip
      operationId: exportVoucher
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportVoucher_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export voucher as zip
      tags:
      - Export
  /OrderPos:
    get:
      deprecated: false
      description: Retrieve all order positions depending on the filters defined in
        the query.
      operationId: getOrderPositions
      parameters:
      - description: "Retrieve all order positions belonging to this order. Must be\
          \ provided with voucher[objectName]"
        explode: false
        in: query
        name: "order[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if order[id] was provided. 'Order' should be used\
          \ as value."
        explode: false
        in: query
        name: "order[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrderPositions_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve order positions
      tags:
      - OrderPos
  /Invoice/{invoiceId}/bookAmount:
    put:
      description: "Booking the invoice with a transaction is probably the most important\
        \ part in the bookkeeping process.<br> There are several ways on correctly\
        \ booking an invoice, all by using the same endpoint.<br> for more information\
        \ look <a href='https://api.sevdesk.de/#section/How-to-book-an-invoice'>here</a>."
      operationId: bookInvoice
      parameters:
      - description: ID of invoice to book
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookInvoice_request'
        description: Booking data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookInvoice_200_response'
          description: Successful operation - Returns changed invoice log entry
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Book an invoice
      tags:
      - Invoice
  /Order/{orderId}/getDiscounts:
    get:
      description: Returns all discounts of an order
      operationId: getDiscounts
      parameters:
      - description: ID of order to return the positions
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      - description: limits the number of entries returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: set the index where the returned entries start
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: "Get some additional information. Embed can handle multiple values,\
          \ they must be separated by comma."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDiscounts_200_response'
          description: Successful operation
        "400":
          description: Bad request. order was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find order discounts
      tags:
      - Order
  /Order/Factory/createPackingListFromOrder:
    post:
      description: Create packing list from order
      operationId: createPackingListFromOrder
      parameters:
      - description: the id of the order
        explode: false
        in: query
        name: "order[id]"
        required: true
        schema:
          type: integer
        style: form
      - description: "Model name, which is 'Order'"
        example: Order
        explode: false
        in: query
        name: "order[objectName]"
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CreatePackingListFromOrder'
        description: Create packing list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPackingListFromOrder_200_response'
          description: Successful operation
        "400":
          description: Bad Request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create packing list from order
      tags:
      - Order
  /Invoice/{invoiceId}/getIsPartiallyPaid:
    get:
      description: "Returns 'true' if the given invoice is partially paid - 'false'\
        \ if it is not.\r\n    Invoices which are completely paid are regarded as\
        \ not partially paid."
      operationId: getIsInvoicePartiallyPaid
      parameters:
      - description: ID of invoice to return
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIsInvoicePartiallyPaid_200_response'
          description: Successful operation
        "400":
          description: Bad Request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Check if an invoice is already partially paid
      tags:
      - Invoice
  /CreditNote/{creditNoteId}/getPdf:
    get:
      description: Retrieves the pdf document of a credit note with additional metadata.
      operationId: creditNoteGetPdf
      parameters:
      - description: ID of credit note from which you want the pdf
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      - description: If u want to download the pdf of the credit note.
        example: true
        explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - description: Defines if u want to send the credit note.
        example: true
        explode: true
        in: query
        name: preventSendBy
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceGetPdf_200_response'
          description: A pdf file
        "400":
          description: Bad request. Invoice was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve pdf document of a credit note
      tags:
      - CreditNote
  /Invoice/{invoiceId}:
    get:
      description: Returns a single invoice
      operationId: getInvoiceById
      parameters:
      - description: ID of invoice to return
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoiceById_200_response'
          description: Successful operation
        "400":
          description: Bad request. Invoice was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find invoice by ID
      tags:
      - Invoice
  /Voucher/Factory/saveVoucher:
    post:
      description: "Generally there are two ways to create vouchers.<br> You can create\
        \ vouchers by either POSTing to the <b>Voucher</b> and <b>VoucherPos</b> endpoints\
        \ with the necessary parameters (see attribute lists) or you can use a special\
        \ endpoint which bundles the requests in one.<br> <br> The list of parameters\
        \ starts with the voucher array.<br> This array contains all required attributes\
        \ for a complete voucher.<br> Most of the attributes are covered in the voucher\
        \ attribute list, there are only two parameters standing out, namely <b>mapAll</b>\
        \ and <b>objectName</b>.<br> These are just needed for our system and you\
        \ always need to provide them.<br><br> The list of parameters then continues\
        \ with the voucher position array.<br> With this array you have the possibility\
        \ to add multiple positions at once.<br> In the example it only contains one\
        \ position, again together with the parameters <b>mapAll</b> and <b>objectName</b>,\
        \ however, you can add more voucher positions by extending the array.<br>\
        \ So if you wanted to add another position, you would add the same list of\
        \ parameters with an incrementedcomponents/schemas/saveVoucher\" array index\
        \ of \\\"1\\\" instead of \\\"0\\\".<br><br> The list ends with the two parameters\
        \ voucherPosDelete and filename.<br> We will shortly explain what they can\
        \ do.<br> With voucherPosDelete you have to option to delete voucher positions\
        \ as this request can also be used to update vouchers.<br> With filename you\
        \ can attach a file to the voucher.<br> For most of our customers this is\
        \ a really important step, as they need to digitize their receipts.<br> Finally,\
        \ after covering all parameters, they only important information left, is\
        \ that the order of the last two attributes always needs to be kept."
      operationId: createVoucherByFactory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveVoucher'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the voucher and voucher position\
          \ model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveVoucherResponse'
          description: Created - Returns created voucher
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new voucher
      tags:
      - Voucher
  /ContactAddress/{contactAddressId}:
    delete:
      operationId: deleteContactAddress
      parameters:
      - description: Id of contact address resource to delete
        explode: false
        in: path
        name: contactAddressId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - contact address deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Deletes a contact address
      tags:
      - ContactAddress
    get:
      description: Returns a single contact address
      operationId: contactAddressId
      parameters:
      - description: ID of contact address to return
        explode: false
        in: path
        name: contactAddressId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactAddressId_200_response'
          description: Successful operation
        "400":
          description: Bad request. Contact address was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find contact address by ID
      tags:
      - ContactAddress
    put:
      deprecated: false
      description: update a existing contact address.
      operationId: updateContactAddress
      parameters:
      - description: ID of contact address to return
        explode: false
        in: path
        name: contactAddressId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactAddressUpdate'
        description: Creation data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactAddressId_200_response'
          description: Created - Returns created contact address
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: update a existing contact address
      tags:
      - ContactAddress
  /Order/{orderId}:
    delete:
      operationId: deleteOrder
      parameters:
      - description: Id of order resource to delete
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - Order deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict - f.e occurs if the order is not a draft
        "500":
          description: Server Error
      summary: Deletes an order
      tags:
      - Order
    get:
      description: Returns a single order
      operationId: getOrderById
      parameters:
      - description: ID of order to return
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPackingListFromOrder_200_response'
          description: Successful operation
        "400":
          description: Bad request. Order was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find order by ID
      tags:
      - Order
    put:
      description: Update an order
      operationId: updateOrder
      parameters:
      - description: ID of order to update
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_OrderUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPackingListFromOrder_200_response'
          description: Successful operation - Returns changed order resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an existing order
      tags:
      - Order
  /Invoice:
    get:
      deprecated: false
      description: "There are a multitude of parameter which can be used to filter.\
        \ A few of them are attached but\r\n     for a complete list please check\
        \ out <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-invoices'>this</a>\
        \ list"
      operationId: getInvoices
      parameters:
      - description: Status of the invoices
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - 100
          - 200
          - 1000
          type: number
        style: form
      - description: Retrieve all invoices with this invoice number
        explode: true
        in: query
        name: invoiceNumber
        required: false
        schema:
          type: string
        style: form
      - description: Retrieve all invoices with a date equal or higher
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: integer
        style: form
      - description: Retrieve all invoices with a date equal or lower
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: integer
        style: form
      - description: "Retrieve all invoices with this contact. Must be provided with\
          \ contact[objectName]"
        explode: true
        in: query
        name: "contact[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if contact[id] was provided. 'Contact' should\
          \ be used as value."
        explode: true
        in: query
        name: "contact[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoiceById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve invoices
      tags:
      - Invoice
  /ContactCustomField/{contactCustomFieldId}:
    delete:
      operationId: deleteContactCustomFieldId
      parameters:
      - description: Id of contact field
        explode: false
        in: path
        name: contactCustomFieldId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: delete a contact field
      tags:
      - ContactField
    get:
      description: Retrieve all contact fields
      operationId: getContactFieldsById
      parameters:
      - description: id of the contact field
        explode: false
        in: path
        name: contactCustomFieldId
        required: true
        schema:
          type: number
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldsById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve contact fields
      tags:
      - ContactField
    put:
      description: Update a contact field
      operationId: updateContactfield
      parameters:
      - description: id of the contact field
        explode: false
        in: path
        name: contactCustomFieldId
        required: true
        schema:
          type: number
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomFieldUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldsById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update a contact field
      tags:
      - ContactField
  /DocServer/getLetterpapersWithThumb:
    get:
      description: Retrieve all letterpapers with Thumb
      operationId: getLetterpapersWithThumb
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLetterpapersWithThumb_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve letterpapers
      tags:
      - Layout
  /OrderPos/{orderPosId}:
    delete:
      operationId: deleteOrderPos
      parameters:
      - description: Id of order position resource to delete
        explode: false
        in: path
        name: orderPosId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - order position deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict - f.e occurs if the order is not a draft
        "500":
          description: Server Error
      summary: Deletes an order Position
      tags:
      - OrderPos
    get:
      description: Returns a single order position
      operationId: getOrderPositionById
      parameters:
      - description: ID of order position to return
        explode: false
        in: path
        name: orderPosId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrderPositions_200_response'
          description: Successful operation
        "400":
          description: Bad request. Order position was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find order position by ID
      tags:
      - OrderPos
    put:
      description: Update an order position
      operationId: updateOrderPosition
      parameters:
      - description: ID of order position to update
        explode: false
        in: path
        name: orderPosId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_OrderPosUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrderPositions_200_response'
          description: Successful operation - Returns changed order position resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an existing order position
      tags:
      - OrderPos
  /Report/invoicelist:
    get:
      description: Export invoice list
      operationId: reportInvoice
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/reportInvoice_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export invoice list
      tags:
      - Report
  /Order:
    get:
      deprecated: false
      description: "There are a multitude of parameter which can be used to filter.\
        \ A few of them are attached but\r\n    for a complete list please check out\
        \ <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-orders'>this</a>\
        \ list"
      operationId: getOrders
      parameters:
      - description: Status of the order
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - 100
          - 200
          - 300
          - 500
          - 750
          - 1000
          type: integer
        style: form
      - description: Retrieve all orders with this order number
        explode: true
        in: query
        name: orderNumber
        required: false
        schema:
          type: string
        style: form
      - description: Retrieve all orders with a date equal or higher
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: integer
        style: form
      - description: Retrieve all orders with a date equal or lower
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: integer
        style: form
      - description: "Retrieve all orders with this contact. Must be provided with\
          \ contact[objectName]"
        explode: false
        in: query
        name: "contact[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if contact[id] was provided. 'Contact' should\
          \ be used as value."
        explode: false
        in: query
        name: "contact[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPackingListFromOrder_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve orders
      tags:
      - Order
  /Report/orderlist:
    get:
      description: Export order list
      operationId: reportOrder
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/reportOrder_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export order list
      tags:
      - Report
  /CommunicationWayKey:
    get:
      deprecated: false
      description: Returns all communication way keys.
      operationId: getCommunicationWayKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCommunicationWayKeys_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve communication way keys
      tags:
      - CommunicationWay
  /Order/{orderId}/changeParameter:
    put:
      description: Update an existing order template
      operationId: updateOrderTemplate
      parameters:
      - description: ID of order to update
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ChangeLayout'
        description: Change Layout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateOrderTemplate_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an order template
      tags:
      - Layout
  /Contact/{contactId}/getTabsItemCount:
    get:
      description: "Get number of all invoices, orders, etc. of a specified contact"
      operationId: getContactTabsItemCountById
      parameters:
      - description: ID of contact to return
        explode: false
        in: path
        name: contactId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactTabsItemCountById_200_response'
          description: Successful operation
        "400":
          description: Bad request.
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Get number of all items
      tags:
      - Contact
  /Order/{orderId}/getPositions:
    get:
      description: Returns all positions of an order
      operationId: getOrderPositionsById
      parameters:
      - description: ID of order to return the positions
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      - description: limits the number of entries returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: set the index where the returned entries start
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: "Get some additional information. Embed can handle multiple values,\
          \ they must be separated by comma."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrderPositions_200_response'
          description: Successful operation
        "400":
          description: Bad request. order was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find order positions
      tags:
      - Order
  /ContactCustomField:
    get:
      description: Retrieve all contact fields
      operationId: getContactFields
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldsById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve contact fields
      tags:
      - ContactField
    post:
      description: Create contact field
      operationId: createContactField
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomField'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldsById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create contact field
      tags:
      - ContactField
  /Tag/{tagId}:
    delete:
      operationId: deleteTag
      parameters:
      - description: Id of tag to delete
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - tag deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Deletes a tag
      tags:
      - Tag
    get:
      description: Returns a single tag
      operationId: getTagById
      parameters:
      - description: ID of tag to return
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find tag by ID
      tags:
      - Tag
    put:
      description: Update an existing tag
      operationId: updateTag
      parameters:
      - description: ID of tag you want to update
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTag_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update tag
      tags:
      - Tag
  /Voucher/{voucherId}:
    get:
      description: Returns a single voucher
      operationId: getVoucherById
      parameters:
      - description: ID of voucher to return
        explode: false
        in: path
        name: voucherId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVoucherById_200_response'
          description: Successful operation
        "400":
          description: Bad request. Voucher was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find voucher by ID
      tags:
      - Voucher
    put:
      description: Update a voucher
      operationId: updateVoucher
      parameters:
      - description: ID of voucher to update
        explode: false
        in: path
        name: voucherId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_VoucherUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVoucherById_200_response'
          description: Successful operation - Returns changed voucher resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an existing voucher
      tags:
      - Voucher
  /Export/transactionsCsv:
    get:
      description: Export all transactions as csv
      operationId: exportTransactions
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportTransactions_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export transaction
      tags:
      - Export
  /Invoice/Factory/saveInvoice:
    post:
      description: "This endpoint offers you the following functionality.\r\n    \
        \ <ul>\r\n        <li>Create invoices together with positions and discounts</li>\r\
        \n        <li>Delete positions while adding new ones</li>\r\n        <li>Delete\
        \ or add discounts, or both at the same time</li>\r\n        <li>Automatically\
        \ fill the address of the supplied contact into the invoice address</li>\r\
        \n     </ul>\r\n     To make your own request sample slimmer, you can omit\
        \ all parameters which are not required and nullable.\r\n     However, for\
        \ a valid and logical bookkeeping document, you will also need some of them\
        \ to ensure that all the necessary data is in the invoice.<br><br> The list\
        \ of parameters starts with the invoice array.<br> This array contains all\
        \ required attributes for a complete invoice.<br> Most of the attributes are\
        \ covered in the invoice attribute list, there are only two parameters standing\
        \ out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed\
        \ for our system and you always need to provide them.<br><br> The list of\
        \ parameters then continues with the invoice position array.<br> With this\
        \ array you have the possibility to add multiple positions at once.<br> In\
        \ the example it only contains one position, again together with the parameters\
        \ <b>mapAll</b> and <b>objectName</b>, however, you can add more invoice positions\
        \ by extending the array.<br> So if you wanted to add another position, you\
        \ would add the same list of parameters with an incremented array index of\
        \ \"1\" instead of \"0\".<br><br> The list ends with the four parameters invoicePosDelete,\
        \ discountSave, discountDelete and takeDefaultAddress.<br> They only play\
        \ a minor role if you only want to create an invoice but we will shortly explain\
        \ what they can do.<br> With invoicePosDelete you have to option to delete\
        \ invoice positions as this request can also be used to update invoices.<br>\
        \ With discountSave you can add discounts to your invoice.<br> With discountDelete\
        \ you can delete discounts from your invoice.<br> With takeDefaultAddress\
        \ you can specify that the first address of the contact you are using for\
        \ the invoice is taken for the invoice address attribute automatically, so\
        \ you don't need to provide the address yourself.<br> If you want to know\
        \ more about these parameters, for example if you want to use this request\
        \ to update invoices, feel free to contact our support.<br><br> Finally, after\
        \ covering all parameters, they only important information left, is that the\
        \ order of the last four attributes always needs to be kept.<br> You will\
        \ also always need to provide all of them, as otherwise the request won't\
        \ work properly.<br><br> <b>Warning\":\"</b> You can not create a regular\
        \ invoice with the <b>deliveryDate</b> being later than the <b>invoiceDate</b>.<br>\
        \ To do that you will need to create a so called <b>Abschlagsrechnung</b>\
        \ by setting the <b>invoiceType</b> parameter to <b>AR</b>."
      operationId: createInvoiceByFactory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveInvoice'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the invoice model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveInvoiceResponse'
          description: Created - Returns created invoice
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new invoice
      tags:
      - Invoice
  /Order/Factory/saveOrder:
    post:
      description: Creates an order to which positions can be added later.
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrder'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the order model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveOrderResponse'
          description: Created - Returns created voucher
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new order
      tags:
      - Order
  /CreditNote:
    get:
      deprecated: false
      description: There are a multitude of parameter which can be used to filter.
      operationId: getCreditNotes
      parameters:
      - description: Status of the CreditNote
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - "100"
          - "200"
          - "300"
          - "500"
          - "750"
          - "1000"
          type: string
        style: form
      - description: Retrieve all CreditNotes with this creditNote number
        explode: true
        in: query
        name: creditNoteNumber
        required: false
        schema:
          type: string
        style: form
      - description: Retrieve all CreditNotes with a date equal or higher
        example: 01.01.2020
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: integer
        style: form
      - description: Retrieve all CreditNotes with a date equal or lower
        example: 01.01.2021
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: integer
        style: form
      - description: "Retrieve all CreditNotes with this contact. Must be provided\
          \ with contact[objectName]"
        explode: false
        in: query
        name: "contact[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if contact[id] was provided. 'Contact' should\
          \ be used as value."
        explode: false
        in: query
        name: "contact[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendCreditNoteByPrinting_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve CreditNote
      tags:
      - CreditNote
  /Report/voucherlist:
    get:
      description: Export voucher list
      operationId: reportVoucher
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/reportVoucher_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export voucher list
      tags:
      - Report
  /Part/{partId}:
    get:
      description: Returns a single part
      operationId: getPartById
      parameters:
      - description: ID of part to return
        explode: false
        in: path
        name: partId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPartById_200_response'
          description: Successful operation
        "400":
          description: Bad request. Part was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find part by ID
      tags:
      - Part
    put:
      description: Update a part
      operationId: updatePart
      parameters:
      - description: ID of part to update
        explode: false
        in: path
        name: partId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_PartUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPartById_200_response'
          description: Successful operation - Returns changed part resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an existing part
      tags:
      - Part
  /InvoicePos:
    get:
      deprecated: false
      description: There are a multitude of parameter which can be used to filter.
      operationId: getInvoicePos
      parameters:
      - description: Retrieve all InvoicePos with this InvoicePos id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: number
        style: form
      - description: "Retrieve all invoices positions with this invoice. Must be provided\
          \ with invoice[objectName]"
        explode: true
        in: query
        name: "invoice[id]"
        required: false
        schema:
          type: number
        style: form
      - description: "Only required if invoice[id] was provided. 'Invoice' should\
          \ be used as value."
        explode: true
        in: query
        name: "invoice[objectName]"
        required: false
        schema:
          type: string
        style: form
      - description: "Retrieve all invoices positions with this part. Must be provided\
          \ with part[objectName]"
        explode: true
        in: query
        name: "part[id]"
        required: false
        schema:
          type: number
        style: form
      - description: "Only required if part[id] was provided. 'Part' should be used\
          \ as value."
        explode: true
        in: query
        name: "part[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoicePos_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve InvoicePos
      tags:
      - InvoicePos
  /Invoice/{invoiceId}/render:
    post:
      description: "Using this endpoint you can render the pdf document of an invoice.<br>\r\
        \n     Use cases for this are the retrieval of the pdf location or the forceful\
        \ re-render of a already sent invoice.<br>\r\n     Please be aware that changing\
        \ an invoice after it has been sent to a customer is not an allowed bookkeeping\
        \ process."
      operationId: invoiceRender
      parameters:
      - description: ID of invoice to render
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceRender_request'
        description: Define if the document should be forcefully re-rendered.
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceRender_201_response'
          description: Returns meta-data about pdf.
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Render the pdf document of an invoice
      tags:
      - Invoice
  /Contact:
    get:
      deprecated: false
      description: "There are a multitude of parameter which can be used to filter.<br>\r\
        \n     A few of them are attached but\r\n     for a complete list please check\
        \ out <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-contacts'>this</a>\
        \ list"
      operationId: getContacts
      parameters:
      - description: "Defines if both organizations <b>and</b> persons should be returned.<br>\r\
          \n     '0' -> only organizations, '1' -> organizations and persons"
        explode: true
        in: query
        name: depth
        required: false
        schema:
          enum:
          - "0"
          - "1"
          type: string
        style: form
      - description: Retrieve all contacts with this customer number
        explode: true
        in: query
        name: customerNumber
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve contacts
      tags:
      - Contact
    post:
      deprecated: false
      description: "Creates a new contact.<br>\r\n     For adding addresses and communication\
        \ ways, you will need to use the ContactAddress and CommunicationWay endpoints."
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_Contact'
        description: Creation data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts_200_response'
          description: Created - Returns created contact
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new contact
      tags:
      - Contact
  /CheckAccount/{checkAccountId}:
    delete:
      operationId: deleteCheckAccount
      parameters:
      - description: Id of check account to delete
        explode: false
        in: path
        name: checkAccountId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - check account deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server error
      summary: Deletes a check account
      tags:
      - CheckAccount
    get:
      deprecated: false
      description: Retrieve an existing check account
      operationId: getCheckAccountById
      parameters:
      - description: ID of check account
        explode: false
        in: path
        name: checkAccountId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Find check account by ID
      tags:
      - CheckAccount
    put:
      description: Update a check account
      operationId: updateCheckAccount
      parameters:
      - description: ID of check account to update
        explode: false
        in: path
        name: checkAccountId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccountUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountById_200_response'
          description: Successful operation - Returns changed check account resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Update an existing check account
      tags:
      - CheckAccount
  /Export/creditNoteCsv:
    get:
      description: Export all credit notes as csv
      operationId: exportCreditNote
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportCreditNote_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export creditNote
      tags:
      - Export
  /CommunicationWay/{communicationWayId}:
    delete:
      operationId: deleteCommunicationWay
      parameters:
      - description: Id of communication way resource to delete
        explode: false
        in: path
        name: communicationWayId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - Communication way deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Deletes a communication way
      tags:
      - CommunicationWay
    get:
      description: Returns a single communication way
      operationId: getCommunicationWayById
      parameters:
      - description: ID of communication way to return
        explode: false
        in: path
        name: communicationWayId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCommunicationWayById_200_response'
          description: Successful operation
        "400":
          description: Bad request. communication way was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find communication way by ID
      tags:
      - CommunicationWay
    put:
      description: Update a communication way
      operationId: UpdateCommunicationWay
      parameters:
      - description: ID of CommunicationWay to update
        explode: false
        in: path
        name: communicationWayId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CommunicationWayUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCommunicationWayById_200_response'
          description: Successful operation - Returns changed CommunicationWay resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update a existing communication way
      tags:
      - CommunicationWay
  /Part/{partId}/getStock:
    get:
      description: Returns the current stock amount of the given part.
      operationId: partGetStock
      parameters:
      - description: ID of part for which you want the current stock.
        explode: false
        in: path
        name: partId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partGetStock_200_response'
          description: Successful operation
        "400":
          description: Bad request. Part was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Get stock of a part
      tags:
      - Part
  /Order/{orderId}/sendBy:
    put:
      description: Marks an order as sent by a chosen send type.
      operationId: orderSendBy
      parameters:
      - description: ID of order to mark as sent
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderSendBy_request'
        description: Specify the send type
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderSendBy_200_response'
          description: Successful operation - Returns changed order log entry
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Mark order as sent
      tags:
      - Order
  /Textparser/fetchDictionaryEntriesByType:
    get:
      description: Retrieve all Placeholders
      operationId: getPlaceholder
      parameters:
      - description: Model name
        explode: true
        in: query
        name: objectName
        required: true
        schema:
          enum:
          - Invoice
          - CreditNote
          - Order
          - Contact
          - Letter
          - Email
          type: string
        style: form
      - description: "Sub model name, required if you have \"Email\" at objectName"
        explode: true
        in: query
        name: subObjectName
        required: false
        schema:
          enum:
          - Invoice
          - CreditNote
          - Order
          - Contact
          - Letter
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPlaceholder_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve Placeholders
      tags:
      - ContactField
  /Contact/Factory/findContactsByCustomFieldValue:
    get:
      deprecated: false
      description: Returns an array of contacts having a certain custom field value
        set.
      operationId: findContactsByCustomFieldValue
      parameters:
      - description: The value to be checked.
        explode: true
        in: query
        name: value
        required: true
        schema:
          type: string
        style: form
      - description: ID of ContactCustomFieldSetting for which the value has to be
          checked.
        explode: true
        in: query
        name: "customFieldSetting[id]"
        required: false
        schema:
          type: string
        style: form
      - description: Object name. Only needed if you also defined the ID of a ContactCustomFieldSetting.
        explode: true
        in: query
        name: "customFieldSetting[objectName]"
        required: false
        schema:
          example: ContactCustomFieldSetting
          type: string
        style: form
      - description: "The ContactCustomFieldSetting name, if no ContactCustomFieldSetting\
          \ is provided."
        explode: true
        in: query
        name: customFieldName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts_200_response'
          description: Array of contacts having a certain custom field value set.
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find contacts by custom field value
      tags:
      - Contact
  /CreditNote/{creditNoteId}/bookAmount:
    put:
      description: "Booking the credit note with a transaction is probably the most\
        \ important part in the bookkeeping process.<br> There are several ways on\
        \ correctly booking a credit note, all by using the same endpoint.<br> Conveniently,\
        \ the booking process is exactly the same as the process for invoices and\
        \ vouchers.<br> For this reason, you can have a look at it in the <a href='https://api.sevdesk.de/#section/How-to-book-an-invoice'>invoice\
        \ chapter</a> and all you need to do is to change \"Invoice\" into \"CreditNote\"\
        \ in the URL."
      operationId: bookCreditNote
      parameters:
      - description: ID of credit note to book
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookCreditNote_request'
        description: Booking data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookInvoice_200_response'
          description: Successful operation - Returns changed invoice log entry
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Book a credit note
      tags:
      - CreditNote
  /Voucher:
    get:
      deprecated: false
      description: "There are a multitude of parameter which can be used to filter.\
        \ A few of them are attached but\r\n    for a complete list please check out\
        \ <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-vouchers'>this</a>\
        \ list"
      operationId: getVouchers
      parameters:
      - description: Status of the vouchers to retrieve.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - 50
          - 100
          - 1000
          type: number
        style: form
      - description: Define if you only want credit or debit vouchers.
        explode: true
        in: query
        name: creditDebit
        required: false
        schema:
          enum:
          - C
          - D
          type: string
        style: form
      - description: Retrieve all vouchers with a description like this.
        explode: true
        in: query
        name: descriptionLike
        required: false
        schema:
          type: string
        style: form
      - description: Retrieve all vouchers with a date equal or higher
        example: 01.01.2020
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          type: integer
        style: form
      - description: Retrieve all vouchers with a date equal or lower
        example: 01.01.2020
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          type: integer
        style: form
      - description: "Retrieve all vouchers with this contact. Must be provided with\
          \ contact[objectName]"
        explode: false
        in: query
        name: "contact[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if contact[id] was provided. 'Contact' should\
          \ be used as value."
        explode: false
        in: query
        name: "contact[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVoucherById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve vouchers
      tags:
      - Voucher
  /Report/contactlist:
    get:
      description: Export contact list
      operationId: reportContact
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/reportContact_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export contact list
      tags:
      - Report
  /Invoice/{invoiceId}/sendBy:
    put:
      description: Marks an invoice as sent by a chosen send type.
      operationId: invoiceSendBy
      parameters:
      - description: ID of invoice to mark as sent
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceSendBy_request'
        description: Specify the send type
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceSendBy_200_response'
          description: Successful operation - Returns changed invoice log entry
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Mark invoice as sent
      tags:
      - Invoice
  /creditNote/{creditNoteId}:
    delete:
      operationId: deletecreditNote
      parameters:
      - description: Id of creditNote resource to delete
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendCreditNoteByPrinting_200_response'
          description: Successful operation - creditNote deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict - f.e occurs if the creditNote is not a draft
        "500":
          description: Server Error
      summary: Deletes an creditNote
      tags:
      - CreditNote
    get:
      description: Returns a single creditNote
      operationId: getcreditNoteById
      parameters:
      - description: ID of creditNote to return
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendCreditNoteByPrinting_200_response'
          description: Successful operation
        "400":
          description: Bad request. creditNote was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find creditNote by ID
      tags:
      - CreditNote
    put:
      description: Update a creditNote
      operationId: updatecreditNote
      parameters:
      - description: ID of creditNote to update
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_creditNoteUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendCreditNoteByPrinting_200_response'
          description: Successful operation - Returns changed creditNote resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an existing creditNote
      tags:
      - CreditNote
  /Contact/Mapper/checkCustomerNumberAvailability:
    get:
      deprecated: false
      description: Checks if a given customer number is available or already used.
      operationId: contactCustomerNumberAvailabilityCheck
      parameters:
      - description: The customer number to be checked.
        explode: true
        in: query
        name: customerNumber
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIsInvoicePartiallyPaid_200_response'
          description: Returns whether given customer number is available.
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Check if a customer number is available
      tags:
      - Contact
  /CreditNote/{creditNoteId}/sendViaEmail:
    post:
      description: "This endpoint sends the specified credit note to a customer via\
        \ email.<br>\r\n    This will automatically mark the credit note as sent.<br>\r\
        \n    Please note, that in production an credit note is not allowed to be\
        \ changed after this happened!"
      operationId: sendCreditNoteViaEMail
      parameters:
      - description: ID of credit note to be sent via email
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInvoiceViaEMail_request'
        description: Mail data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendCreditNoteByPrinting_200_response'
          description: Created - Returns created mail object
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Send credit note via email
      tags:
      - CreditNote
  /CheckAccountTransaction:
    get:
      deprecated: false
      description: Retrieve all transactions depending on the filters defined in the
        query.
      operationId: getTransactions
      parameters:
      - description: "Retrieve all transactions on this check account. Must be provided\
          \ with checkAccount[objectName]"
        explode: false
        in: query
        name: "checkAccount[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if checkAccount[id] was provided. 'CheckAccount'\
          \ should be used as value."
        explode: false
        in: query
        name: "checkAccount[objectName]"
        required: false
        schema:
          type: string
        style: form
      - description: Only retrieve booked transactions
        explode: false
        in: query
        name: isBooked
        required: false
        schema:
          type: boolean
        style: form
      - description: Only retrieve transactions with this payment purpose
        explode: false
        in: query
        name: paymtPurpose
        required: false
        schema:
          type: string
        style: form
      - description: Only retrieve transactions from this date on
        explode: false
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Only retrieve transactions up to this date
        explode: false
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Only retrieve transactions with this payee / payer
        explode: false
        in: query
        name: payeePayerName
        required: false
        schema:
          type: string
        style: form
      - description: Only retrieve credit transactions
        explode: false
        in: query
        name: onlyCredit
        required: false
        schema:
          type: boolean
        style: form
      - description: Only retrieve debit transactions
        explode: false
        in: query
        name: onlyDebit
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountTransactionById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Retrieve transactions
      tags:
      - CheckAccountTransaction
    post:
      description: Creates a new transaction on a check account.
      operationId: createTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccountTransaction'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the CheckAccountTransaction model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountTransactionById_200_response'
          description: Created - Returns created transaction
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Create a new transaction
      tags:
      - CheckAccountTransaction
  /TagRelation:
    get:
      description: Retrieve all tag relations
      operationId: getTagRelations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagRelations_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve tag relations
      tags:
      - Tag
  /VoucherPos:
    get:
      deprecated: false
      description: Retrieve all voucher positions depending on the filters defined
        in the query.
      operationId: getVoucherPositions
      parameters:
      - description: "Retrieve all vouchers positions belonging to this voucher. Must\
          \ be provided with voucher[objectName]"
        explode: false
        in: query
        name: "voucher[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if voucher[id] was provided. 'Voucher' should\
          \ be used as value."
        explode: false
        in: query
        name: "voucher[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVoucherPositions_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve voucher positions
      tags:
      - VoucherPos
  /CreditNote/{creditNoteId}/sendBy:
    put:
      description: Marks an credit note as sent by a chosen send type.
      operationId: creditNoteSendBy
      parameters:
      - description: ID of credit note to mark as sent
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/creditNoteSendBy_request'
        description: Specify the send type
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/creditNoteSendBy_200_response'
          description: Successful operation - Returns changed credit note log entry
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Mark credit note as sent
      tags:
      - CreditNote
  /Invoice/Factory/createInvoiceReminder:
    post:
      description: Create an reminder from an invoice
      operationId: createInvoiceReminder
      parameters:
      - description: the id of the invoice
        explode: true
        in: query
        name: "invoice[id]"
        required: true
        schema:
          type: integer
        style: form
      - description: "Model name, which is 'Invoice'"
        example: Invoice
        explode: true
        in: query
        name: "invoice[objectName]"
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createInvoiceReminder_request'
        description: Create invoice
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoiceById_200_response'
          description: Successful operation
        "400":
          description: Bad Request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create invoice reminder
      tags:
      - Invoice
  /CreditNote/Factory/saveCreditNote:
    post:
      description: "The list of parameters starts with the credit note array.<br>\
        \ This array contains all required attributes for a complete credit note.<br>\
        \ Most of the attributes are covered in the credit note attribute list, there\
        \ are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br>\
        \ These are just needed for our system and you always need to provide them.<br>\
        \ The list of parameters then continues with the credit note position array.<br>\
        \ With this array you have the possibility to add multiple positions at once.<br>\
        \ In the example it only contains one position, again together with the parameters\
        \ <b>mapAll</b> and <b>objectName</b>, however, you can add more credit note\
        \ positions by extending the array.<br> So if you wanted to add another position,\
        \ you would add the same list of parameters with an incremented array index\
        \ of \"1\" instead of \"0\".<br><br> The list ends with the five parameters\
        \ creditNotePosDelete, discountSave, discountDelete, takeDefaultAddress and\
        \ forCashRegister.<br> They only play a minor role if you only want to create\
        \ a credit note but we will shortly explain what they can do.<br> With creditNotePosDelete\
        \ you have to option to delete credit note positions as this request can also\
        \ be used to update credit notes.<br> Both discount parameters are deprecated\
        \ and have no use for credit notes, however they need to be provided in case\
        \ you want to use the following two parameters.<br> With takeDefaultAddress\
        \ you can specify that the first address of the contact you are using for\
        \ the credit note is taken for the credit note address attribute automatically,\
        \ so you don't need to provide the address yourself.<br> Finally, the forCashRegister\
        \ parameter needs to be set to <b>true</b> if your credit note is to be booked\
        \ on the cash register.<br> If you want to know more about these parameters,\
        \ for example if you want to use this request to update credit notes, feel\
        \ free to contact our support.<br> Finally, after covering all parameters,\
        \ they only important information left, is that the order of the last five\
        \ attributes always needs to be kept.<br> You will also always need to provide\
        \ all of them, as otherwise the request won't work properly."
      operationId: createcreditNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveCreditNote'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the credit note model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveCreditNoteResponse'
          description: Created - Returns created credit note
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new creditNote
      tags:
      - CreditNote
  /CheckAccount:
    get:
      deprecated: false
      description: Retrieve all check accounts
      operationId: getCheckAccounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Retrieve check accounts
      tags:
      - CheckAccount
    post:
      description: Creates a new banking account on which transactions can be created.
      operationId: createCheckAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CheckAccount'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the CheckAccount model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCheckAccountById_200_response'
          description: Created - Returns created check account
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Create a new check account
      tags:
      - CheckAccount
  /Contact/{contactId}:
    delete:
      operationId: deleteContact
      parameters:
      - description: Id of contact resource to delete
        explode: false
        in: path
        name: contactId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - contact deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Deletes a contact
      tags:
      - Contact
    get:
      description: Returns a single contact
      operationId: getContactById
      parameters:
      - description: ID of contact to return
        explode: false
        in: path
        name: contactId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts_200_response'
          description: Successful operation
        "400":
          description: Bad request. Contact was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find contact by ID
      tags:
      - Contact
    put:
      description: Update a contact
      operationId: updateContact
      parameters:
      - description: ID of contact to update
        explode: false
        in: path
        name: contactId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactUpdate'
        description: Update data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts_200_response'
          description: Successful operation - Returns changed contact resource
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update a existing contact
      tags:
      - Contact
  /Voucher/Factory/uploadTempFile:
    post:
      deprecated: false
      description: "To attach a document to a voucher, you will need to upload it\
        \ first for later use.<br> To do this, you can use this request.<br> When\
        \ you successfully uploaded the file, you will get a sevDesk internal filename\
        \ in the response.<br> The filename will be a hash generated from your uploaded\
        \ file. You will need it in the next request!<br> After you got the just mentioned\
        \ filename, you can enter it as a value for the filename parameter of the\
        \ saveVoucher request.<br> If you provided all necessary parameters and kept\
        \ all of them in the right order, the file will be attached to your voucher."
      operationId: voucherUploadFile
      requestBody:
        content:
          form-data:
            schema:
              $ref: '#/components/schemas/voucherUploadFile_request'
        description: File to upload
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/voucherUploadFile_201_response'
          description: A pdf file
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Upload voucher file
      tags:
      - Voucher
  /creditNotePos:
    get:
      deprecated: false
      description: Retrieve all creditNote positions depending on the filters defined
        in the query.
      operationId: getcreditNotePositions
      parameters:
      - description: "Retrieve all creditNote positions belonging to this creditNote.\
          \ Must be provided with creditNote[objectName]"
        explode: false
        in: query
        name: "creditNote[id]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Only required if creditNote[id] was provided. 'creditNote' should\
          \ be used as value."
        explode: false
        in: query
        name: "creditNote[objectName]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getcreditNotePositions_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve creditNote positions
      tags:
      - CreditNotePos
  /ContactCustomFieldSetting/{contactCustomFieldSettingId}/getReferenceCount:
    get:
      description: Receive count reference
      operationId: getReferenceCount
      parameters:
      - description: ID of contact field you want to get the reference count
        explode: false
        in: path
        name: contactCustomFieldSettingId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getReferenceCount_200_response'
          description: Successful operation - contact field deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Receive count reference
      tags:
      - ContactField
  /Contact/Factory/getNextCustomerNumber:
    get:
      deprecated: false
      description: Retrieves the next available customer number. Avoids duplicates.
      operationId: getNextCustomerNumber
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNextCustomerNumber_200_response'
          description: Returns next available customer number
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Get next free customer number
      tags:
      - Contact
  /Tag/Factory/create:
    post:
      description: Create a new tag
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTag_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagRelations_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new tag
      tags:
      - Tag
  /AccountingContact:
    get:
      deprecated: false
      description: Returns all accounting contact which have been added up until now.
        Filters can be added.
      operationId: getAccountingContact
      parameters:
      - description: ID of contact for which you want the accounting contact.
        explode: true
        in: query
        name: "contact[id]"
        required: false
        schema:
          type: string
        style: form
      - description: Object name. Only needed if you also defined the ID of a contact.
        explode: true
        in: query
        name: "contact[objectName]"
        required: false
        schema:
          example: Contact
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountingContactById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve accounting contact
      tags:
      - AccountingContact
    post:
      deprecated: false
      description: Creates a new accounting contact.
      operationId: createAccountingContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_AccountingContact'
        description: Creation data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountingContactById_200_response'
          description: Created - Returns created accounting contact
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new accounting contact
      tags:
      - AccountingContact
  /Order/Factory/createContractNoteFromOrder:
    post:
      description: Create contract note from order
      operationId: createContractNoteFromOrder
      parameters:
      - description: the id of the order
        explode: false
        in: query
        name: "order[id]"
        required: true
        schema:
          type: integer
        style: form
      - description: "Model name, which is 'Order'"
        example: Order
        explode: false
        in: query
        name: "order[objectName]"
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CreatePackingListFromOrder'
        description: Create contract note
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPackingListFromOrder_200_response'
          description: Successful operation
        "400":
          description: Bad Request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create contract note from order
      tags:
      - Order
  /Export/invoiceZip:
    get:
      description: Export all invoices as zip
      operationId: exportInvoiceZip
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportInvoice_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export Invoice as zip
      tags:
      - Export
  /ContactCustomFieldSetting/{contactCustomFieldSettingId}:
    delete:
      operationId: deleteContactFieldSetting
      parameters:
      - description: Id of contact field to delete
        explode: false
        in: path
        name: contactCustomFieldSettingId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAccountingContact_200_response'
          description: Successful operation - contact field deleted
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Deletes a contact field setting
      tags:
      - ContactField
    get:
      description: Returns a single contact field setting
      operationId: getContactFieldSettingById
      parameters:
      - description: ID of contact field to return
        explode: false
        in: path
        name: contactCustomFieldSettingId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldSettings_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find contact field setting by ID
      tags:
      - ContactField
    put:
      description: Update an existing contact field  setting
      operationId: updateContactFieldSetting
      parameters:
      - description: ID of contact field setting you want to update
        explode: false
        in: path
        name: contactCustomFieldSettingId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactCustomFieldSettingUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactFieldSettings_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update contact field setting
      tags:
      - ContactField
  /Invoice/Factory/createInvoiceFromOrder:
    post:
      description: Create an invoice from an order
      operationId: createInvoiceFromOrder
      parameters:
      - description: the id of the invoice
        explode: true
        in: query
        name: "invoice[id]"
        required: true
        schema:
          type: integer
        style: form
      - description: "Model name, which is 'Invoice'"
        example: Invoice
        explode: true
        in: query
        name: "invoice[objectName]"
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CreateInvoiceFromOrder'
        description: Create invoice
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoiceById_200_response'
          description: Successful operation
        "400":
          description: Bad Request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create invoice from order
      tags:
      - Invoice
  /Invoice/{invoiceId}/cancelInvoice:
    post:
      description: "This endpoint will cancel the specified invoice therefor creating\
        \ a cancellation invoice.<br>\r\n     The cancellation invoice will be automatically\
        \ paid and the source invoices status will change to 'cancelled'."
      operationId: cancelInvoice
      parameters:
      - description: ID of invoice to be cancelled
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoiceById_200_response'
          description: Created - Returns cancellation invoice
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Cancel an invoice / Create cancellation invoice
      tags:
      - Invoice
  /Invoice/{invoiceId}/changeParameter:
    put:
      description: Update an existing invoice template
      operationId: updateInvoiceTemplate
      parameters:
      - description: ID of invoice to update
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ChangeLayout'
        description: Change Layout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateOrderTemplate_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an invoice template
      tags:
      - Layout
  /CommunicationWay:
    get:
      deprecated: false
      description: Returns all communication ways which have been added up until now.
        Filters can be added.
      operationId: getCommunicationWays
      parameters:
      - description: ID of contact for which you want the communication ways.
        explode: true
        in: query
        name: "contact[id]"
        required: false
        schema:
          type: string
        style: form
      - description: Object name. Only needed if you also defined the ID of a contact.
        explode: true
        in: query
        name: "contact[objectName]"
        required: false
        schema:
          example: Contact
          type: string
        style: form
      - description: Type of the communication ways you want to get.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - PHONE
          - EMAIL
          - WEB
          - MOBILE
          type: string
        style: form
      - description: Define if you only want the main communication way.
        explode: true
        in: query
        name: main
        required: false
        schema:
          enum:
          - "0"
          - "1"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCommunicationWayById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve communication ways
      tags:
      - CommunicationWay
    post:
      deprecated: false
      description: Creates a new contact communication way.
      operationId: createCommunicationWay
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_CommunicationWay'
        description: Creation data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCommunicationWayById_200_response'
          description: Created - Returns created contact communication way
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new contact communication way
      tags:
      - CommunicationWay
  /CheckAccount/{checkAccountId}/getBalanceAtDate:
    get:
      description: "Get the balance, calculated as the sum of all transactions sevDesk\
        \ knows, up to and including the given date. Note that this balance does not\
        \ have to be the actual bank account balance, e.g. if sevDesk did not import\
        \ old transactions."
      operationId: getBalanceAtDate
      parameters:
      - description: ID of check account
        explode: false
        in: path
        name: checkAccountId
        required: true
        schema:
          type: integer
        style: simple
      - description: Only consider transactions up to this date at 23:59:59
        explode: true
        in: query
        name: date
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBalanceAtDate_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server error
      summary: Get the balance at a given date
      tags:
      - CheckAccount
  /Export/contactListCsv:
    get:
      description: Contact export as csv
      operationId: exportContact
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportContact_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export contact
      tags:
      - Export
  /Invoice/{invoiceId}/getPositions:
    get:
      description: Returns all positions of an invoice
      operationId: getInvoicePositionsById
      parameters:
      - description: ID of invoice to return the positions
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          type: integer
        style: simple
      - description: limits the number of entries returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: set the index where the returned entries start
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: "Get some additional information. Embed can handle multiple values,\
          \ they must be separated by comma."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvoicePos_200_response'
          description: Successful operation
        "400":
          description: Bad request. Invoice was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find invoice positions
      tags:
      - Invoice
  /Order/{orderId}/getPdf:
    get:
      description: Retrieves the pdf document of an order with additional metadata
        and commit the order.
      operationId: orderGetPdf
      parameters:
      - description: ID of order from which you want the pdf
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      - description: If u want to download the pdf of the order.
        example: true
        explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - description: Defines if u want to send the order.
        example: true
        explode: true
        in: query
        name: preventSendBy
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceGetPdf_200_response'
          description: A pdf file
        "400":
          description: Bad request. order was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve pdf document of an order
      tags:
      - Order
  /CreditNote/{creditNoteId}/changeParameter:
    put:
      description: Update an existing of credit note template
      operationId: updateCreditNoteTemplate
      parameters:
      - description: ID of credit note to update
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ChangeLayout'
        description: Change Layout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateOrderTemplate_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Update an of credit note template
      tags:
      - Layout
  /DocServer/getTemplatesWithThumb:
    get:
      description: Retrieve all templates
      operationId: getTemplates
      parameters:
      - description: Type of the templates you want to get.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - Invoice
          - invoicereminder
          - Order
          - Contractnote
          - Packinglist
          - Letter
          - Creditnote
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTemplates_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve templates
      tags:
      - Layout
  /Order/{orderId}/sendViaEmail:
    post:
      description: "This endpoint sends the specified order to a customer via email.<br>\r\
        \n    This will automatically mark the order as sent.<br>\r\n    Please note,\
        \ that in production an order is not allowed to be changed after this happened!"
      operationId: sendorderViaEMail
      parameters:
      - description: ID of order to be sent via email
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInvoiceViaEMail_request'
        description: Mail data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendorderViaEMail_201_response'
          description: Created - Returns created mail object
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Send order via email
      tags:
      - Order
  /Export/voucherZip:
    get:
      description: export all vouchers as zip
      operationId: exportVoucherZip
      parameters:
      - explode: true
        in: query
        name: download
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: sevQuery
        required: true
        schema:
          $ref: '#/components/schemas/exportVoucher_sevQuery_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export voucher zip
      tags:
      - Export
  /Tag:
    get:
      description: Retrieve all tags
      operationId: getTags
      parameters:
      - description: ID of the Tag
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: number
        style: form
      - description: Name of the Tag
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagById_200_response'
          description: Successful operation
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve tags
      tags:
      - Tag
  /ContactAddress:
    get:
      deprecated: false
      description: Retrieve all contact addresses
      operationId: getContactAddresses
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactAddressId_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve contact addresses
      tags:
      - ContactAddress
    post:
      deprecated: false
      description: Creates a new contact address.
      operationId: createContactAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_ContactAddress'
        description: Creation data
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactAddressId_200_response'
          description: Created - Returns created contact address
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new contact address
      tags:
      - ContactAddress
  /Part:
    get:
      deprecated: false
      description: Retrieve all parts in your sevDesk inventory according to the applied
        filters.
      operationId: getParts
      parameters:
      - description: Retrieve all parts with this part number
        explode: false
        in: query
        name: partNumber
        required: false
        schema:
          type: string
        style: form
      - description: Retrieve all parts with this name
        explode: false
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPartById_200_response'
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Retrieve parts
      tags:
      - Part
    post:
      description: Creates a part in your sevDesk inventory.
      operationId: createPart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model_Part'
        description: "Creation data. Please be aware, that you need to provide at\
          \ least all required parameter\r\n    of the part model!"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPartById_200_response'
          description: Created - Returns created part
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Create a new part
      tags:
      - Part
  /Export/datevCSV:
    get:
      description: Datev export as zip with csv´s
      operationId: exportDatev
      parameters:
      - description: Specifies if the document is downloaded
        example: true
        explode: true
        in: query
        name: Download
        required: false
        schema:
          type: boolean
        style: form
      - description: the start date of the export as timestamp
        example: 1641032867
        explode: true
        in: query
        name: startDate
        required: true
        schema:
          type: integer
        style: form
      - description: the end date of the export as timestamp
        example: 1648805267
        explode: true
        in: query
        name: endDate
        required: true
        schema:
          type: integer
        style: form
      - description: "Define what you want to include in the datev export. This parameter\
          \ takes a string of 5 letters. Each stands for a model that should be included.\
          \ Possible letters are: ‘E’ (Earnings), ‘X’ (Expenditure), ‘T’ (Transactions),\
          \ ‘C’ (Cashregister), ‘D’ (Assets). By providing one of those letter you\
          \ specify that it should be included in the datev export. Some combinations\
          \ are: ‘EXTCD’, ‘EXTD’ …"
        example: EXTCD
        explode: true
        in: query
        name: scope
        required: true
        schema:
          type: string
        style: form
      - description: include unpaid documents
        example: true
        explode: true
        in: query
        name: withUnpaidDocuments
        required: false
        schema:
          type: boolean
        style: form
      - description: include enshrined documents
        example: true
        explode: true
        in: query
        name: withEnshrinedDocuments
        required: false
        schema:
          type: boolean
        style: form
      - description: Specify if you want to enshrine all models which were included
          in the export
        example: false
        explode: true
        in: query
        name: enshrine
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successful operation
        "400":
          description: Bad request
        "401":
          description: Authentication required
        "409":
          description: Conflict
        "500":
          description: Server Error
      summary: Export datev
      tags:
      - Export
  /Order/{orderId}/getRelatedObjects:
    get:
      description: Get related objects of a specified order
      operationId: getRelatedObjects
      parameters:
      - description: ID of order to return the positions
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: integer
        style: simple
      - description: Define if the related objects include the order itself
        explode: true
        in: query
        name: includeItself
        required: false
        schema:
          type: boolean
        style: form
      - description: Define if you want the related objects sorted by type
        explode: true
        in: query
        name: sortByType
        required: false
        schema:
          type: boolean
        style: form
      - description: "Get some additional information. Embed can handle multiple values,\
          \ they must be separated by comma."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRelatedObjects_200_response'
          description: Successful operation
        "400":
          description: Bad request. order was not found
        "401":
          description: Authentication required
        "500":
          description: Server Error
      summary: Find related objects
      tags:
      - Order
components:
  schemas:
    Model_InvoicePosResponse:
      description: Invoice position model
      example:
        sumGrossAccounting: "0"
        quantity: "1"
        sevClient:
          objectName: SevClient
          id: "0"
        part:
          objectName: Part
          id: "0"
        update: 2000-01-23T04:56:07.000+00:00
        discount: "0"
        positionNumber: "0"
        priceNet: "0"
        priceGross: "100"
        unity:
          objectName: Unity
          id: "1"
        taxRate: "19"
        price: "100"
        sumNetAccounting: "0"
        name: Dragonglass
        objectName: InvoicePos
        create: 2000-01-23T04:56:07.000+00:00
        id: id
        invoice:
          objectName: Invoice
          id: "0"
        text: text
        sumTaxAccounting: "0"
        priceTax: "0"
        sumDiscount: "0"
      properties:
        id:
          description: The invoice position id
          readOnly: true
          type: string
        objectName:
          description: The invoice position object name
          example: InvoicePos
          readOnly: true
          type: string
        create:
          description: Date of invoice position creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last invoice position update
          format: date-time
          readOnly: true
          type: string
        invoice:
          $ref: '#/components/schemas/Model_InvoicePosResponse_invoice'
        part:
          $ref: '#/components/schemas/Model_InvoicePosResponse_part'
        quantity:
          description: Quantity of the article/part
          example: "1"
          readOnly: true
          type: string
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: "100"
          readOnly: true
          type: string
        name:
          description: Name of the article/part.
          example: Dragonglass
          readOnly: true
          type: string
        unity:
          $ref: '#/components/schemas/Model_InvoicePosResponse_unity'
        sevClient:
          $ref: '#/components/schemas/Model_InvoicePosResponse_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to order multiple
            positions.
          example: "0"
          readOnly: true
          type: string
        text:
          description: A text describing your position.
          readOnly: true
          type: string
        discount:
          description: An optional discount of the position.
          example: "0"
          readOnly: true
          type: string
        taxRate:
          description: Tax rate of the position.
          example: "19"
          readOnly: true
          type: string
        sumDiscount:
          description: Discount sum of the position
          example: "0"
          readOnly: true
          type: string
        sumNetAccounting:
          description: Net accounting sum of the position
          example: "0"
          readOnly: true
          type: string
        sumTaxAccounting:
          description: Tax accounting sum of the position
          example: "0"
          readOnly: true
          type: string
        sumGrossAccounting:
          description: Gross accounting sum of the position
          example: "0"
          readOnly: true
          type: string
        priceNet:
          description: Net price of the part
          example: "0"
          readOnly: true
          type: string
        priceGross:
          description: Gross price of the part
          example: "100"
          readOnly: true
          type: string
        priceTax:
          description: Tax on the price of the part
          example: "0"
          readOnly: true
          type: string
      title: Invoice position model
      type: object
    Model_AccountingContactUpdate:
      description: Accounting contact model
      properties:
        contact:
          $ref: '#/components/schemas/Model_AccountingContactUpdate_contact'
        debitorNumber:
          description: Debitor number of the accounting contact.
          nullable: true
          type: integer
        creditorNumber:
          description: Creditor number of the accounting contact.
          nullable: true
          type: integer
      title: AccountingContact model
      type: object
    Model_creditNote:
      description: creditNote model
      properties:
        id:
          description: The creditNote id. <span style='color:red'>Required</span>
            if you want to create/update an credit note position for an existing credit
            note"
          nullable: false
          type: integer
        objectName:
          description: The creditNote object name
          nullable: false
          type: string
        mapAll:
          nullable: false
          type: boolean
        create:
          description: Date of creditNote creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last creditNote update
          format: date-time
          readOnly: true
          type: string
        creditNoteNumber:
          description: The creditNote number
          example: Offer-1000
          type: string
        contact:
          $ref: '#/components/schemas/Model_creditNote_contact'
        creditNoteDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: false
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>status\
            \ of credit note</a>\r\n    to see what the different status codes mean"
          enum:
          - "100"
          - "200"
          - "300"
          - "500"
          - "750"
          - "1000"
          example: "100"
          nullable: false
          type: string
        header:
          description: Normally consist of prefix plus the creditNote number
          example: My Offer-1000
          nullable: false
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_creditNote_addressCountry'
        createUser:
          $ref: '#/components/schemas/Model_creditNote_createUser'
        sevClient:
          $ref: '#/components/schemas/Model_creditNote_sevClient'
        deliveryTerms:
          description: Delivery terms of the creditNote
          nullable: true
          type: string
        paymentTerms:
          description: Payment terms of the creditNote
          nullable: true
          type: string
        version:
          description: "Version of the creditNote.<br>\r\n    Can be used if you have\
            \ multiple drafts for the same creditNote.<br>\r\n    Should start with\
            \ 0"
          example: 0
          nullable: true
          type: integer
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the creditNote must not contain any vat"
          example: false
          nullable: true
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_creditNote_contactPerson'
        taxRate:
          description: Is overwritten by creditNote position tax rates
          example: 19
          format: float
          nullable: false
          type: number
        taxSet:
          $ref: '#/components/schemas/Model_creditNote_taxSet'
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: false
          type: string
        taxType:
          description: |-
            Tax type of the creditNote.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: false
          type: string
        creditNoteType:
          description: Type of the creditNote.
          example: CN
          nullable: false
          type: string
        sendDate:
          description: The date the creditNote was sent to the customer
          format: date-time
          nullable: true
          type: string
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.<br>\r\n     Line breaks can be used and will\
            \ be displayed on the invoice pdf."
          nullable: true
          type: string
        bookingCategory:
          description: "defines the booking category, for more information see the\
            \ section \"<a href='https://api.sevdesk.de/#section/Credit-note-booking-categories'>Credit\
            \ note booking categories</a>\""
          enum:
          - PROVISION
          - ROYALTY_ASSIGNED
          - ROYALTY_UNASSIGNED
          - UNDERACHIEVEMENT
          - ACCOUNTING_TYPE
          example: PROVISION
          nullable: true
          type: string
        currency:
          description: Currency used in the creditNote. Needs to be currency code
            according to ISO-4217
          example: EUR
          nullable: false
          type: string
        sumNet:
          description: Net sum of the creditNote
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTax:
          description: Tax sum of the creditNote
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGross:
          description: Gross sum of the creditNote
          format: float
          nullable: false
          readOnly: true
          type: number
        sumDiscounts:
          description: Sum of all discounts in the creditNote
          format: float
          nullable: false
          readOnly: true
          type: number
        sumNetForeignCurrency:
          description: Net sum of the creditNote in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTaxForeignCurrency:
          description: Tax sum of the creditNote in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGrossForeignCurrency:
          description: Gross sum of the creditNote in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumDiscountsForeignCurrency:
          description: Discounts sum of the creditNote in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the creditNote. Otherwise gross amount"
          example: false
          nullable: false
          type: boolean
        sendType:
          description: "Type which was used to send the creditNote. IMPORTANT: Please\
            \ refer to the creditNote section of the\r\n     *     API-Overview to\
            \ understand how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
      required:
      - addressCountry
      - contact
      - contactPerson
      - creditNoteDate
      - creditNoteNumber
      - currency
      - deliveryDate
      - header
      - invoiceType
      - mapAll
      - objectName
      - status
      - taxRate
      - taxText
      - taxType
      title: creditNote model
      type: object
    Model_creditNoteUpdate:
      description: creditNote model
      properties:
        id:
          description: The creditNote id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The creditNote object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of creditNote creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last creditNote update
          format: date-time
          readOnly: true
          type: string
        creditNoteNumber:
          description: The creditNote number
          example: Offer-1000
          nullable: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_creditNoteUpdate_contact'
        creditNoteDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>status\
            \ of credit note</a>\r\n    to see what the different status codes mean"
          enum:
          - "100"
          - "200"
          - "1000"
          example: "100"
          nullable: false
          type: string
        header:
          description: Normally consist of prefix plus the creditNote number
          example: My Offer-1000
          nullable: true
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_creditNote_addressCountry'
        createUser:
          $ref: '#/components/schemas/Model_creditNote_createUser'
        sevClient:
          $ref: '#/components/schemas/Model_creditNote_sevClient'
        deliveryTerms:
          description: Delivery terms of the creditNote
          nullable: true
          type: string
        deliveryDate:
          description: Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          format: date-time
          nullable: false
          type: string
        paymentTerms:
          description: Payment terms of the creditNote
          nullable: true
          type: string
        version:
          description: "Version of the creditNote.<br>\r\n    Can be used if you have\
            \ multiple drafts for the same creditNote.<br>\r\n    Should start with\
            \ 0"
          example: 0
          nullable: true
          type: integer
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the creditNote must not contain any vat"
          example: false
          nullable: true
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_creditNoteUpdate_contactPerson'
        taxRate:
          description: Is overwritten by creditNote position tax rates
          example: 19
          format: float
          nullable: true
          type: number
        taxSet:
          $ref: '#/components/schemas/Model_creditNote_taxSet'
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: true
          type: string
        taxType:
          description: |-
            Tax type of the creditNote.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: true
          type: string
        creditNoteType:
          description: "Type of the creditNote. For more information on the different\
            \ types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>this</a>\r\
            \n"
          example: CN
          nullable: true
          type: string
        sendDate:
          description: The date the creditNote was sent to the customer
          format: date-time
          nullable: true
          type: string
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.<br>\r\n     Line breaks can be used and will\
            \ be displayed on the invoice pdf."
          nullable: true
          type: string
        currency:
          description: Currency used in the creditNote. Needs to be currency code
            according to ISO-4217
          example: EUR
          nullable: true
          type: string
        sumNet:
          description: Net sum of the creditNote
          format: float
          readOnly: true
          type: number
        sumTax:
          description: Tax sum of the creditNote
          format: float
          readOnly: true
          type: number
        sumGross:
          description: Gross sum of the creditNote
          format: float
          readOnly: true
          type: number
        sumDiscounts:
          description: Sum of all discounts in the creditNote
          format: float
          readOnly: true
          type: number
        sumNetForeignCurrency:
          description: Net sum of the creditNote in the foreign currency
          format: float
          readOnly: true
          type: number
        sumTaxForeignCurrency:
          description: Tax sum of the creditNote in the foreign currency
          format: float
          readOnly: true
          type: number
        sumGrossForeignCurrency:
          description: Gross sum of the creditNote in the foreign currency
          format: float
          readOnly: true
          type: number
        sumDiscountsForeignCurrency:
          description: Discounts sum of the creditNote in the foreign currency
          format: float
          readOnly: true
          type: number
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the creditNote. Otherwise gross amount"
          example: false
          type: boolean
        sendType:
          description: "Type which was used to send the creditNote. IMPORTANT: Please\
            \ refer to the creditNote section of the\r\n     *     API-Overview to\
            \ understand how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
      title: creditNote model
      type: object
    Model_creditNotePosResponse:
      description: creditNote position model
      example:
        quantity: "0"
        sevClient:
          objectName: SevClient
          id: "0"
        part:
          objectName: Part
          id: "0"
        update: 01.01.2020
        discount: "0"
        optional: true
        positionNumber: "1"
        priceNet: "100"
        priceGross: "119"
        creditNote:
          objectName: creditNote
          id: "0"
        unity:
          objectName: Unity
          id: "0"
        taxRate: "19"
        price: "100"
        name: Dragonglass
        objectName: objectName
        create: 01.01.2020
        id: "0"
        priceTax: "19"
        text: text
        sumDiscount: "0"
      properties:
        id:
          description: The creditNote position id
          example: "0"
          nullable: false
          readOnly: true
          type: string
        objectName:
          description: The creditNote position object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of creditNote position creation
          example: 01.01.2020
          readOnly: true
          type: string
        update:
          description: Date of last creditNote position update
          example: 01.01.2020
          readOnly: true
          type: string
        creditNote:
          $ref: '#/components/schemas/Model_creditNotePosResponse_creditNote'
        part:
          $ref: '#/components/schemas/Model_creditNotePosResponse_part'
        quantity:
          description: Quantity of the article/part
          example: "0"
          nullable: false
          type: string
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: "100"
          nullable: true
          type: string
        priceNet:
          description: Net price of the part
          example: "100"
          nullable: true
          readOnly: true
          type: string
        priceTax:
          description: Tax on the price of the part
          example: "19"
          nullable: true
          type: string
        priceGross:
          description: Gross price of the part
          example: "119"
          nullable: true
          type: string
        name:
          description: Name of the article/part.
          example: Dragonglass
          nullable: true
          type: string
        unity:
          $ref: '#/components/schemas/Model_creditNotePosResponse_unity'
        sevClient:
          $ref: '#/components/schemas/Model_creditNotePosResponse_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to creditNote
            multiple positions.
          example: "1"
          nullable: true
          type: string
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          example: "0"
          nullable: true
          type: string
        optional:
          description: Defines if the position is optional.
          nullable: true
          type: boolean
        taxRate:
          description: Tax rate of the position.
          example: "19"
          nullable: false
          type: string
        sumDiscount:
          description: Discount sum of the position
          example: "0"
          nullable: true
          readOnly: true
          type: string
      required:
      - creditNote
      - quantity
      - taxRate
      - unity
      title: creditNote position model
      type: object
    Model_ChangeLayout:
      description: Layout model
      properties:
        key:
          description: the type to be changed
          enum:
          - language
          - template
          - letterpaper
          - payPal
          example: template
          nullable: false
          type: string
        value:
          description: the id/value of the template/letterpaper/language/payPal.
          example: 573ef2706bd2d50366786471
          type: string
      required:
      - key
      - value
      title: Layout model
    Model_Order:
      description: Order model
      properties:
        id:
          description: The order id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The order object name
          nullable: false
          type: string
        mapAll:
          nullable: false
          type: boolean
        create:
          description: Date of order creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last order update
          format: date-time
          readOnly: true
          type: string
        orderNumber:
          description: The order number
          example: Offer-1000
          type: string
        contact:
          $ref: '#/components/schemas/Model_Order_contact'
        orderDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: false
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>status\
            \ of orders</a>\r\n    to see what the different status codes mean"
          enum:
          - 100
          - 200
          - 300
          - 500
          - 750
          - 1000
          example: 100
          nullable: false
          type: integer
        header:
          description: Normally consist of prefix plus the order number
          example: My Offer-1000
          nullable: false
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          example: header information
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          example: footer information
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_Order_addressCountry'
        deliveryTerms:
          description: Delivery terms of the order
          example: delivery terms
          nullable: true
          type: string
        paymentTerms:
          description: Payment terms of the order
          example: payment terms
          nullable: true
          type: string
        version:
          description: "Version of the order.<br>\r\n    Can be used if you have multiple\
            \ drafts for the same order.<br>\r\n    Should start with 0"
          example: 0
          nullable: false
          type: integer
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the order must not contain any vat"
          example: false
          nullable: false
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_Order_contactPerson'
        taxRate:
          description: Is overwritten by order position tax rates
          example: 19
          nullable: false
          type: number
        taxSet:
          $ref: '#/components/schemas/Model_Order_taxSet'
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: false
          type: string
        taxType:
          description: |-
            Tax type of the order.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: false
          type: string
        orderType:
          description: "Type of the order. For more information on the different types,\
            \ check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>this</a>\
            \ \r\n"
          enum:
          - AN
          - AB
          - LI
          example: AN
          nullable: false
          type: string
        sendDate:
          description: The date the order was sent to the customer
          format: date-time
          nullable: true
          type: string
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.<br>\r\n     Line breaks can be used and will\
            \ be displayed on the invoice pdf."
          example: name\nstreet\npostCode city
          nullable: true
          type: string
        currency:
          description: Currency used in the order. Needs to be currency code according
            to ISO-4217
          example: EUR
          nullable: false
          type: string
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          example: customer internal note
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the order. Otherwise gross amount"
          example: false
          nullable: false
          type: boolean
        sendType:
          description: "Type which was used to send the order. IMPORTANT: Please refer\
            \ to the order section of the\r\n     *     API-Overview to understand\
            \ how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          example: VPR
          nullable: true
          type: string
        origin:
          $ref: '#/components/schemas/Model_Order_origin'
      required:
      - addressCountry
      - contact
      - contactPerson
      - currency
      - header
      - mapAll
      - orderDate
      - orderNumber
      - status
      - taxRate
      - taxText
      - taxType
      - version
      title: Order model
      type: object
    Model_TagCreateResponse:
      description: tag model
      example:
        sevClient:
          objectName: SevClient
          id: "0"
        objectName: Tag
        create: 2000-01-23T04:56:07.000+00:00
        id: "1"
        tag:
          objectName: Tag
          id: "0"
        object:
          objectName: Object
          id: "0"
      properties:
        id:
          description: Id of the tag
          example: "1"
          readOnly: true
          type: string
        objectName:
          description: Internal object name which is 'Tag'.
          example: Tag
          readOnly: true
          type: string
        create:
          description: Date of tag creation
          format: date-time
          readOnly: true
          type: string
        tag:
          $ref: '#/components/schemas/Model_TagCreateResponse_tag'
        object:
          $ref: '#/components/schemas/Model_TagCreateResponse_object'
        sevClient:
          $ref: '#/components/schemas/Model_TagCreateResponse_sevClient'
      title: Tag model
    Model_CommunicationWay:
      description: Contact communication way model
      properties:
        id:
          description: The communication way id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The communication way object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of communication way creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last communication way update
          format: date-time
          readOnly: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_CommunicationWay_contact'
        type:
          description: Type of the communication way
          enum:
          - EMAIL
          - PHONE
          - WEB
          - MOBILE
          example: EMAIL
          type: string
        value:
          description: "The value of the communication way.<br>\r\n     For example\
            \ the phone number, e-mail address or website."
          type: string
        key:
          $ref: '#/components/schemas/Model_CommunicationWay_key'
        main:
          description: Defines whether the communication way is the main communication
            way for the contact.
          example: false
          nullable: true
          type: boolean
        sevClient:
          $ref: '#/components/schemas/Model_CommunicationWay_sevClient'
      required:
      - key
      - type
      - value
      title: CommunicationWay model
      type: object
    Model_VoucherUpdate:
      description: Voucher model
      properties:
        voucherDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        supplier:
          $ref: '#/components/schemas/Model_VoucherUpdate_supplier'
        supplierName:
          description: "The supplier name.<br>\r\n     The value you provide here\
            \ will determine what supplier name is shown for the voucher in case you\
            \ did not provide a supplier."
          example: John Snow
          nullable: true
          type: string
        description:
          description: The description of the voucher. Essentially the voucher number.
          example: Voucher-1000
          nullable: true
          type: string
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>status\
            \ of vouchers</a>\r\n    to see what the different status codes mean"
          enum:
          - 50
          - 100
          - 1000
          example: 50
          type: number
        paidAmount:
          description: Amount which has already been paid for this voucher by the
            customer
          format: float
          nullable: true
          readOnly: true
          type: number
        taxType:
          description: |-
            Tax type of the voucher.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          type: string
        creditDebit:
          description: Defines if your voucher is a credit (C) or debit (D)
          enum:
          - C
          - D
          example: C
          type: string
        voucherType:
          description: "Type of the voucher. For more information on the different\
            \ types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>this</a>\r\
            \n"
          enum:
          - VOU
          - RV
          example: VOU
          type: string
        currency:
          description: "specifies which currency the voucher should have. Attention:\
            \ If the currency differs from the default currency stored in the account,\
            \ then either the \"propertyForeignCurrencyDeadline\" or \"propertyExchangeRate\"\
            \ parameter must be specified. If both parameters are specified, then\
            \ the \"propertyForeignCurrencyDeadline\" parameter is preferred"
          example: EUR
          nullable: true
          type: string
        propertyForeignCurrencyDeadline:
          description: Defines the exchange rate day and and then the exchange rate
            is set from sevDesk. Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        propertyExchangeRate:
          description: Defines the exchange rate
          example: 0.8912
          format: float
          nullable: true
          type: number
        taxSet:
          $ref: '#/components/schemas/Model_VoucherUpdate_taxSet'
        paymentDeadline:
          description: Payment deadline of the voucher.
          format: date-time
          nullable: true
          type: string
        deliveryDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          type: string
        deliveryDateUntil:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
          example: null
        document:
          $ref: '#/components/schemas/Model_VoucherUpdate_document'
        costCentre:
          $ref: '#/components/schemas/Model_VoucherUpdate_costCentre'
      title: Voucher model
    Model_AccountingContact:
      description: Accounting contact model
      properties:
        contact:
          $ref: '#/components/schemas/Model_AccountingContact_contact'
        debitorNumber:
          description: Debitor number of the accounting contact.
          nullable: true
          type: integer
        creditorNumber:
          description: Creditor number of the accounting contact.
          nullable: true
          type: integer
      required:
      - contact
      title: AccountingContact model
      type: object
    Model_ContactCustomFieldSettingResponse:
      description: contact fields model
      example:
        identifier: identifier
        sevClient:
          objectName: SevClient
          id: "0"
        name: name
        objectName: ContactCustomFieldSetting
        create: 2000-01-23T04:56:07.000+00:00
        update: 2000-01-23T04:56:07.000+00:00
        description: description
        id: "1"
      properties:
        id:
          description: Id of the contact field
          example: "1"
          readOnly: true
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomFieldSetting'.
          example: ContactCustomFieldSetting
          readOnly: true
          type: string
        create:
          description: Date of contact field creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of contact field updated
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_ContactCustomFieldSettingResponse_sevClient'
        name:
          description: name of the contact fields
          readOnly: true
          type: string
        identifier:
          description: Unique identifier for the contact field
          readOnly: true
          type: string
        description:
          description: The description of the contact field
          readOnly: true
          type: string
      title: contact fields model
    Model_InvoicePos:
      description: Invoice position model
      properties:
        id:
          description: The invoice position id. <span style='color:red'>Required</span>
            if you want to update an invoice position for an existing invoice
          nullable: false
          type: integer
          example: null
        objectName:
          description: The invoice position object name
          example: InvoicePos
          nullable: false
          type: string
        mapAll:
          nullable: false
          type: boolean
        create:
          description: Date of invoice position creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last invoice position update
          format: date-time
          readOnly: true
          type: string
        invoice:
          $ref: '#/components/schemas/Model_InvoicePos_invoice'
        part:
          $ref: '#/components/schemas/Model_InvoicePos_part'
        quantity:
          description: Quantity of the article/part
          example: 1
          format: float
          nullable: false
          type: number
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: 100
          format: float
          nullable: true
          type: number
        name:
          description: Name of the article/part.
          example: Dragonglass
          nullable: true
          type: string
        unity:
          $ref: '#/components/schemas/Model_InvoicePos_unity'
        sevClient:
          $ref: '#/components/schemas/Model_InvoicePos_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to order multiple
            positions.
          nullable: true
          type: integer
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          format: float
          nullable: true
          type: number
        taxRate:
          description: Tax rate of the position.
          example: 19
          format: float
          nullable: false
          type: number
        sumDiscount:
          description: Discount sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        sumNetAccounting:
          description: Net accounting sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        sumTaxAccounting:
          description: Tax accounting sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        sumGrossAccounting:
          description: Gross accounting sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        priceNet:
          description: Net price of the part
          format: float
          nullable: true
          readOnly: true
          type: number
        priceGross:
          description: Gross price of the part
          example: 100
          format: float
          nullable: true
          type: number
        priceTax:
          description: Tax on the price of the part
          format: float
          nullable: true
          type: number
      required:
      - mapAll
      - objectName
      - quantity
      - taxRate
      - unity
      title: Invoice position model
      type: object
    Model_CommunicationWayUpdate:
      description: Contact communication way model
      properties:
        contact:
          $ref: '#/components/schemas/Model_CommunicationWayUpdate_contact'
        type:
          description: Type of the communication way
          enum:
          - EMAIL
          - PHONE
          - WEB
          - MOBILE
          example: EMAIL
          type: string
        value:
          description: "The value of the communication way.<br>\r\n     For example\
            \ the phone number, e-mail address or website."
          type: string
        key:
          $ref: '#/components/schemas/Model_CommunicationWayUpdate_key'
        main:
          description: Defines whether the communication way is the main communication
            way for the contact.
          example: false
          nullable: true
          type: boolean
      title: CommunicationWay model
      type: object
    Model_EmailOrder:
      description: Email model
      example:
        cc: cc
        bcc: bcc
        sevClient:
          objectName: objectName
          id: 1
        subject: subject
        update: 2000-01-23T04:56:07.000+00:00
        arrived: 2000-01-23T04:56:07.000+00:00
        objectName: objectName
        create: 2000-01-23T04:56:07.000+00:00
        from: from
        id: 0
        to: to
        text: text
        object:
          objectName: objectName
          id: 6
      properties:
        id:
          description: The email id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The email object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of mail creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last mail update
          format: date-time
          readOnly: true
          type: string
        object:
          $ref: '#/components/schemas/Model_EmailOrder_object'
        from:
          description: The sender of the email
          nullable: false
          type: string
        to:
          description: The recipient of the email
          nullable: false
          type: string
        subject:
          description: The subject of the email
          nullable: false
          type: string
        text:
          description: The text of the email
          nullable: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_EmailOrder_sevClient'
        cc:
          description: A list of mail addresses which are in the cc
          nullable: true
          type: string
        bcc:
          description: A list of mail addresses which are in the bcc
          nullable: true
          type: string
        arrived:
          description: Date the mail arrived
          format: date-time
          nullable: true
          type: string
      required:
      - from
      - subject
      - to
      title: Email model
      type: object
    Model_InvoiceUpdate:
      description: Invoice model
      properties:
        id:
          description: The invoice id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The invoice object name
          nullable: false
          readOnly: true
          type: string
        invoiceNumber:
          description: The invoice number
          example: RE-1002
          nullable: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_InvoiceUpdate_contact'
        create:
          description: Date of invoice creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last invoice update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_InvoiceUpdate_sevClient'
        invoiceDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          example: 01.01.2020
          nullable: true
          type: string
        header:
          description: Normally consist of prefix plus the invoice number
          nullable: true
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        timeToPay:
          description: The time the customer has to pay the invoice in days
          nullable: true
          type: integer
        discountTime:
          description: "If a value other than zero is used for the discount attribute,\r\
            \n    you need to specify the amount of days for which the discount is\
            \ granted."
          nullable: true
          type: integer
        discount:
          description: "If you want to give a discount, define the percentage here.\
            \ Otherwise provide zero as value"
          example: 0
          nullable: true
          type: integer
        addressCountry:
          $ref: '#/components/schemas/Model_creditNote_addressCountry'
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        createUser:
          $ref: '#/components/schemas/Model_creditNote_createUser'
        deliveryDate:
          description: Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in our\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>Types\
            \ and status of invoice</a>\r\n     to see what the different status codes\
            \ mean"
          enum:
          - "50"
          - "100"
          - "200"
          - "1000"
          example: "100"
          nullable: true
          type: string
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the invoice must not contain any vat"
          example: false
          nullable: true
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_InvoiceUpdate_contactPerson'
        taxRate:
          description: Is overwritten by invoice position tax rates
          example: 19
          format: float
          nullable: true
          type: number
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: true
          type: string
        dunningLevel:
          description: "Defines how many reminders have already been sent for the\
            \ invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented\
            \ by one every time another reminder is sent."
          nullable: true
          type: integer
        taxType:
          description: |-
            Tax type of the invoice.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Kleinunternehmer
            Tax rates are heavily connected to the tax type used.
          enum:
          - default
          - eu
          - noteu
          - custom
          example: default
          nullable: true
          type: string
        paymentMethod:
          $ref: '#/components/schemas/Model_InvoiceUpdate_paymentMethod'
        costCentre:
          $ref: '#/components/schemas/Model_InvoiceUpdate_costCentre'
        sendDate:
          description: The date the invoice was sent to the customer
          format: date-time
          nullable: true
          type: string
        origin:
          $ref: '#/components/schemas/Model_InvoiceUpdate_origin'
        invoiceType:
          description: "Type of the invoice. For more information on the different\
            \ types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>this</a>\
            \ section\r\n"
          enum:
          - RE
          - WKR
          - SR
          - MA
          - TR
          - ER
          example: RE
          nullable: true
          type: string
        accountIntervall:
          description: "The interval in which recurring invoices are due as ISO-8601\
            \ duration.<br>\r\n     Necessary attribute for all recurring invoices."
          nullable: true
          type: string
        accountNextInvoice:
          description: Timestamp when the next invoice will be generated by this recurring
            invoice.
          nullable: true
          type: integer
        reminderTotal:
          description: Total reminder amount
          format: float
          nullable: true
          type: number
        reminderDebit:
          description: Debit of the reminder
          format: float
          nullable: true
          type: number
        reminderDeadline:
          description: Deadline of the reminder as timestamp
          format: date-time
          nullable: true
          type: integer
        reminderCharge:
          description: The additional reminder charge
          format: float
          nullable: true
          type: number
        taxSet:
          $ref: '#/components/schemas/Model_InvoiceUpdate_taxSet'
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.\r\n     * Line breaks can be used and will be\
            \ displayed on the invoice pdf."
          example: |-
            name
            street
            postCode city
          nullable: true
          type: string
        currency:
          description: Currency used in the invoice. Needs to be currency code according
            to ISO-4217
          example: EUR
          nullable: true
          type: string
        sumNet:
          description: Net sum of the invoice
          format: float
          nullable: true
          readOnly: true
          type: number
        sumTax:
          description: Tax sum of the invoice
          format: float
          nullable: true
          readOnly: true
          type: number
        sumGross:
          description: Gross sum of the invoice
          format: float
          nullable: true
          readOnly: true
          type: number
        sumDiscounts:
          description: Sum of all discounts in the invoice
          format: float
          nullable: true
          readOnly: true
          type: number
        sumNetForeignCurrency:
          description: Net sum of the invoice in the foreign currency
          format: float
          nullable: true
          readOnly: true
          type: number
        sumTaxForeignCurrency:
          description: Tax sum of the invoice in the foreign currency
          format: float
          nullable: true
          readOnly: true
          type: number
        sumGrossForeignCurrency:
          description: Gross sum of the invoice in the foreign currency
          format: float
          nullable: true
          readOnly: true
          type: number
        sumDiscountsForeignCurrency:
          description: Discounts sum of the invoice in the foreign currency
          format: float
          nullable: true
          readOnly: true
          type: number
        sumNetAccounting:
          description: Net accounting sum of the invoice. Is usually the same as sumNet
          format: float
          nullable: true
          readOnly: true
          type: number
        sumTaxAccounting:
          description: Tax accounting sum of the invoice. Is usually the same as sumTax
          format: float
          nullable: true
          readOnly: true
          type: number
        sumGrossAccounting:
          description: Gross accounting sum of the invoice. Is usually the same as
            sumGross
          format: float
          nullable: true
          readOnly: true
          type: number
        paidAmount:
          description: Amount which has already been paid for this invoice by the
            customer
          format: float
          nullable: true
          readOnly: true
          type: number
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the invoice. Otherwise gross amount"
          example: false
          nullable: true
          type: boolean
        enshrined:
          description: Defines if and when invoice was enshrined. Enshrined invoices
            can not be manipulated.
          format: date-time
          nullable: true
          type: string
        sendType:
          description: "Type which was used to send the invoice. IMPORTANT: Please\
            \ refer to the invoice section of the\r\n     *     API-Overview to understand\
            \ how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
        deliveryDateUntil:
          description: "If the delivery date should be a time range, another timestamp\
            \ can be provided in this attribute\r\n     * to define a range from timestamp\
            \ used in deliveryDate attribute to the timestamp used here."
          nullable: true
          type: integer
        datevConnectOnline:
          description: Internal attribute
          nullable: true
          type: object
        sendPaymentReceivedNotificationDate:
          description: Internal attribute
          nullable: true
          type: integer
      title: Invoice model
      type: object
    Model_InvoiceResponse:
      description: Invoice model
      example:
        sumTax: "19"
        sumGrossAccounting: "0"
        sendDate: 2000-01-23T04:56:07.000+00:00
        discount: "0"
        reminderDebit: "0"
        reminderTotal: "0"
        reminderCharge: "0"
        contact:
          objectName: Contact
          id: "0"
        sumDiscounts: "0"
        dunningLevel: "0"
        create: 2000-01-23T04:56:07.000+00:00
        invoiceType: RE
        sumNetForeignCurrency: "0"
        id: "0"
        taxType: default
        addressCountry:
          objectName: StaticCountry
          id: "1"
        costCentre:
          objectName: CostCentre
          id: "0"
        taxRate: "19"
        accountNextInvoice: "1647259198"
        sumNet: "100"
        customerInternalNote: customerInternalNote
        taxSet:
          objectName: TaxSet
          id: "0"
        sendType: VPR
        header: My RE-1000
        paymentMethod:
          objectName: PaymentMethod
          id: "0"
        deliveryDateUntil: "0"
        sumTaxAccounting: "0"
        sumDiscountsForeignCurrency: "0"
        paidAmount: 0
        status: "100"
        footText: footer information
        accountIntervall: 2022-03-14
        reminderDeadline: 2000-01-23T04:56:07.000+00:00
        origin:
          objectName: objectName
          id: "0"
        sumGross: "119"
        update: 2000-01-23T04:56:07.000+00:00
        contactPerson:
          objectName: SevUser
          id: "0"
        sumTaxForeignCurrency: "0"
        headText: header information
        sumGrossForeignCurrency: "0"
        sumNetAccounting: "0"
        invoiceNumber: RE-1000
        showNet: false
        sendPaymentReceivedNotificationDate: "0"
        smallSettlement: false
        currency: EUR
        deliveryDate: 2000-01-23T04:56:07.000+00:00
        taxText: Umsatzsteuer 19%
        address: |-
          name
          street
          postCode city
        sevClient:
          objectName: SevClient
          id: "0"
        enshrined: 2000-01-23T04:56:07.000+00:00
        invoiceDate: 01.01.20
        datevConnectOnline: "{}"
        discountTime: "0"
        timeToPay: "10"
        objectName: Invoice
        createUser:
          objectName: SevUser
          id: "0"
        payDate: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The invoice id
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: The invoice object name
          example: Invoice
          readOnly: true
          type: string
        invoiceNumber:
          description: The invoice number
          example: RE-1000
          readOnly: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_InvoiceResponse_contact'
        create:
          description: Date of invoice creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last invoice update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_ContactCustomFieldSettingResponse_sevClient'
        invoiceDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          example: 01.01.20
          readOnly: true
          type: string
        header:
          description: Normally consist of prefix plus the invoice number
          example: My RE-1000
          readOnly: true
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          example: header information
          readOnly: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          example: footer information
          readOnly: true
          type: string
        timeToPay:
          description: The time the customer has to pay the invoice in days
          example: "10"
          readOnly: true
          type: string
        discountTime:
          description: "If a value other than zero is used for the discount attribute,\r\
            \n    you need to specify the amount of days for which the discount is\
            \ granted."
          example: "0"
          readOnly: true
          type: string
        discount:
          description: "If you want to give a discount, define the percentage here.\
            \ Otherwise provide zero as value"
          example: "0"
          readOnly: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_InvoiceResponse_addressCountry'
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          format: date-time
          readOnly: true
          type: string
        createUser:
          $ref: '#/components/schemas/Model_InvoiceResponse_createUser'
        deliveryDate:
          description: Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          format: date-time
          readOnly: true
          type: string
        status:
          description: "Please have a look in our\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>Types\
            \ and status of invoices</a>\r\n     to see what the different status\
            \ codes mean"
          enum:
          - "50"
          - "100"
          - "200"
          - "1000"
          example: "100"
          readOnly: true
          type: string
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the invoice must not contain any vat"
          example: false
          readOnly: true
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_InvoiceResponse_contactPerson'
        taxRate:
          description: Is overwritten by invoice position tax rates
          example: "19"
          readOnly: true
          type: string
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          readOnly: true
          type: string
        dunningLevel:
          description: "Defines how many reminders have already been sent for the\
            \ invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented\
            \ by one every time another reminder is sent."
          example: "0"
          readOnly: true
          type: string
        taxType:
          description: |-
            Tax type of the invoice.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          enum:
          - default
          - eu
          - noteu
          - custom
          example: default
          readOnly: true
          type: string
        paymentMethod:
          $ref: '#/components/schemas/Model_InvoiceResponse_paymentMethod'
        costCentre:
          $ref: '#/components/schemas/Model_InvoiceResponse_costCentre'
        sendDate:
          description: The date the invoice was sent to the customer
          format: date-time
          readOnly: true
          type: string
        origin:
          $ref: '#/components/schemas/Model_InvoiceResponse_origin'
        invoiceType:
          description: "Type of the invoice. For more information on the different\
            \ types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>this</a>\
            \ section\r\n"
          enum:
          - RE
          - WKR
          - SR
          - MA
          - TR
          - ER
          example: RE
          readOnly: true
          type: string
        accountIntervall:
          description: "The interval in which recurring invoices are due as ISO-8601\
            \ duration.<br>\r\n     Necessary attribute for all recurring invoices."
          example: 2022-03-14
          readOnly: true
          type: string
        accountNextInvoice:
          description: Timestamp when the next invoice will be generated by this recurring
            invoice.
          example: "1647259198"
          readOnly: true
          type: string
        reminderTotal:
          description: Total reminder amount
          example: "0"
          readOnly: true
          type: string
        reminderDebit:
          description: Debit of the reminder
          example: "0"
          readOnly: true
          type: string
        reminderDeadline:
          description: Deadline of the reminder as timestamp
          format: date-time
          readOnly: true
          type: string
        reminderCharge:
          description: The additional reminder charge
          example: "0"
          readOnly: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_InvoiceResponse_taxSet'
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.\r\n     * Line breaks can be used and will be\
            \ displayed on the invoice pdf."
          example: |-
            name
            street
            postCode city
          readOnly: true
          type: string
        currency:
          description: Currency used in the invoice. Needs to be currency code according
            to ISO-4217
          example: EUR
          readOnly: true
          type: string
        sumNet:
          description: Net sum of the invoice
          example: "100"
          readOnly: true
          type: string
        sumTax:
          description: Tax sum of the invoice
          example: "19"
          readOnly: true
          type: string
        sumGross:
          description: Gross sum of the invoice
          example: "119"
          readOnly: true
          type: string
        sumDiscounts:
          description: Sum of all discounts in the invoice
          example: "0"
          readOnly: true
          type: string
        sumNetForeignCurrency:
          description: Net sum of the invoice in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumTaxForeignCurrency:
          description: Tax sum of the invoice in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumGrossForeignCurrency:
          description: Gross sum of the invoice in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumDiscountsForeignCurrency:
          description: Discounts sum of the invoice in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumNetAccounting:
          description: Net accounting sum of the invoice. Is usually the same as sumNet
          example: "0"
          readOnly: true
          type: string
        sumTaxAccounting:
          description: Tax accounting sum of the invoice. Is usually the same as sumTax
          example: "0"
          readOnly: true
          type: string
        sumGrossAccounting:
          description: Gross accounting sum of the invoice. Is usually the same as
            sumGross
          example: "0"
          readOnly: true
          type: string
        paidAmount:
          description: Amount which has already been paid for this invoice by the
            customer
          example: 0
          format: float
          readOnly: true
          type: number
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          readOnly: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the invoice. Otherwise gross amount"
          example: false
          readOnly: true
          type: boolean
        enshrined:
          description: Defines if and when invoice was enshrined. Enshrined invoices
            can not be manipulated.
          format: date-time
          readOnly: true
          type: string
        sendType:
          description: "Type which was used to send the invoice. IMPORTANT: Please\
            \ refer to the invoice section of the\r\n     *     API-Overview to understand\
            \ how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          readOnly: true
          type: string
        deliveryDateUntil:
          description: "If the delivery date should be a time range, another timestamp\
            \ can be provided in this attribute\r\n     * to define a range from timestamp\
            \ used in deliveryDate attribute to the timestamp used here."
          example: "0"
          readOnly: true
          type: string
        datevConnectOnline:
          description: Internal attribute
          readOnly: true
          type: object
        sendPaymentReceivedNotificationDate:
          description: Internal attribute
          example: "0"
          readOnly: true
          type: string
      title: Invoice model
      type: object
    Model_ContactCustomField:
      description: contact fields model
      properties:
        contact:
          $ref: '#/components/schemas/Model_ContactCustomField_contact'
        contactCustomFieldSetting:
          $ref: '#/components/schemas/Model_ContactCustomField_contactCustomFieldSetting'
        value:
          description: The value of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomField'.
          example: ContactCustomField
          type: string
      required:
      - contact
      - contactCustomFieldSetting
      - objectName
      - value
      title: contact fields model
    Model_TagResponse:
      description: tag model
      example:
        sevClient:
          objectName: SevClient
          id: "0"
        name: name
        objectName: Tag
        create: 2000-01-23T04:56:07.000+00:00
        id: "1"
      properties:
        id:
          description: Id of the tag
          example: "1"
          readOnly: true
          type: string
        objectName:
          description: Internal object name which is 'Tag'.
          example: Tag
          readOnly: true
          type: string
        create:
          description: Date of tag creation
          format: date-time
          readOnly: true
          type: string
        name:
          description: name of the tag
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_TagCreateResponse_sevClient'
      title: Tag model
    Model_CheckAccountUpdate:
      description: CheckAccount model. Responsible for the payment accounts.
      properties:
        name:
          description: Name of the check account
          example: Iron Bank
          type: string
        type:
          description: "The type of the check account. Account with a CSV or MT940\
            \ import are regarded as online.<br>\r\n     Apart from that, created\
            \ check accounts over the API need to be offline, as online accounts with\
            \ an active connection\r\n     to a bank application can not be managed\
            \ over the API."
          enum:
          - online
          - offline
          example: online
          type: string
        importType:
          description: Import type. Transactions can be imported by this method on
            the check account.
          enum:
          - CSV
          - MT940
          - null
          example: CSV
          nullable: true
          type: string
        currency:
          description: The currency of the check account.
          example: EUR
          type: string
        defaultAccount:
          default: 0
          description: Defines if this check account is the default account.
          enum:
          - 0
          - 1
          type: integer
        status:
          default: 100
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          enum:
          - 0
          - 100
          type: integer
        autoMapTransactions:
          default: 1
          description: Defines if transactions on this account are automatically mapped
            to invoice and vouchers when imported if possible.
          nullable: true
          type: integer
      title: CheckAccount model
      type: object
    Model_creditNotePos:
      description: creditNote position model
      properties:
        id:
          description: The creditNote position id.
          nullable: true
          readOnly: true
          type: integer
        objectName:
          description: The creditNote position object name
          nullable: false
          type: string
        mapAll:
          nullable: false
          type: boolean
        create:
          description: Date of creditNote position creation
          example: 01.01.2020
          readOnly: true
          type: string
        update:
          description: Date of last creditNote position update
          example: 01.01.2020
          readOnly: true
          type: string
        creditNote:
          $ref: '#/components/schemas/Model_creditNotePos_creditNote'
        part:
          $ref: '#/components/schemas/Model_InvoicePos_part'
        quantity:
          description: Quantity of the article/part
          example: 1
          format: float
          nullable: false
          type: number
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: 100
          format: float
          nullable: true
          type: number
        priceNet:
          description: Net price of the part
          format: float
          nullable: true
          readOnly: true
          type: number
        priceTax:
          description: Tax on the price of the part
          example: 19
          format: float
          nullable: true
          type: number
        priceGross:
          description: Gross price of the part
          example: 119
          format: float
          nullable: true
          type: number
        name:
          description: Name of the article/part.
          example: Dragonglass
          nullable: true
          type: string
        unity:
          $ref: '#/components/schemas/Model_creditNotePos_unity'
        sevClient:
          $ref: '#/components/schemas/Model_creditNotePos_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to creditNote
            multiple positions.
          example: 1
          nullable: true
          type: integer
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          format: float
          nullable: true
          type: number
        optional:
          description: Defines if the position is optional.
          nullable: true
          type: boolean
        taxRate:
          description: Tax rate of the position.
          example: 19
          format: float
          nullable: false
          type: number
        sumDiscount:
          description: Discount sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
      required:
      - mapAll
      - objectName
      - quantity
      - taxRate
      - unity
      title: creditNote position model
      type: object
    saveVoucher:
      properties:
        voucher:
          $ref: '#/components/schemas/Model_Voucher'
        voucherPosSave:
          $ref: '#/components/schemas/Model_VoucherPos'
        voucherPosDelete:
          $ref: '#/components/schemas/saveVoucher_voucherPosDelete'
        filename:
          description: Filename of a previously upload file which should be attached.
          format: binary
          type: string
      required:
      - voucher
      - voucherPos
      type: object
    saveOrderResponse:
      example:
        orderPos:
          quantity: "1"
          sevClient:
            objectName: objectName
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          discount: discount
          optional: true
          positionNumber: "1"
          priceNet: "100"
          priceGross: "119"
          unity:
            objectName: Unity
            id: "0"
          taxRate: "19"
          price: "100"
          name: Dragonglass
          objectName: OrderPos
          create: 2000-01-23T04:56:07.000+00:00
          id: "0"
          priceTax: "19"
          text: text
          order:
            objectName: Order
            id: "0"
          sumDiscount: sumDiscount
        order:
          sumTax: sumTax
          orderType: AN
          orderNumber: Offer-1000
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: Order
            id: "0"
          sumGross: sumGross
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: sumTaxForeignCurrency
          headText: headText
          sumGrossForeignCurrency: sumGrossForeignCurrency
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: sumDiscounts
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: sumNetForeignCurrency
          id: "0"
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: objectName
            id: id
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          version: "0"
          taxRate: "19"
          sumNet: sumNet
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: Order
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          orderDate: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: sumDiscountsForeignCurrency
          status: "100"
      properties:
        order:
          $ref: '#/components/schemas/Model_OrderResponse'
        orderPos:
          $ref: '#/components/schemas/Model_OrderPosResponse'
      type: object
    saveCreditNoteResponse:
      example:
        voucherPos:
          quantity: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 01.01.2020
          discount: "0"
          optional: true
          positionNumber: "1"
          priceNet: "100"
          priceGross: "119"
          creditNote:
            objectName: creditNote
            id: "0"
          unity:
            objectName: Unity
            id: "0"
          taxRate: "19"
          price: "100"
          name: Dragonglass
          objectName: objectName
          create: 01.01.2020
          id: "0"
          priceTax: "19"
          text: text
          sumDiscount: "0"
        filename: ""
        voucher:
          sumTax: "0"
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          creditNoteNumber: Offer-1000
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: headText
          sumGrossForeignCurrency: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: "0"
          id: "0"
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          creditNoteType: CN
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          creditNoteDate: 2000-01-23T04:56:07.000+00:00
          version: "0"
          taxRate: "19"
          sumNet: "0"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: objectName
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          sumDiscountsForeignCurrency: "0"
          status: "100"
      properties:
        voucher:
          $ref: '#/components/schemas/Model_creditNoteResponse'
        voucherPos:
          $ref: '#/components/schemas/Model_creditNotePosResponse'
        filename:
          description: Filename of a previously upload file which should be attached.
          format: binary
          type: string
      type: object
    Model_ContactCustomFieldSetting:
      description: contact field settings model
      properties:
        name:
          description: name of the contact fields
          nullable: false
          type: string
        description:
          description: The description of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomFieldSetting'.
          example: ContactCustomFieldSetting
          type: string
      required:
      - name
      title: contact field settings model
    Model_ContactResponse:
      description: Contact model
      example:
        birthday: 2000-01-23
        parent:
          objectName: Contact
          id: "0"
        gender: gender
        familyname: Snow
        defaultCashbackPercent: string
        exemptVat: "false"
        update: 2000-01-23T04:56:07.000+00:00
        description: Rightful king of the seven kingdoms
        defaultDiscountAmount: string
        surename: John
        defaultCashbackTime: string
        titel: Commander
        create: 2000-01-23T04:56:07.000+00:00
        defaultTimeToPay: string
        id: "0"
        taxOffice: string
        taxType: default
        bankAccount: bankAccount
        bankNumber: bankNumber
        defaultDiscountPercentage: "false"
        additionalInformation: string
        sevClient:
          objectName: SevClient
          id: 0
        buyerReference: string
        taxNumber: taxNumber
        governmentAgency: "false"
        customerNumber: Customer-1337
        academicTitle: academicTitle
        taxSet:
          objectName: TaxSet
          id: "0"
        name: string
        objectName: Contact
        category:
          objectName: Category
          id: "3"
        name2: Targaryen
        status: "100"
        vatNumber: vatNumber
      properties:
        id:
          description: The contact id
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: The contact object name
          example: Contact
          readOnly: true
          type: string
        create:
          description: Date of contact creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last contact update
          format: date-time
          readOnly: true
          type: string
        name:
          description: |-
            The organization name.<br>
            Be aware that the type of contact will depend on this attribute.<br>
            If it holds a value, the contact will be regarded as an organization.
          example: string
          readOnly: true
          type: string
        status:
          description: Defines the status of the contact. 100 <-> Lead - 500 <-> Pending
            - 1000 <-> Active.
          example: "100"
          readOnly: true
          type: string
        customerNumber:
          description: The customer number
          example: Customer-1337
          readOnly: true
          type: string
        parent:
          $ref: '#/components/schemas/Model_ContactResponse_parent'
        surename:
          description: |-
            The <b>first</b> name of the contact.<br>
            Yeah... not quite right in literally every way. We know.<br>
            Not to be used for organizations.
          example: John
          readOnly: true
          type: string
        familyname:
          description: |-
            The last name of the contact.<br>
            Not to be used for organizations.
          example: Snow
          readOnly: true
          type: string
        titel:
          description: |-
            A non-academic title for the contact.
            Not to be used for organizations.
          example: Commander
          readOnly: true
          type: string
        category:
          $ref: '#/components/schemas/Model_ContactResponse_category'
        description:
          description: A description for the contact.
          example: Rightful king of the seven kingdoms
          readOnly: true
          type: string
        academicTitle:
          description: |-
            A academic title for the contact.
            Not to be used for organizations.
          readOnly: true
          type: string
        gender:
          description: |-
            Gender of the contact.<br>
            Not to be used for organizations.
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_ContactResponse_sevClient'
        name2:
          description: |-
            Second name of the contact.<br>
            Not to be used for organizations.
          example: Targaryen
          readOnly: true
          type: string
        birthday:
          description: |-
            Birthday of the contact.<br>
            Not to be used for organizations.
          format: date
          readOnly: true
          type: string
        vatNumber:
          description: Vat number of the contact.
          readOnly: true
          type: string
        bankAccount:
          description: Bank account number (IBAN) of the contact.
          readOnly: true
          type: string
        bankNumber:
          description: Bank number of the bank used by the contact.
          readOnly: true
          type: string
        defaultCashbackTime:
          description: Absolute time in days which the contact has to pay his invoices
            and subsequently get a cashback.
          example: string
          readOnly: true
          type: string
        defaultCashbackPercent:
          description: Percentage of the invoice sum the contact gets back if he payed
            invoices in time.
          example: string
          format: float
          readOnly: true
          type: string
        defaultTimeToPay:
          description: The payment goal in days which is set for every invoice of
            the contact.
          example: string
          readOnly: true
          type: string
        taxNumber:
          description: The tax number of the contact.
          readOnly: true
          type: string
        taxOffice:
          description: The tax office of the contact (only for greek customers).
          example: string
          readOnly: true
          type: string
        exemptVat:
          description: Defines if the contact is freed from paying vat.
          example: "false"
          readOnly: true
          type: string
        taxType:
          description: Defines which tax regulation the contact is using.
          enum:
          - default
          - eu
          - noteu
          - custom
          - ss
          readOnly: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_ContactResponse_taxSet'
        defaultDiscountAmount:
          description: |-
            The default discount the contact gets for every invoice.<br>
            Depending on defaultDiscountPercentage attribute, in percent or absolute value.
          example: string
          format: float
          readOnly: true
          type: string
        defaultDiscountPercentage:
          description: Defines if the discount is a percentage (true) or an absolute
            value (false).
          example: "false"
          readOnly: true
          type: string
        buyerReference:
          description: Buyer reference of the contact.
          example: string
          readOnly: true
          type: string
        governmentAgency:
          description: Defines whether the contact is a government agency (true) or
            not (false).
          example: "false"
          readOnly: true
          type: string
        additionalInformation:
          deprecated: true
          description: Additional information stored for the contact.
          example: string
          readOnly: true
          type: string
      title: Contact model
      type: object
    Model_ContactAddress:
      description: ContactAddress model
      properties:
        id:
          description: The contact address id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The contact address object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of contact address creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last contact address update
          format: date-time
          readOnly: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_ContactAddress_contact'
        street:
          description: Street name
          example: South road 15
          nullable: true
          type: string
        zip:
          description: Zib code
          example: "12345"
          nullable: true
          type: string
        city:
          description: City name
          example: The North
          nullable: true
          type: string
        country:
          $ref: '#/components/schemas/Model_ContactAddress_country'
        category:
          $ref: '#/components/schemas/Model_ContactAddress_category'
        name:
          description: Name in address
          example: John Snow
          nullable: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_ContactAddress_sevClient'
        name2:
          description: Second name in address
          example: Targaryen
          type: string
        name3:
          description: Third name in address
          nullable: true
          type: string
        name4:
          description: Fourth name in address
          nullable: true
          type: string
      required:
      - contact
      - country
      title: Contact address
      type: object
    Model_Part:
      description: Part model
      example:
        sevClient:
          objectName: objectName
          id: 1
        stockEnabled: false
        update: 2000-01-23T04:56:07.000+00:00
        priceNet: 100
        priceGross: 119
        pricePurchase: 50
        internalComment: internalComment
        unity:
          objectName: Unity
          id: 1
        taxRate: 19
        price: 100
        name: Dragonglass
        objectName: objectName
        create: 2000-01-23T04:56:07.000+00:00
        partNumber: Part-1000
        id: 0
        text: text
        category:
          objectName: Category
          id: 6
        stock: 10000
        status: 100
      properties:
        id:
          description: The part id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The part object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of part creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last part update
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the part
          example: Dragonglass
          type: string
        partNumber:
          description: The part number
          example: Part-1000
          type: string
        text:
          description: A text describing the part
          nullable: true
          type: string
        category:
          $ref: '#/components/schemas/Model_Part_category'
        stock:
          description: The stock of the part
          example: 10000
          format: float
          type: number
        stockEnabled:
          description: Defines if the stock should be enabled
          example: false
          nullable: false
          type: boolean
        unity:
          $ref: '#/components/schemas/Model_Part_unity'
        price:
          description: "Net price for which the part is sold. we will change this\
            \ parameter so that the gross price is calculated automatically, until\
            \ then the priceGross parameter must be used."
          example: 100
          format: float
          nullable: true
          type: number
        priceNet:
          description: Net price for which the part is sold
          example: 100
          format: float
          nullable: true
          type: number
        priceGross:
          description: Gross price for which the part is sold
          example: 119
          format: float
          nullable: true
          type: number
        sevClient:
          $ref: '#/components/schemas/Model_Part_sevClient'
        pricePurchase:
          description: Purchase price of the part
          example: 50
          format: float
          nullable: true
          type: number
        taxRate:
          description: Tax rate of the part
          example: 19
          format: float
          type: number
        status:
          description: Status of the part. 50 <-> Inactive - 100 <-> Active
          enum:
          - 50
          - 100
          example: 100
          nullable: true
          type: integer
        internalComment:
          description: "An internal comment for the part.<br>\r\n     Does not appear\
            \ on invoices and orders."
          nullable: true
          type: string
      required:
      - name
      - partNumber
      - stock
      - taxRate
      - unity
      title: Part model
      type: object
    Model_PartUpdate:
      description: Part model
      properties:
        id:
          description: The part id
          nullable: true
          readOnly: true
          type: integer
        objectName:
          description: The part object name
          nullable: true
          readOnly: true
          type: string
        create:
          description: Date of part creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last part update
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the part
          example: Dragonglass
          type: string
        partNumber:
          description: The part number
          example: Part-1000
          type: string
        text:
          description: A text describing the part
          nullable: true
          type: string
        category:
          $ref: '#/components/schemas/Model_Part_category'
        stock:
          description: The stock of the part
          example: 10000
          format: float
          type: number
        stockEnabled:
          description: Defines if the stock should be enabled
          example: false
          nullable: true
          type: boolean
        unity:
          $ref: '#/components/schemas/Model_Part_unity'
        price:
          description: "Net price for which the part is sold. we will change this\
            \ parameter so that the gross price is calculated automatically, until\
            \ then the priceGross parameter must be used."
          example: 100
          format: float
          nullable: true
          type: number
        priceNet:
          description: Net price for which the part is sold
          example: 100
          format: float
          nullable: true
          type: number
        priceGross:
          description: Gross price for which the part is sold
          example: 119
          format: float
          nullable: true
          type: number
        sevClient:
          $ref: '#/components/schemas/Model_Part_sevClient'
        pricePurchase:
          description: Purchase price of the part
          example: 50
          format: float
          nullable: true
          type: number
        taxRate:
          description: Tax rate of the part
          example: 19
          format: float
          type: number
        status:
          description: Status of the part. 50 <-> Inactive - 100 <-> Active
          enum:
          - 50
          - 100
          example: 100
          nullable: true
          type: integer
        internalComment:
          description: "An internal comment for the part.<br>\r\n     Does not appear\
            \ on invoices and orders."
          nullable: true
          type: string
      title: Part model
      type: object
    Model_CheckAccountResponse:
      description: CheckAccount model. Responsible for the payment accounts.
      example:
        sevClient:
          objectName: SevClient
          id: "0"
        update: 2000-01-23T04:56:07.000+00:00
        defaultAccount: "0"
        type: online
        bankServer: bankServer
        autoMapTransactions: "1"
        importType: CSV
        name: Iron Bank
        objectName: CheckAccount
        create: 2000-01-23T04:56:07.000+00:00
        currency: EUR
        id: "0"
        status: "100"
      properties:
        id:
          description: The check account id
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: The check account object name
          example: CheckAccount
          readOnly: true
          type: string
        create:
          description: Date of check account creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last check account update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_CheckAccountResponse_sevClient'
        name:
          description: Name of the check account
          example: Iron Bank
          type: string
        type:
          description: "The type of the check account. Account with a CSV or MT940\
            \ import are regarded as online.<br>\r\n     Apart from that, created\
            \ check accounts over the API need to be offline, as online accounts with\
            \ an active connection\r\n     to a bank application can not be managed\
            \ over the API."
          enum:
          - online
          - offline
          example: online
          type: string
        importType:
          description: Import type. Transactions can be imported by this method on
            the check account.
          enum:
          - CSV
          - MT940
          - null
          example: CSV
          nullable: true
          type: string
        currency:
          description: The currency of the check account.
          example: EUR
          type: string
        defaultAccount:
          default: "0"
          description: Defines if this check account is the default account.
          type: string
        status:
          default: "100"
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          enum:
          - "0"
          - "100"
          type: string
        bankServer:
          description: Bank server of check account
          readOnly: true
          type: string
        autoMapTransactions:
          default: "1"
          description: Defines if transactions on this account are automatically mapped
            to invoice and vouchers when imported if possible.
          nullable: true
          type: string
      title: CheckAccount model
      type: object
    Model_Email:
      description: Email model
      example:
        cc: cc
        bcc: bcc
        sevClient:
          objectName: objectName
          id: 1
        subject: subject
        update: 2000-01-23T04:56:07.000+00:00
        arrived: 2000-01-23T04:56:07.000+00:00
        objectName: objectName
        create: 2000-01-23T04:56:07.000+00:00
        from: from
        id: 0
        to: to
        text: text
        object:
          objectName: objectName
          id: 6
      properties:
        id:
          description: The email id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The email object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of mail creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last mail update
          format: date-time
          readOnly: true
          type: string
        object:
          $ref: '#/components/schemas/Model_EmailOrder_object'
        from:
          description: The sender of the email
          nullable: false
          type: string
        to:
          description: The recipient of the email
          nullable: false
          type: string
        subject:
          description: The subject of the email
          nullable: false
          type: string
        text:
          description: The text of the email
          nullable: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_EmailOrder_sevClient'
        cc:
          description: A list of mail addresses which are in the cc
          nullable: true
          type: string
        bcc:
          description: A list of mail addresses which are in the bcc
          nullable: true
          type: string
        arrived:
          description: Date the mail arrived
          format: date-time
          nullable: true
          type: string
      required:
      - from
      - subject
      - to
      title: Email model
      type: object
    Model_CheckAccountTransaction:
      description: CheckAccountTransaction model. Responsible for the transactions
        on payment accounts.
      properties:
        id:
          description: The check account transaction id
          readOnly: true
          type: integer
        objectName:
          description: The check account transaction object name
          readOnly: true
          type: string
        create:
          description: Date of check account transaction creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last check account transaction update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_CheckAccountTransaction_sevClient'
        valueDate:
          description: Date the check account transaction was booked
          format: date-time
          nullable: false
          type: string
        entryDate:
          description: Date the check account transaction was imported
          format: date-time
          nullable: false
          type: string
        paymtPurpose:
          description: the purpose of the transaction
          example: salary
          type: string
        amount:
          description: Amount of the transaction
          example: 100
          format: float
          nullable: false
          type: number
        payeePayerName:
          description: Name of the payee/payer
          example: Cercei Lannister
          nullable: false
          type: string
        checkAccount:
          $ref: '#/components/schemas/Model_CheckAccountTransaction_checkAccount'
        status:
          description: "Status of the check account transaction.<br>\r\n     100 <->\
            \ Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\
            \n     400 <-> Booked"
          enum:
          - 100
          - 200
          - 300
          - 400
          nullable: false
          type: integer
        enshrined:
          description: Defines if the transaction has been enshrined and can not be
            changed any more.
          format: date-time
          nullable: true
          type: string
        sourceTransaction:
          $ref: '#/components/schemas/Model_CheckAccountTransaction_sourceTransaction'
        targetTransaction:
          $ref: '#/components/schemas/Model_CheckAccountTransaction_targetTransaction'
      required:
      - amount
      - checkAccount
      - payeePayerName
      - status
      - valueDate
      title: CheckAccountTransaction model
      type: object
    Model_creditNoteResponse:
      description: creditNote model
      example:
        sumTax: "0"
        footText: footText
        sendDate: 2000-01-23T04:56:07.000+00:00
        creditNoteNumber: Offer-1000
        sumGross: "0"
        update: 2000-01-23T04:56:07.000+00:00
        contactPerson:
          objectName: SevUser
          id: "0"
        sumTaxForeignCurrency: "0"
        headText: headText
        sumGrossForeignCurrency: "0"
        contact:
          objectName: Contact
          id: "0"
        sumDiscounts: "0"
        showNet: false
        create: 2000-01-23T04:56:07.000+00:00
        smallSettlement: false
        currency: EUR
        sumNetForeignCurrency: "0"
        id: "0"
        deliveryDate: 2000-01-23T04:56:07.000+00:00
        paymentTerms: paymentTerms
        taxType: default
        addressCountry:
          objectName: StaticCountry
          id: "1"
        creditNoteType: CN
        deliveryTerms: deliveryTerms
        taxText: Umsatzsteuer 19%
        address: address
        sevClient:
          objectName: SevClient
          id: "0"
        creditNoteDate: 2000-01-23T04:56:07.000+00:00
        version: "0"
        taxRate: "19"
        sumNet: "0"
        customerInternalNote: customerInternalNote
        taxSet:
          objectName: TaxSet
          id: "0"
        sendType: VPR
        objectName: objectName
        header: My Offer-1000
        createUser:
          objectName: SevUser
          id: "0"
        sumDiscountsForeignCurrency: "0"
        status: "100"
      properties:
        id:
          description: The creditNote id
          example: "0"
          nullable: false
          readOnly: true
          type: string
        objectName:
          description: The creditNote object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of creditNote creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last creditNote update
          format: date-time
          readOnly: true
          type: string
        creditNoteNumber:
          description: The creditNote number
          example: Offer-1000
          nullable: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_creditNoteResponse_contact'
        creditNoteDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>status\
            \ of credit note</a>\r\n    to see what the different status codes mean"
          enum:
          - "100"
          - "200"
          - "1000"
          example: "100"
          nullable: false
          type: string
        header:
          description: Normally consist of prefix plus the creditNote number
          example: My Offer-1000
          nullable: true
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_creditNoteResponse_addressCountry'
        createUser:
          $ref: '#/components/schemas/Model_InvoiceResponse_createUser'
        sevClient:
          $ref: '#/components/schemas/Model_creditNoteResponse_sevClient'
        deliveryTerms:
          description: Delivery terms of the creditNote
          nullable: true
          type: string
        deliveryDate:
          description: Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          format: date-time
          nullable: false
          type: string
        paymentTerms:
          description: Payment terms of the creditNote
          nullable: true
          type: string
        version:
          description: "Version of the creditNote.<br>\r\n    Can be used if you have\
            \ multiple drafts for the same creditNote.<br>\r\n    Should start with\
            \ 0"
          example: "0"
          nullable: true
          type: string
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the creditNote must not contain any vat"
          example: false
          nullable: true
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_creditNoteResponse_contactPerson'
        taxRate:
          description: Is overwritten by creditNote position tax rates
          example: "19"
          nullable: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_creditNoteResponse_taxSet'
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: true
          type: string
        taxType:
          description: |-
            Tax type of the creditNote.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: true
          type: string
        creditNoteType:
          description: "Type of the creditNote. For more information on the different\
            \ types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>this</a>\r\
            \n."
          example: CN
          nullable: true
          type: string
        sendDate:
          description: The date the creditNote was sent to the customer
          format: date-time
          nullable: true
          type: string
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.<br>\r\n     Line breaks can be used and will\
            \ be displayed on the invoice pdf."
          nullable: true
          type: string
        currency:
          description: Currency used in the creditNote. Needs to be currency code
            according to ISO-4217
          example: EUR
          nullable: true
          type: string
        sumNet:
          description: Net sum of the creditNote
          example: "0"
          readOnly: true
          type: string
        sumTax:
          description: Tax sum of the creditNote
          example: "0"
          readOnly: true
          type: string
        sumGross:
          description: Gross sum of the creditNote
          example: "0"
          readOnly: true
          type: string
        sumDiscounts:
          description: Sum of all discounts in the creditNote
          example: "0"
          readOnly: true
          type: string
        sumNetForeignCurrency:
          description: Net sum of the creditNote in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumTaxForeignCurrency:
          description: Tax sum of the creditNote in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumGrossForeignCurrency:
          description: Gross sum of the creditNote in the foreign currency
          example: "0"
          readOnly: true
          type: string
        sumDiscountsForeignCurrency:
          description: Discounts sum of the creditNote in the foreign currency
          example: "0"
          readOnly: true
          type: string
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the creditNote. Otherwise gross amount"
          example: false
          type: boolean
        sendType:
          description: "Type which was used to send the creditNote. IMPORTANT: Please\
            \ refer to the creditNote section of the\r\n     *     API-Overview to\
            \ understand how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
      title: creditNote model
      type: object
    Model_CreatePackingListFromOrder:
      description: order model
      nullable: false
      properties:
        id:
          description: Unique identifier of the order
          type: integer
        objectName:
          description: "Model name, which is 'Order'"
          example: Order
          type: string
      required:
      - id
      - objectName
      title: Create packing list
      type: object
    Model_InvoicePosUpdate:
      description: Invoice position model
      properties:
        id:
          description: The invoice position id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The invoice position object name
          example: InvoicePos
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of invoice position creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last invoice position update
          format: date-time
          readOnly: true
          type: string
        invoice:
          $ref: '#/components/schemas/Model_InvoicePosUpdate_invoice'
        part:
          $ref: '#/components/schemas/Model_InvoicePos_part'
        quantity:
          description: Quantity of the article/part
          example: 1
          format: float
          nullable: true
          type: number
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: 100
          format: float
          nullable: true
          type: number
        name:
          description: Name of the article/part.
          example: Dragonglass
          nullable: true
          type: string
        unity:
          $ref: '#/components/schemas/Model_InvoicePos_unity'
        sevClient:
          $ref: '#/components/schemas/Model_InvoicePos_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to order multiple
            positions.
          nullable: true
          type: integer
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          format: float
          nullable: true
          type: number
        taxRate:
          description: Tax rate of the position.
          example: 19
          format: float
          nullable: true
          type: number
        sumDiscount:
          description: Discount sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        sumNetAccounting:
          description: Net accounting sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        sumTaxAccounting:
          description: Tax accounting sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        sumGrossAccounting:
          description: Gross accounting sum of the position
          format: float
          nullable: true
          readOnly: true
          type: number
        priceNet:
          description: Net price of the part
          format: float
          nullable: true
          readOnly: true
          type: number
        priceGross:
          description: Gross price of the part
          example: 100
          format: float
          nullable: true
          type: number
        priceTax:
          description: Tax on the price of the part
          format: float
          nullable: true
          type: number
      title: Invoice position model
      type: object
    Model_OrderPosResponse:
      description: Order position model
      example:
        quantity: "1"
        sevClient:
          objectName: objectName
          id: "0"
        part:
          objectName: Part
          id: "0"
        update: 2000-01-23T04:56:07.000+00:00
        discount: discount
        optional: true
        positionNumber: "1"
        priceNet: "100"
        priceGross: "119"
        unity:
          objectName: Unity
          id: "0"
        taxRate: "19"
        price: "100"
        name: Dragonglass
        objectName: OrderPos
        create: 2000-01-23T04:56:07.000+00:00
        id: "0"
        priceTax: "19"
        text: text
        order:
          objectName: Order
          id: "0"
        sumDiscount: sumDiscount
      properties:
        id:
          description: The order position id
          example: "0"
          nullable: false
          readOnly: true
          type: string
        objectName:
          description: The order position object name
          example: OrderPos
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of order position creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last order position update
          format: date-time
          readOnly: true
          type: string
        order:
          $ref: '#/components/schemas/Model_OrderPosResponse_order'
        part:
          $ref: '#/components/schemas/Model_creditNotePosResponse_part'
        quantity:
          description: Quantity of the article/part
          example: "1"
          nullable: false
          type: string
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: "100"
          nullable: true
          type: string
        priceNet:
          description: Net price of the part
          example: "100"
          nullable: true
          readOnly: true
          type: string
        priceTax:
          description: Tax on the price of the part
          example: "19"
          nullable: true
          type: string
        priceGross:
          description: Gross price of the part
          example: "119"
          nullable: true
          type: string
        name:
          description: Name of the article/part.
          example: Dragonglass
          nullable: true
          type: string
        unity:
          $ref: '#/components/schemas/Model_creditNotePosResponse_unity'
        sevClient:
          $ref: '#/components/schemas/Model_OrderPosResponse_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to order multiple
            positions.
          example: "1"
          nullable: true
          type: string
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          nullable: true
          type: string
        optional:
          description: Defines if the position is optional.
          nullable: true
          type: boolean
        taxRate:
          description: Tax rate of the position.
          example: "19"
          nullable: false
          type: string
        sumDiscount:
          description: Discount sum of the position
          nullable: true
          readOnly: true
          type: string
      title: Order position model
      type: object
    saveOrder:
      properties:
        order:
          $ref: '#/components/schemas/Model_Order'
        orderPosSave:
          $ref: '#/components/schemas/Model_OrderPos'
        orderPosDelete:
          $ref: '#/components/schemas/saveOrder_orderPosDelete'
      required:
      - order
      - orderPos
      type: object
    Model_AccountingContactResponse:
      description: Accounting contact model
      example:
        debitorNumber: "0"
        sevClient:
          objectName: SevClient
          id: "0"
        contact:
          objectName: Contact
          id: "0"
        creditorNumber: "0"
        objectName: AccountingContact
        create: 2000-01-23T04:56:07.000+00:00
        update: 2000-01-23T04:56:07.000+00:00
        id: "0"
      properties:
        id:
          description: The accounting contact id
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: The accounting contact object name
          example: AccountingContact
          readOnly: true
          type: string
        create:
          description: Date of accounting contact creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last accounting contact update
          format: date-time
          readOnly: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_AccountingContactResponse_contact'
        sevClient:
          $ref: '#/components/schemas/Model_AccountingContactResponse_sevClient'
        debitorNumber:
          description: Debitor number of the accounting contact.
          example: "0"
          readOnly: true
          type: string
        creditorNumber:
          description: Creditor number of the accounting contact.
          example: "0"
          readOnly: true
          type: string
      title: AccountingContact model
      type: object
    Model_OrderPos:
      description: Order position model
      properties:
        id:
          description: The order position id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The order position object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of order position creation
          readOnly: true
          type: string
        update:
          description: Date of last order position update
          readOnly: true
          type: string
        order:
          $ref: '#/components/schemas/Model_OrderPos_order'
        part:
          $ref: '#/components/schemas/Model_InvoicePos_part'
        quantity:
          description: Quantity of the article/part
          example: 1
          nullable: false
          type: number
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: 100
          nullable: true
          type: number
        priceNet:
          description: Net price of the part
          nullable: true
          readOnly: true
          type: number
        priceTax:
          description: Tax on the price of the part
          nullable: true
          type: number
        priceGross:
          description: Gross price of the part
          nullable: true
          type: number
        name:
          description: Name of the article/part.
          nullable: true
          type: number
        unity:
          $ref: '#/components/schemas/Model_creditNotePos_unity'
        sevClient:
          $ref: '#/components/schemas/Model_OrderPos_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to order multiple
            positions.
          example: 1
          nullable: true
          type: integer
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          nullable: true
          type: number
        optional:
          description: Defines if the position is optional.
          nullable: true
          type: boolean
        taxRate:
          description: Tax rate of the position.
          example: 19
          nullable: false
          type: number
        sumDiscount:
          description: Discount sum of the position
          nullable: true
          readOnly: true
          type: number
      required:
      - quantity
      - taxRate
      - unity
      title: Order position model
      type: object
    Model_VoucherResponse:
      description: Voucher model
      example:
        sumTax: "0"
        sumGrossAccounting: "0"
        recurringLastVoucher: 2000-01-23T04:56:07.000+00:00
        document:
          objectName: Document
          id: "0"
        sumGross: "0"
        update: 2000-01-23T04:56:07.000+00:00
        description: Voucher-1000
        supplier:
          objectName: Contact
          id: "0"
        sumNetAccounting: "0"
        sumDiscounts: "0"
        create: 2000-01-23T04:56:07.000+00:00
        voucherDate: 2000-01-23T04:56:07.000+00:00
        currency: EUR
        id: "0"
        creditDebit: C
        deliveryDate: 2000-01-23T04:56:07.000+00:00
        taxType: default
        recurringInterval: P0Y0M1W
        supplierName: John Snow
        sevClient:
          objectName: SevClient
          id: "0"
        voucherType: VOU
        recurringStartDate: 2000-01-23T04:56:07.000+00:00
        enshrined: 2000-01-23T04:56:07.000+00:00
        propertyExchangeRate: "0.8912"
        recurringEndDate: 2000-01-23T04:56:07.000+00:00
        costCentre:
          objectName: objectName
          id: "0"
        mapAll: true
        sumNet: "0"
        taxSet:
          objectName: TaxSet
          id: "0"
        objectName: objectName
        createUser:
          objectName: SevUser
          id: "0"
        recurringNextVoucher: 2000-01-23T04:56:07.000+00:00
        paymentDeadline: 2000-01-23T04:56:07.000+00:00
        deliveryDateUntil: 2000-01-23T04:56:07.000+00:00
        sumTaxAccounting: "0"
        propertyForeignCurrencyDeadline: 2000-01-23T04:56:07.000+00:00
        sumDiscountsForeignCurrency: "0"
        paidAmount: 0
        payDate: 2000-01-23T04:56:07.000+00:00
        status: "50"
      properties:
        id:
          description: The voucher id
          example: "0"
          nullable: false
          readOnly: true
          type: string
        objectName:
          description: The voucher object name
          nullable: false
          readOnly: true
          type: string
        mapAll:
          example: true
          nullable: false
          type: boolean
        create:
          description: Date of voucher creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last voucher update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_VoucherResponse_sevClient'
        createUser:
          $ref: '#/components/schemas/Model_VoucherResponse_createUser'
        voucherDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        supplier:
          $ref: '#/components/schemas/Model_VoucherResponse_supplier'
        supplierName:
          description: "The supplier name.<br>\r\n     The value you provide here\
            \ will determine what supplier name is shown for the voucher in case you\
            \ did not provide a supplier."
          example: John Snow
          nullable: true
          type: string
        description:
          description: The description of the voucher. Essentially the voucher number.
          example: Voucher-1000
          nullable: true
          type: string
        document:
          $ref: '#/components/schemas/Model_VoucherResponse_document'
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>status\
            \ of vouchers</a>\r\n    to see what the different status codes mean"
          enum:
          - "50"
          - "100"
          - "1000"
          example: "50"
          nullable: true
          type: string
        sumNet:
          description: Net sum of the voucher
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumTax:
          description: Tax sum of the voucher
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumGross:
          description: Gross sum of the voucher
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumNetAccounting:
          description: Net accounting sum of the voucher. Is usually the same as sumNet
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumTaxAccounting:
          description: Tax accounting sum of the voucher. Is usually the same as sumTax
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumGrossAccounting:
          description: Gross accounting sum of the voucher. Is usually the same as
            sumGross
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumDiscounts:
          description: Sum of all discounts in the voucher
          example: "0"
          nullable: false
          readOnly: true
          type: string
        sumDiscountsForeignCurrency:
          description: Discounts sum of the voucher in the foreign currency
          example: "0"
          nullable: false
          readOnly: true
          type: string
        paidAmount:
          description: Amount which has already been paid for this voucher by the
            customer
          example: 0
          nullable: true
          readOnly: true
          type: number
        taxType:
          description: "Tax type of the voucher.\nThere are four tax types:\n1. default\
            \ - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche\
            \ Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des\
            \ Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using\
            \ custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG \n\
            Tax rates are heavily connected to the tax type used."
          example: default
          nullable: true
          type: string
        creditDebit:
          description: Defines if your voucher is a credit (C) or debit (D)
          enum:
          - C
          - D
          example: C
          nullable: true
          type: string
        costCentre:
          $ref: '#/components/schemas/Model_VoucherResponse_costCentre'
        voucherType:
          description: "Type of the voucher. For more information on the different\
            \ types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>this</a>\r\
            \n"
          enum:
          - VOU
          - RV
          example: VOU
          nullable: true
          type: string
        currency:
          description: "specifies which currency the voucher should have. Attention:\
            \ If the currency differs from the default currency stored in the account,\
            \ then either the \"propertyForeignCurrencyDeadline\" or \"propertyExchangeRate\"\
            \ parameter must be specified. If both parameters are specified, then\
            \ the \"propertyForeignCurrencyDeadline\" parameter is preferred"
          example: EUR
          nullable: true
          type: string
        propertyForeignCurrencyDeadline:
          description: Defines the exchange rate day and and then the exchange rate
            is set from sevDesk. Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        propertyExchangeRate:
          description: Defines the exchange rate
          example: "0.8912"
          nullable: true
          type: string
        recurringInterval:
          description: "The DateInterval in which recurring vouchers are generated.<br>\r\
            \n     Necessary attribute for all recurring vouchers."
          enum:
          - P0Y0M1W
          - P0Y0M2W
          - P0Y1M0W
          - P0Y3M0W
          - P0Y6M0W
          - P1Y0M0W
          - P2Y0M0W
          - P3Y0M0W
          - P4Y0M0W
          - P5Y0M0W
          nullable: true
          type: string
        recurringStartDate:
          description: "The date when the recurring vouchers start being generated.<br>\r\
            \n     Necessary attribute for all recurring vouchers."
          format: date-time
          nullable: true
          type: string
        recurringNextVoucher:
          description: "The date when the next voucher should be generated.<br>\r\n\
            \     Necessary attribute for all recurring vouchers."
          format: date-time
          nullable: true
          type: string
        recurringLastVoucher:
          description: The date when the last voucher was generated.
          format: date-time
          nullable: true
          type: string
        recurringEndDate:
          description: "The date when the recurring vouchers end being generated.<br>\r\
            \n    Necessary attribute for all recurring vouchers."
          format: date-time
          nullable: true
          type: string
        enshrined:
          description: Defines if and when voucher was enshrined. Enshrined vouchers
            can not be manipulated.
          format: date-time
          nullable: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_VoucherResponse_taxSet'
        paymentDeadline:
          description: Payment deadline of the voucher.
          format: date-time
          nullable: true
          type: string
        deliveryDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: false
          type: string
        deliveryDateUntil:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
      title: Voucher model
      type: object
    Model_ContactCustomFieldSettingUpdate:
      description: contact fields model
      properties:
        name:
          description: name of the contact fields
          type: string
        description:
          description: The description of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomFieldSetting'.
          example: ContactCustomFieldSetting
          type: string
      title: contact fields model
    Model_Voucher:
      description: Voucher model
      properties:
        id:
          description: The voucher id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The voucher object name
          nullable: false
          type: string
        mapAll:
          example: true
          nullable: false
          type: boolean
        create:
          description: Date of voucher creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last voucher update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_Voucher_sevClient'
        createUser:
          $ref: '#/components/schemas/Model_Voucher_createUser'
        voucherDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        supplier:
          $ref: '#/components/schemas/Model_Voucher_supplier'
        supplierName:
          description: "The supplier name.<br>\r\n     The value you provide here\
            \ will determine what supplier name is shown for the voucher in case you\
            \ did not provide a supplier."
          example: John Snow
          nullable: true
          type: string
        description:
          description: The description of the voucher. Essentially the voucher number.
          example: Voucher-1000
          nullable: true
          type: string
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>status\
            \ of vouchers</a>\r\n    to see what the different status codes mean"
          enum:
          - 50
          - 100
          - 1000
          example: 50
          nullable: false
          type: number
        sumNet:
          description: Net sum of the voucher
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTax:
          description: Tax sum of the voucher
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGross:
          description: Gross sum of the voucher
          format: float
          nullable: false
          readOnly: true
          type: number
        sumNetAccounting:
          description: Net accounting sum of the voucher. Is usually the same as sumNet
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTaxAccounting:
          description: Tax accounting sum of the voucher. Is usually the same as sumTax
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGrossAccounting:
          description: Gross accounting sum of the voucher. Is usually the same as
            sumGross
          format: float
          nullable: false
          readOnly: true
          type: number
        sumDiscounts:
          description: Sum of all discounts in the voucher
          format: float
          nullable: false
          readOnly: true
          type: number
        sumDiscountsForeignCurrency:
          description: Discounts sum of the voucher in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        paidAmount:
          description: Amount which has already been paid for this voucher by the
            customer
          format: float
          nullable: true
          readOnly: true
          type: number
        taxType:
          description: |-
            Tax type of the voucher.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: false
          type: string
        creditDebit:
          description: Defines if your voucher is a credit (C) or debit (D)
          enum:
          - C
          - D
          example: C
          nullable: false
          type: string
        voucherType:
          description: "Type of the voucher. For more information on the different\
            \ types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>this</a>\r\
            \n"
          enum:
          - VOU
          - RV
          example: VOU
          nullable: false
          type: string
        currency:
          description: "specifies which currency the voucher should have. Attention:\
            \ If the currency differs from the default currency stored in the account,\
            \ then either the \"propertyForeignCurrencyDeadline\" or \"propertyExchangeRate\"\
            \ parameter must be specified. If both parameters are specified, then\
            \ the \"propertyForeignCurrencyDeadline\" parameter is preferred"
          example: EUR
          nullable: true
          type: string
        propertyForeignCurrencyDeadline:
          description: Defines the exchange rate day and and then the exchange rate
            is set from sevDesk. Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        propertyExchangeRate:
          description: Defines the exchange rate
          example: 0.8912
          format: float
          nullable: true
          type: number
        recurringInterval:
          description: "The DateInterval in which recurring vouchers are generated.<br>\r\
            \n     Necessary attribute for all recurring vouchers."
          enum:
          - P0Y0M1W
          - P0Y0M2W
          - P0Y1M0W
          - P0Y3M0W
          - P0Y6M0W
          - P1Y0M0W
          - P2Y0M0W
          - P3Y0M0W
          - P4Y0M0W
          - P5Y0M0W
          nullable: true
          readOnly: true
          type: string
        recurringStartDate:
          description: "The date when the recurring vouchers start being generated.<br>\r\
            \n     Necessary attribute for all recurring vouchers."
          format: date-time
          nullable: true
          readOnly: true
          type: string
        recurringNextVoucher:
          description: "The date when the next voucher should be generated.<br>\r\n\
            \     Necessary attribute for all recurring vouchers."
          format: date-time
          nullable: true
          readOnly: true
          type: string
        recurringLastVoucher:
          description: The date when the last voucher was generated.
          format: date-time
          nullable: true
          readOnly: true
          type: string
        recurringEndDate:
          description: "The date when the recurring vouchers end being generated.<br>\r\
            \n    Necessary attribute for all recurring vouchers."
          format: date-time
          nullable: true
          readOnly: true
          type: string
        enshrined:
          description: Defines if and when voucher was enshrined. Enshrined vouchers
            can not be manipulated.
          format: date-time
          nullable: true
          readOnly: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_VoucherUpdate_taxSet'
        paymentDeadline:
          description: Payment deadline of the voucher.
          format: date-time
          nullable: true
          type: string
        deliveryDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: false
          type: string
        deliveryDateUntil:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
          example: null
        document:
          $ref: '#/components/schemas/Model_VoucherUpdate_document'
        costCentre:
          $ref: '#/components/schemas/Model_VoucherUpdate_costCentre'
      required:
      - creditDebit
      - mapAll
      - objectName
      - status
      - taxType
      - voucherType
      title: Voucher model
      type: object
    Model_Contact:
      description: Contact model
      properties:
        name:
          description: |-
            The organization name.<br>
            Be aware that the type of contact will depend on this attribute.<br>
            If it holds a value, the contact will be regarded as an organization.
          nullable: true
          type: string
        status:
          default: 100
          description: Defines the status of the contact. 100 <-> Lead - 500 <-> Pending
            - 1000 <-> Active.
          nullable: true
          type: integer
        customerNumber:
          description: The customer number
          example: Customer-1337
          nullable: true
          type: string
        parent:
          $ref: '#/components/schemas/Model_Contact_parent'
        surename:
          description: |-
            The <b>first</b> name of the contact.<br>
            Yeah... not quite right in literally every way. We know.<br>
            Not to be used for organizations.
          example: John
          nullable: true
          type: string
        familyname:
          description: |-
            The last name of the contact.<br>
            Not to be used for organizations.
          example: Snow
          nullable: true
          type: string
        titel:
          description: |-
            A non-academic title for the contact.
            Not to be used for organizations.
          example: Commander
          nullable: true
          type: string
        category:
          $ref: '#/components/schemas/Model_Contact_category'
        description:
          description: A description for the contact.
          example: Rightful king of the seven kingdoms
          nullable: true
          type: string
        academicTitle:
          description: |-
            A academic title for the contact.
            Not to be used for organizations.
          nullable: true
          type: string
        gender:
          description: |-
            Gender of the contact.<br>
            Not to be used for organizations.
          nullable: true
          type: string
        name2:
          description: |-
            Second name of the contact.<br>
            Not to be used for organizations.
          example: Targaryen
          nullable: true
          type: string
        birthday:
          description: |-
            Birthday of the contact.<br>
            Not to be used for organizations.
          format: date
          nullable: true
          type: string
        vatNumber:
          description: Vat number of the contact.
          nullable: true
          type: string
        bankAccount:
          description: Bank account number (IBAN) of the contact.
          nullable: true
          type: string
        bankNumber:
          description: Bank number of the bank used by the contact.
          nullable: true
          type: string
        defaultCashbackTime:
          description: Absolute time in days which the contact has to pay his invoices
            and subsequently get a cashback.
          nullable: true
          type: integer
        defaultCashbackPercent:
          description: Percentage of the invoice sum the contact gets back if he payed
            invoices in time.
          format: float
          nullable: true
          type: number
        defaultTimeToPay:
          description: The payment goal in days which is set for every invoice of
            the contact.
          nullable: true
          type: integer
        taxNumber:
          description: The tax number of the contact.
          nullable: true
          type: string
        taxOffice:
          description: The tax office of the contact (only for greek customers).
          nullable: true
          type: string
        exemptVat:
          description: Defines if the contact is freed from paying vat.
          nullable: true
          type: boolean
        taxType:
          description: Defines which tax regulation the contact is using.
          enum:
          - default
          - eu
          - noteu
          - custom
          - ss
          nullable: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_Contact_taxSet'
        defaultDiscountAmount:
          description: |-
            The default discount the contact gets for every invoice.<br>
            Depending on defaultDiscountPercentage attribute, in percent or absolute value.
          format: float
          nullable: true
          type: number
        defaultDiscountPercentage:
          description: Defines if the discount is a percentage (true) or an absolute
            value (false).
          nullable: true
          type: boolean
        buyerReference:
          description: Buyer reference of the contact.
          nullable: true
          type: string
        governmentAgency:
          description: Defines whether the contact is a government agency (true) or
            not (false).
          nullable: true
          type: boolean
      required:
      - category
      title: Contact model
      type: object
    saveVoucherResponse:
      example:
        voucherPos:
          sumTax: "19"
          sumGrossAccounting: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          voucher:
            objectName: Voucher
            id: "0"
          accountingType:
            objectName: AccountingType
            id: "0"
          sumGross: "119"
          update: 01.01.2020
          taxRate: "19"
          sumNet: "100"
          isAsset: false
          sumNetAccounting: "0"
          objectName: objectName
          create: 01.01.2020
          estimatedAccountingType:
            objectName: AccountingType
            id: "0"
          comment: comment
          id: "0"
          sumTaxAccounting: "0"
          net: true
        filename: ""
        voucher:
          sumTax: "0"
          sumGrossAccounting: "0"
          recurringLastVoucher: 2000-01-23T04:56:07.000+00:00
          document:
            objectName: Document
            id: "0"
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          description: Voucher-1000
          supplier:
            objectName: Contact
            id: "0"
          sumNetAccounting: "0"
          sumDiscounts: "0"
          create: 2000-01-23T04:56:07.000+00:00
          voucherDate: 2000-01-23T04:56:07.000+00:00
          currency: EUR
          id: "0"
          creditDebit: C
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxType: default
          recurringInterval: P0Y0M1W
          supplierName: John Snow
          sevClient:
            objectName: SevClient
            id: "0"
          voucherType: VOU
          recurringStartDate: 2000-01-23T04:56:07.000+00:00
          enshrined: 2000-01-23T04:56:07.000+00:00
          propertyExchangeRate: "0.8912"
          recurringEndDate: 2000-01-23T04:56:07.000+00:00
          costCentre:
            objectName: objectName
            id: "0"
          mapAll: true
          sumNet: "0"
          taxSet:
            objectName: TaxSet
            id: "0"
          objectName: objectName
          createUser:
            objectName: SevUser
            id: "0"
          recurringNextVoucher: 2000-01-23T04:56:07.000+00:00
          paymentDeadline: 2000-01-23T04:56:07.000+00:00
          deliveryDateUntil: 2000-01-23T04:56:07.000+00:00
          sumTaxAccounting: "0"
          propertyForeignCurrencyDeadline: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          payDate: 2000-01-23T04:56:07.000+00:00
          status: "50"
      properties:
        voucher:
          $ref: '#/components/schemas/Model_VoucherResponse'
        voucherPos:
          $ref: '#/components/schemas/Model_VoucherPosResponse'
        filename:
          description: Filename of a previously upload file which should be attached.
          format: binary
          type: string
      type: object
    Model_OrderPosUpdate:
      description: Order position model
      properties:
        id:
          description: The order position id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The order position object name
          example: OrderPos
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of order position creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last order position update
          format: date-time
          readOnly: true
          type: string
        order:
          $ref: '#/components/schemas/Model_OrderPos_order'
        part:
          $ref: '#/components/schemas/Model_InvoicePos_part'
        quantity:
          description: Quantity of the article/part
          example: 1
          nullable: true
          type: number
        price:
          description: "Price of the article/part. Is either gross or net, depending\
            \ on the sevDesk account setting."
          example: 100
          nullable: true
          type: number
        priceNet:
          description: Net price of the part
          nullable: true
          readOnly: true
          type: number
        priceTax:
          description: Tax on the price of the part
          nullable: true
          type: number
        priceGross:
          description: Gross price of the part
          nullable: true
          type: number
        name:
          description: Name of the article/part.
          nullable: true
          type: number
        unity:
          $ref: '#/components/schemas/Model_creditNotePos_unity'
        sevClient:
          $ref: '#/components/schemas/Model_OrderPos_sevClient'
        positionNumber:
          description: Position number of your position. Can be used to order multiple
            positions.
          example: 1
          nullable: true
          type: integer
        text:
          description: A text describing your position.
          nullable: true
          type: string
        discount:
          description: An optional discount of the position.
          nullable: true
          type: number
        optional:
          description: Defines if the position is optional.
          nullable: true
          type: boolean
        taxRate:
          description: Tax rate of the position.
          example: 19
          nullable: true
          type: number
        sumDiscount:
          description: Discount sum of the position
          nullable: true
          readOnly: true
          type: number
      title: Order position model
      type: object
    Model_CheckAccount:
      description: CheckAccount model. Responsible for the payment accounts.
      properties:
        id:
          description: The check account id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The check account object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of check account creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last check account update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_CheckAccount_sevClient'
        name:
          description: Name of the check account
          example: Iron Bank
          nullable: false
          type: string
        type:
          description: "The type of the check account. Account with a CSV or MT940\
            \ import are regarded as online.<br>\r\n     Apart from that, created\
            \ check accounts over the API need to be offline, as online accounts with\
            \ an active connection\r\n     to a bank application can not be managed\
            \ over the API."
          enum:
          - online
          - offline
          example: online
          nullable: false
          type: string
        importType:
          description: Import type. Transactions can be imported by this method on
            the check account.
          enum:
          - CSV
          - MT940
          - null
          example: CSV
          nullable: true
          type: string
        currency:
          description: The currency of the check account.
          example: EUR
          nullable: false
          type: string
        defaultAccount:
          default: 0
          description: Defines if this check account is the default account.
          enum:
          - 0
          - 1
          type: integer
        status:
          default: 100
          description: Status of the check account. 0 <-> Archived - 100 <-> Active
          enum:
          - 0
          - 100
          nullable: false
          type: integer
        bankServer:
          description: Bank server of check account
          readOnly: true
          type: string
        autoMapTransactions:
          default: 1
          description: Defines if transactions on this account are automatically mapped
            to invoice and vouchers when imported if possible.
          nullable: true
          type: integer
      required:
      - currency
      - name
      - status
      - type
      title: CheckAccount model
      type: object
    Model_OrderUpdate:
      description: Order model
      properties:
        id:
          description: The order id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The order object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of order creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last order update
          format: date-time
          readOnly: true
          type: string
        orderNumber:
          description: The order number
          example: Offer-1000
          type: string
        contact:
          $ref: '#/components/schemas/Model_OrderUpdate_contact'
        orderDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>status\
            \ of orders</a>\r\n    to see what the different status codes mean"
          enum:
          - 100
          - 200
          - 300
          - 500
          - 750
          - 1000
          example: 100
          nullable: true
          type: integer
        header:
          description: Normally consist of prefix plus the order number
          example: My Offer-1000
          nullable: true
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_OrderUpdate_addressCountry'
        createUser:
          $ref: '#/components/schemas/Model_OrderUpdate_createUser'
        sevClient:
          $ref: '#/components/schemas/Model_OrderUpdate_sevClient'
        deliveryTerms:
          description: Delivery terms of the order
          nullable: true
          type: string
        paymentTerms:
          description: Payment terms of the order
          nullable: true
          type: string
        origin:
          $ref: '#/components/schemas/Model_Order_origin'
        version:
          description: "Version of the order.<br>\r\n    Can be used if you have multiple\
            \ drafts for the same order.<br>\r\n    Should start with 0"
          example: 0
          nullable: true
          type: integer
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the order must not contain any vat"
          example: false
          nullable: true
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_OrderUpdate_contactPerson'
        taxRate:
          description: Is overwritten by order position tax rates
          example: 19
          nullable: true
          type: number
        taxSet:
          $ref: '#/components/schemas/Model_OrderUpdate_taxSet'
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: true
          type: string
        taxType:
          description: |-
            Tax type of the order.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: true
          type: string
        orderType:
          description: "Type of the order. For more information on the different types,\
            \ check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>this</a>\r\
            \n"
          enum:
          - AN
          - AB
          - LI
          example: AN
          nullable: true
          type: string
        sendDate:
          description: The date the order was sent to the customer
          format: date-time
          nullable: true
          type: string
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.<br>\r\n     Line breaks can be used and will\
            \ be displayed on the invoice pdf."
          nullable: true
          type: string
        currency:
          description: Currency used in the order. Needs to be currency code according
            to ISO-4217
          example: EUR
          nullable: true
          type: string
        sumNet:
          description: Net sum of the order
          nullable: false
          readOnly: true
          type: number
        sumTax:
          description: Tax sum of the order
          nullable: false
          readOnly: true
          type: number
        sumGross:
          description: Gross sum of the order
          nullable: false
          readOnly: true
          type: number
        sumDiscounts:
          description: Sum of all discounts in the order
          nullable: false
          readOnly: true
          type: number
        sumNetForeignCurrency:
          description: Net sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: number
        sumTaxForeignCurrency:
          description: Tax sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: number
        sumGrossForeignCurrency:
          description: Gross sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: number
        sumDiscountsForeignCurrency:
          description: Discounts sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: number
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the order. Otherwise gross amount"
          example: false
          nullable: true
          type: boolean
        sendType:
          description: "Type which was used to send the order. IMPORTANT: Please refer\
            \ to the order section of the\r\n     *     API-Overview to understand\
            \ how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
      title: Order model
      type: object
    Model_CheckAccountTransactionUpdate:
      description: CheckAccountTransaction model. Responsible for the transactions
        on payment accounts.
      properties:
        valueDate:
          description: Date the check account transaction was booked
          format: date-time
          type: string
        entryDate:
          description: Date the check account transaction was imported
          format: date-time
          type: string
        paymtPurpose:
          description: the purpose of the transaction
          example: salary
          type: string
        amount:
          description: Amount of the transaction
          example: 100
          format: float
          nullable: true
          type: number
        payeePayerName:
          description: Name of the payee/payer
          example: Cercei Lannister
          nullable: true
          type: string
        checkAccount:
          $ref: '#/components/schemas/Model_CheckAccountTransactionUpdate_checkAccount'
        status:
          description: "Status of the check account transaction.<br>\r\n     100 <->\
            \ Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\
            \n     400 <-> Booked"
          enum:
          - 100
          - 200
          - 300
          - 400
          type: integer
        enshrined:
          description: Defines if the transaction has been enshrined and can not be
            changed any more.
          format: date-time
          nullable: true
          type: string
        sourceTransaction:
          $ref: '#/components/schemas/Model_CheckAccountTransaction_sourceTransaction'
        targetTransaction:
          $ref: '#/components/schemas/Model_CheckAccountTransaction_targetTransaction'
      title: CheckAccountTransaction model
      type: object
    Model_CheckAccountTransactionResponse:
      description: CheckAccountTransaction model. Responsible for the transactions
        on payment accounts.
      example:
        amount: "100"
        sevClient:
          objectName: SevClient
          id: "0"
        entryDate: 2000-01-23T04:56:07.000+00:00
        enshrined: 2000-01-23T04:56:07.000+00:00
        sourceTransaction:
          objectName: CheckAccountTransaction
          id: "0"
        targetTransaction:
          objectName: CheckAccountTransaction
          id: "0"
        update: 2000-01-23T04:56:07.000+00:00
        valueDate: 2000-01-23T04:56:07.000+00:00
        checkAccount:
          objectName: CheckAccount
          id: "0"
        objectName: CheckAccountTransaction
        create: 2000-01-23T04:56:07.000+00:00
        paymtPurpose: salary
        id: "0"
        payeePayerName: Cercei Lannister
        status: "100"
      properties:
        id:
          description: The check account transaction id
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: The check account transaction object name
          example: CheckAccountTransaction
          readOnly: true
          type: string
        create:
          description: Date of check account transaction creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last check account transaction update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_CheckAccountTransactionResponse_sevClient'
        valueDate:
          description: Date the check account transaction was imported
          format: date-time
          readOnly: true
          type: string
        entryDate:
          description: Date the check account transaction was booked
          format: date-time
          readOnly: true
          type: string
        paymtPurpose:
          description: the purpose of the transaction
          example: salary
          readOnly: true
          type: string
        amount:
          description: Amount of the transaction
          example: "100"
          readOnly: true
          type: string
        payeePayerName:
          description: Name of the payee/payer
          example: Cercei Lannister
          readOnly: true
          type: string
        checkAccount:
          $ref: '#/components/schemas/Model_CheckAccountTransactionResponse_checkAccount'
        status:
          description: "Status of the check account transaction.<br>\r\n     100 <->\
            \ Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\
            \n     400 <-> Booked"
          enum:
          - "100"
          - "200"
          - "300"
          - "400"
          readOnly: true
          type: string
        enshrined:
          description: Defines if the transaction has been enshrined and can not be
            changed any more.
          format: date-time
          readOnly: true
          type: string
        sourceTransaction:
          $ref: '#/components/schemas/Model_CheckAccountTransactionResponse_sourceTransaction'
        targetTransaction:
          $ref: '#/components/schemas/Model_CheckAccountTransactionResponse_targetTransaction'
      title: CheckAccountTransaction model
      type: object
    Model_ContactCustomFieldUpdate:
      description: contact fields model
      properties:
        contact:
          $ref: '#/components/schemas/Model_ContactCustomField_contact'
        contactCustomFieldSetting:
          $ref: '#/components/schemas/Model_ContactCustomField_contactCustomFieldSetting'
        value:
          description: The value of the contact field
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomField'.
          example: ContactCustomField
          type: string
      title: contact fields model
    saveInvoiceResponse:
      example:
        invoicePos:
          sumGrossAccounting: "0"
          quantity: "1"
          sevClient:
            objectName: SevClient
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          positionNumber: "0"
          priceNet: "0"
          priceGross: "100"
          unity:
            objectName: Unity
            id: "1"
          taxRate: "19"
          price: "100"
          sumNetAccounting: "0"
          name: Dragonglass
          objectName: InvoicePos
          create: 2000-01-23T04:56:07.000+00:00
          id: id
          invoice:
            objectName: Invoice
            id: "0"
          text: text
          sumTaxAccounting: "0"
          priceTax: "0"
          sumDiscount: "0"
        filename: ""
        invoice:
          sumTax: "19"
          sumGrossAccounting: "0"
          sendDate: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          reminderDebit: "0"
          reminderTotal: "0"
          reminderCharge: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          dunningLevel: "0"
          create: 2000-01-23T04:56:07.000+00:00
          invoiceType: RE
          sumNetForeignCurrency: "0"
          id: "0"
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          costCentre:
            objectName: CostCentre
            id: "0"
          taxRate: "19"
          accountNextInvoice: "1647259198"
          sumNet: "100"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          header: My RE-1000
          paymentMethod:
            objectName: PaymentMethod
            id: "0"
          deliveryDateUntil: "0"
          sumTaxAccounting: "0"
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          status: "100"
          footText: footer information
          accountIntervall: 2022-03-14
          reminderDeadline: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: objectName
            id: "0"
          sumGross: "119"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: header information
          sumGrossForeignCurrency: "0"
          sumNetAccounting: "0"
          invoiceNumber: RE-1000
          showNet: false
          sendPaymentReceivedNotificationDate: "0"
          smallSettlement: false
          currency: EUR
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxText: Umsatzsteuer 19%
          address: |-
            name
            street
            postCode city
          sevClient:
            objectName: SevClient
            id: "0"
          enshrined: 2000-01-23T04:56:07.000+00:00
          invoiceDate: 01.01.20
          datevConnectOnline: "{}"
          discountTime: "0"
          timeToPay: "10"
          objectName: Invoice
          createUser:
            objectName: SevUser
            id: "0"
          payDate: 2000-01-23T04:56:07.000+00:00
      properties:
        invoice:
          $ref: '#/components/schemas/Model_InvoiceResponse'
        invoicePos:
          $ref: '#/components/schemas/Model_InvoicePosResponse'
        filename:
          description: Filename of a previously upload file which should be attached.
          format: binary
          type: string
      type: object
    Model_Invoice:
      description: Invoice model
      properties:
        id:
          description: The invoice id. <span style='color:red'>Required</span> if
            you want to create or update an invoice position for an existing invoice
          nullable: true
          type: integer
          example: null
        objectName:
          description: The invoice object name.
          example: Invoice
          nullable: false
          type: string
        invoiceNumber:
          description: The invoice number
          example: RE-1000
          nullable: true
          readOnly: false
          type: string
        contact:
          $ref: '#/components/schemas/Model_Invoice_contact'
        contactPerson:
          $ref: '#/components/schemas/Model_InvoiceUpdate_contactPerson'
        create:
          description: Date of invoice creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last invoice update
          format: date-time
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_InvoiceUpdate_sevClient'
        invoiceDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          example: 01.01.2022
          nullable: false
          type: string
        header:
          description: Normally consist of prefix plus the invoice number
          example: Invoice RE-1000
          nullable: true
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          example: header information
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          example: footer information
          nullable: true
          type: string
        timeToPay:
          description: The time the customer has to pay the invoice in days
          example: 20
          nullable: true
          type: integer
        discount:
          description: "If you want to give a discount, define the percentage here.\
            \ Otherwise provide zero as value"
          example: 0
          nullable: false
          type: integer
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.\r\n     * Line breaks can be used and will be\
            \ displayed on the invoice pdf."
          example: |-
            name
            street
            postCode city
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_Invoice_addressCountry'
        payDate:
          description: Needs to be timestamp or dd.mm.yyyy
          format: date-time
          nullable: true
          type: string
        createUser:
          $ref: '#/components/schemas/Model_creditNote_createUser'
        deliveryDate:
          description: Timestamp. This can also be a date range if you also use the
            attribute deliveryDateUntil
          format: date-time
          nullable: true
          type: string
        deliveryDateUntil:
          description: "If the delivery date should be a time range, another timestamp\
            \ can be provided in this attribute\r\n     * to define a range from timestamp\
            \ used in deliveryDate attribute to the timestamp used here."
          nullable: true
          type: integer
          example: null
        status:
          description: "Please have a look in our\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>Types\
            \ and status of invoices</a>\r\n     to see what the different status\
            \ codes mean"
          enum:
          - "50"
          - "100"
          - "200"
          - "1000"
          example: "100"
          nullable: false
          type: string
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the invoice must not contain any vat"
          example: false
          nullable: true
          type: boolean
        taxRate:
          description: Is overwritten by invoice position tax rates
          example: 19
          format: float
          nullable: false
          type: number
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: false
          type: string
        taxType:
          description: |-
            Tax type of the invoice.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          enum:
          - default
          - eu
          - noteu
          - custom
          example: default
          nullable: false
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_Invoice_taxSet'
        dunningLevel:
          description: "Defines how many reminders have already been sent for the\
            \ invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented\
            \ by one every time another reminder is sent."
          nullable: true
          readOnly: true
          type: integer
        paymentMethod:
          $ref: '#/components/schemas/Model_Invoice_paymentMethod'
        sendDate:
          description: The date the invoice was sent to the customer
          format: date-time
          nullable: true
          type: string
        invoiceType:
          description: "Type of the invoice. For more information on the different\
            \ types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>this</a>\
            \ section\r\n"
          enum:
          - RE
          - WKR
          - SR
          - MA
          - TR
          - ER
          example: RE
          nullable: false
          type: string
        accountIntervall:
          description: "The interval in which recurring invoices are due as ISO-8601\
            \ duration.<br>\r\n     Necessary attribute for all recurring invoices."
          nullable: true
          readOnly: true
          type: string
        accountNextInvoice:
          description: Timestamp when the next invoice will be generated by this recurring
            invoice.
          nullable: true
          readOnly: true
          type: integer
        currency:
          description: Currency used in the invoice. Needs to be currency code according
            to ISO-4217
          example: EUR
          nullable: false
          type: string
        sumNet:
          description: Net sum of the invoice
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTax:
          description: Tax sum of the invoice
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGross:
          description: Gross sum of the invoice
          format: float
          nullable: false
          readOnly: true
          type: number
        sumDiscounts:
          description: Sum of all discounts in the invoice
          format: float
          nullable: false
          readOnly: true
          type: number
        sumNetForeignCurrency:
          description: Net sum of the invoice in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTaxForeignCurrency:
          description: Tax sum of the invoice in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGrossForeignCurrency:
          description: Gross sum of the invoice in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumDiscountsForeignCurrency:
          description: Discounts sum of the invoice in the foreign currency
          format: float
          nullable: false
          readOnly: true
          type: number
        sumNetAccounting:
          description: Net accounting sum of the invoice. Is usually the same as sumNet
          format: float
          nullable: false
          readOnly: true
          type: number
        sumTaxAccounting:
          description: Tax accounting sum of the invoice. Is usually the same as sumTax
          format: float
          nullable: false
          readOnly: true
          type: number
        sumGrossAccounting:
          description: Gross accounting sum of the invoice. Is usually the same as
            sumGross
          format: float
          nullable: false
          readOnly: true
          type: number
        paidAmount:
          description: Amount which has already been paid for this invoice by the
            customer
          format: float
          nullable: true
          readOnly: true
          type: number
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the invoice. Otherwise gross amount"
          example: false
          nullable: false
          type: boolean
        enshrined:
          description: Defines if and when invoice was enshrined. Enshrined invoices
            can not be manipulated.
          format: date-time
          nullable: true
          readOnly: true
          type: string
        sendType:
          description: Type which was used to send the invoice.
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
        origin:
          $ref: '#/components/schemas/Model_Invoice_origin'
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
          example: null
        mapAll:
          nullable: false
          type: boolean
      required:
      - addressCountry
      - contact
      - contactPerson
      - currency
      - discount
      - invoiceDate
      - invoiceType
      - mapAll
      - status
      - taxRate
      - taxText
      - taxType
      title: Invoice model
      type: object
    Model_ContactAddressUpdate:
      description: ContactAddress model
      properties:
        contact:
          $ref: '#/components/schemas/Model_ContactAddressUpdate_contact'
        street:
          description: Street name
          example: South road 15
          nullable: true
          type: string
        zip:
          description: Zib code
          example: "12345"
          nullable: true
          type: string
        city:
          description: City name
          example: The North
          nullable: true
          type: string
        country:
          $ref: '#/components/schemas/Model_ContactAddressUpdate_country'
        category:
          $ref: '#/components/schemas/Model_ContactAddress_category'
        name:
          description: Name in address
          example: John Snow
          nullable: true
          type: string
        name2:
          description: Second name in address
          example: Targaryen
          type: string
        name3:
          description: Third name in address
          nullable: true
          type: string
        name4:
          description: Fourth name in address
          nullable: true
          type: string
      title: Contact address
      type: object
    Model_ContactUpdate:
      description: Contact model
      properties:
        name:
          description: |-
            The organization name.<br>
            Be aware that the type of contact will depend on this attribute.<br>
            If it holds a value, the contact will be regarded as an organization.
          nullable: true
          type: string
        status:
          default: 100
          description: Defines the status of the contact. 100 <-> Lead - 500 <-> Pending
            - 1000 <-> Active.
          nullable: true
          type: integer
        customerNumber:
          description: The customer number
          example: Customer-1337
          nullable: true
          type: string
        parent:
          $ref: '#/components/schemas/Model_ContactUpdate_parent'
        surename:
          description: |-
            The <b>first</b> name of the contact.<br>
            Yeah... not quite right in literally every way. We know.<br>
            Not to be used for organizations.
          example: John
          nullable: true
          type: string
        familyname:
          description: |-
            The last name of the contact.<br>
            Not to be used for organizations.
          example: Snow
          nullable: true
          type: string
        titel:
          description: |-
            A non-academic title for the contact.
            Not to be used for organizations.
          example: Commander
          nullable: true
          type: string
        category:
          $ref: '#/components/schemas/Model_ContactUpdate_category'
        description:
          description: A description for the contact.
          example: Rightful king of the seven kingdoms
          nullable: true
          type: string
        academicTitle:
          description: |-
            A academic title for the contact.
            Not to be used for organizations.
          nullable: true
          type: string
        gender:
          description: |-
            Gender of the contact.<br>
            Not to be used for organizations.
          nullable: true
          type: string
        name2:
          description: |-
            Second name of the contact.<br>
            Not to be used for organizations.
          example: Targaryen
          nullable: true
          type: string
        birthday:
          description: |-
            Birthday of the contact.<br>
            Not to be used for organizations.
          format: date
          nullable: true
          type: string
        vatNumber:
          description: Vat number of the contact.
          nullable: true
          type: string
        bankAccount:
          description: Bank account number (IBAN) of the contact.
          nullable: true
          type: string
        bankNumber:
          description: Bank number of the bank used by the contact.
          nullable: true
          type: string
        defaultCashbackTime:
          description: Absolute time in days which the contact has to pay his invoices
            and subsequently get a cashback.
          nullable: true
          type: integer
        defaultCashbackPercent:
          description: Percentage of the invoice sum the contact gets back if he payed
            invoices in time.
          format: float
          nullable: true
          type: number
        defaultTimeToPay:
          description: The payment goal in days which is set for every invoice of
            the contact.
          nullable: true
          type: integer
        taxNumber:
          description: The tax number of the contact.
          nullable: true
          type: string
        taxOffice:
          description: The tax office of the contact (only for greek customers).
          nullable: true
          type: string
        exemptVat:
          description: Defines if the contact is freed from paying vat.
          nullable: true
          type: boolean
        taxType:
          description: Defines which tax regulation the contact is using.
          enum:
          - default
          - eu
          - noteu
          - custom
          - ss
          nullable: true
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_Contact_taxSet'
        defaultDiscountAmount:
          description: |-
            The default discount the contact gets for every invoice.<br>
            Depending on defaultDiscountPercentage attribute, in percent or absolute value.
          format: float
          nullable: true
          type: number
        defaultDiscountPercentage:
          description: Defines if the discount is a percentage (true) or an absolute
            value (false).
          nullable: true
          type: boolean
        buyerReference:
          description: Buyer reference of the contact.
          nullable: true
          type: string
        governmentAgency:
          description: Defines whether the contact is a government agency (true) or
            not (false).
          nullable: true
          type: boolean
      title: Contact model
      type: object
    saveInvoice:
      properties:
        invoice:
          $ref: '#/components/schemas/Model_Invoice'
        invoicePosSave:
          $ref: '#/components/schemas/Model_InvoicePos'
        invoicePosDelete:
          $ref: '#/components/schemas/saveInvoice_invoicePosDelete'
        filename:
          description: Filename of a previously upload file which should be attached.
          format: binary
          type: string
        discountSave:
          $ref: '#/components/schemas/saveInvoice_discountSave'
        discountDelete:
          $ref: '#/components/schemas/saveInvoice_discountDelete'
      required:
      - invoice
      - invoicePos
      type: object
    Model_OrderResponse:
      description: Order model
      example:
        sumTax: sumTax
        orderType: AN
        orderNumber: Offer-1000
        footText: footText
        sendDate: 2000-01-23T04:56:07.000+00:00
        origin:
          objectName: Order
          id: "0"
        sumGross: sumGross
        update: 2000-01-23T04:56:07.000+00:00
        contactPerson:
          objectName: SevUser
          id: "0"
        sumTaxForeignCurrency: sumTaxForeignCurrency
        headText: headText
        sumGrossForeignCurrency: sumGrossForeignCurrency
        contact:
          objectName: Contact
          id: "0"
        sumDiscounts: sumDiscounts
        showNet: false
        create: 2000-01-23T04:56:07.000+00:00
        smallSettlement: false
        currency: EUR
        sumNetForeignCurrency: sumNetForeignCurrency
        id: "0"
        paymentTerms: paymentTerms
        taxType: default
        addressCountry:
          objectName: objectName
          id: id
        deliveryTerms: deliveryTerms
        taxText: Umsatzsteuer 19%
        address: address
        sevClient:
          objectName: SevClient
          id: "0"
        version: "0"
        taxRate: "19"
        sumNet: sumNet
        customerInternalNote: customerInternalNote
        taxSet:
          objectName: TaxSet
          id: "0"
        sendType: VPR
        objectName: Order
        header: My Offer-1000
        createUser:
          objectName: SevUser
          id: "0"
        orderDate: 2000-01-23T04:56:07.000+00:00
        sumDiscountsForeignCurrency: sumDiscountsForeignCurrency
        status: "100"
      properties:
        id:
          description: The order id
          example: "0"
          nullable: false
          readOnly: true
          type: string
        objectName:
          description: The order object name
          example: Order
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of order creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last order update
          format: date-time
          readOnly: true
          type: string
        orderNumber:
          description: The order number
          example: Offer-1000
          type: string
        contact:
          $ref: '#/components/schemas/Model_OrderResponse_contact'
        orderDate:
          description: Needs to be provided as timestamp or dd.mm.yyyy
          format: date-time
          nullable: false
          type: string
        status:
          description: "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>status\
            \ of orders</a>\r\n    to see what the different status codes mean"
          enum:
          - "100"
          - "200"
          - "300"
          - "500"
          - "750"
          - "1000"
          example: "100"
          nullable: false
          type: string
        header:
          description: Normally consist of prefix plus the order number
          example: My Offer-1000
          nullable: false
          type: string
        headText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        footText:
          description: Certain html tags can be used here to format your text
          nullable: true
          type: string
        addressCountry:
          $ref: '#/components/schemas/Model_OrderResponse_addressCountry'
        createUser:
          $ref: '#/components/schemas/Model_InvoiceResponse_createUser'
        sevClient:
          $ref: '#/components/schemas/Model_OrderResponse_sevClient'
        deliveryTerms:
          description: Delivery terms of the order
          nullable: true
          type: string
        paymentTerms:
          description: Payment terms of the order
          nullable: true
          type: string
        origin:
          $ref: '#/components/schemas/Model_OrderResponse_origin'
        version:
          description: "Version of the order.<br>\r\n    Can be used if you have multiple\
            \ drafts for the same order.<br>\r\n    Should start with 0"
          example: "0"
          nullable: false
          type: string
        smallSettlement:
          description: "Defines if the client uses the small settlement scheme.\r\n\
            \    If yes, the order must not contain any vat"
          example: false
          nullable: false
          type: boolean
        contactPerson:
          $ref: '#/components/schemas/Model_OrderResponse_contactPerson'
        taxRate:
          description: Is overwritten by order position tax rates
          example: "19"
          nullable: false
          type: string
        taxSet:
          $ref: '#/components/schemas/Model_OrderResponse_taxSet'
        taxText:
          description: A common tax text would be 'Umsatzsteuer 19%'
          example: Umsatzsteuer 19%
          nullable: false
          type: string
        taxType:
          description: |-
            Tax type of the order.
            There are four tax types:
            1. default - Umsatzsteuer ausweisen
            2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
            3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
            4. custom - Using custom tax set
            5. ss - Not subject to VAT according to §19 1 UStG
            Tax rates are heavily connected to the tax type used.
          example: default
          nullable: false
          type: string
        orderType:
          description: "Type of the order. For more information on the different types,\
            \ check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>this</a>\r\
            \n"
          enum:
          - AN
          - AB
          - LI
          example: AN
          nullable: false
          type: string
        sendDate:
          description: The date the order was sent to the customer
          format: date-time
          nullable: true
          type: string
        address:
          description: "Complete address of the recipient including name, street,\
            \ city, zip and country.<br>\r\n     Line breaks can be used and will\
            \ be displayed on the invoice pdf."
          nullable: true
          type: string
        currency:
          description: Currency used in the order. Needs to be currency code according
            to ISO-4217
          example: EUR
          nullable: false
          type: string
        sumNet:
          description: Net sum of the order
          nullable: false
          readOnly: true
          type: string
        sumTax:
          description: Tax sum of the order
          nullable: false
          readOnly: true
          type: string
        sumGross:
          description: Gross sum of the order
          nullable: false
          readOnly: true
          type: string
        sumDiscounts:
          description: Sum of all discounts in the order
          nullable: false
          readOnly: true
          type: string
        sumNetForeignCurrency:
          description: Net sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: string
        sumTaxForeignCurrency:
          description: Tax sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: string
        sumGrossForeignCurrency:
          description: Gross sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: string
        sumDiscountsForeignCurrency:
          description: Discounts sum of the order in the foreign currency
          nullable: false
          readOnly: true
          type: string
        customerInternalNote:
          description: Internal note of the customer. Contains data entered into field
            'Referenz/Bestellnummer'
          nullable: true
          type: string
        showNet:
          description: "If true, the net amount of each position will be shown on\
            \ the order. Otherwise gross amount"
          example: false
          nullable: false
          type: boolean
        sendType:
          description: "Type which was used to send the order. IMPORTANT: Please refer\
            \ to the order section of the\r\n     *     API-Overview to understand\
            \ how this attribute can be used before using it!"
          enum:
          - VPR
          - VPDF
          - VM
          - VP
          nullable: true
          type: string
      title: Order model
      type: object
    Model_VoucherPos:
      description: Voucher position model
      properties:
        id:
          description: The voucher position id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The voucher position object name
          nullable: false
          type: string
        mapAll:
          nullable: false
          type: boolean
        create:
          description: Date of voucher position creation
          example: 01.01.2020
          readOnly: true
          type: string
        update:
          description: Date of last voucher position update
          example: 01.01.2020
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_VoucherPos_sevClient'
        voucher:
          $ref: '#/components/schemas/Model_VoucherPos_voucher'
        accountingType:
          $ref: '#/components/schemas/Model_VoucherPos_accountingType'
        estimatedAccountingType:
          $ref: '#/components/schemas/Model_VoucherPos_estimatedAccountingType'
        taxRate:
          description: Tax rate of the voucher position.
          example: 19
          format: float
          type: number
        net:
          description: "Determines whether 'sumNet' or 'sumGross' is regarded.<br>\r\
            \n     If both are not given, 'sum' is regarded and treated as net or\
            \ gross depending on 'net'. \n All positions must be either net or gross,\
            \ a mixture of the two is not possible."
          example: true
          type: boolean
        isAsset:
          description: Determines whether position is regarded as an asset which can
            be depreciated.
          example: false
          type: boolean
        sumNet:
          description: "Net sum of the voucher position.<br>\r\n    Only regarded\
            \ if 'net' is 'true', otherwise its readOnly."
          example: 100
          format: float
          type: number
        sumTax:
          description: Tax sum of the voucher position.
          example: 19
          format: float
          readOnly: true
          type: number
        sumGross:
          description: "Gross sum of the voucher position.<br>\r\n    Only regarded\
            \ if 'net' is 'false', otherwise its readOnly."
          example: 119
          format: float
          type: number
        sumNetAccounting:
          description: Net accounting sum. Is equal to sumNet.
          format: float
          readOnly: true
          type: number
        sumTaxAccounting:
          description: Tax accounting sum. Is equal to sumTax.
          format: float
          readOnly: true
          type: number
        sumGrossAccounting:
          description: Gross accounting sum. Is equal to sumGross.
          format: float
          readOnly: true
          type: number
        comment:
          description: Comment for the voucher position.
          nullable: true
          type: string
      required:
      - accountingType
      - mapAll
      - net
      - objectName
      - sumGross
      - sumNet
      - taxRate
      - voucher
      title: VoucherPos model
      type: object
    Model_CommunicationWayResponse:
      description: Contact communication way model
      example:
        sevClient:
          objectName: SevClient
          id: "0"
        contact:
          objectName: Contact
          id: "0"
        objectName: CommunicationWay
        create: 2000-01-23T04:56:07.000+00:00
        update: 2000-01-23T04:56:07.000+00:00
        main: "0"
        id: "0"
        type: EMAIL
        value: value
        key:
          objectName: CommunicationWayKey
          id: "0"
      properties:
        id:
          description: The communication way id
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: The communication way object name
          example: CommunicationWay
          readOnly: true
          type: string
        create:
          description: Date of communication way creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last communication way update
          format: date-time
          readOnly: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_CommunicationWayResponse_contact'
        type:
          description: Type of the communication way
          enum:
          - EMAIL
          - PHONE
          - WEB
          - MOBILE
          example: EMAIL
          readOnly: true
          type: string
        value:
          description: "The value of the communication way.<br>\r\n     For example\
            \ the phone number, e-mail address or website."
          readOnly: true
          type: string
        key:
          $ref: '#/components/schemas/Model_CommunicationWayResponse_key'
        main:
          description: Defines whether the communication way is the main communication
            way for the contact.
          example: "0"
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_CommunicationWayResponse_sevClient'
      title: CommunicationWay model
      type: object
    Model_ChangeLayoutResponse:
      description: Layout model
      example:
        result: "1"
        metadaten:
          pages: 1
          docId: docId
          thumbs: "{}"
      properties:
        result:
          example: "1"
          type: string
        metadaten:
          $ref: '#/components/schemas/Model_ChangeLayoutResponse_metadaten'
      title: Layout model
      type: object
    Model_CreateInvoiceFromOrder:
      description: Invoice model
      properties:
        order:
          $ref: '#/components/schemas/Model_CreateInvoiceFromOrder_order'
        type:
          description: defines the type of amount
          enum:
          - percentage
          - net
          - gross
          nullable: true
          type: string
        amount:
          description: Amount which has already been paid for this Invoice
          example: 100
          nullable: true
          type: number
        partialType:
          description: |-
            defines the type of the invoice
            1. RE - Schlussrechnung
            2. TR - Teilrechnung
            3. AR - Abschlagsrechnung
          enum:
          - RE
          - TR
          - AR
          nullable: true
          type: string
      required:
      - order
      title: Create Invoice
    Model_ContactAddressResponse:
      description: ContactAddress model
      example:
        zip: "12345"
        country:
          objectName: StaticCountry
          id: 1
        sevClient:
          objectName: objectName
          id: 5
        city: The North
        update: 2000-01-23T04:56:07.000+00:00
        name4: name4
        name3: name3
        street: South road 15
        contact:
          objectName: Contact
          id: 6
        name: John Snow
        objectName: ContactAddress
        create: 2000-01-23T04:56:07.000+00:00
        id: 0
        category:
          objectName: objectName
          id: 5
        name2: Targaryen
      properties:
        id:
          description: The contact address id
          nullable: false
          readOnly: true
          type: integer
        objectName:
          description: The contact address object name
          example: ContactAddress
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of contact address creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last contact address update
          format: date-time
          readOnly: true
          type: string
        contact:
          $ref: '#/components/schemas/Model_ContactAddress_contact'
        street:
          description: Street name
          example: South road 15
          nullable: true
          type: string
        zip:
          description: Zib code
          example: "12345"
          nullable: true
          type: string
        city:
          description: City name
          example: The North
          nullable: true
          type: string
        country:
          $ref: '#/components/schemas/Model_ContactAddress_country'
        category:
          $ref: '#/components/schemas/Model_ContactAddress_category'
        name:
          description: Name in address
          example: John Snow
          nullable: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_ContactAddress_sevClient'
        name2:
          description: Second name in address
          example: Targaryen
          type: string
        name3:
          description: Third name in address
          nullable: true
          type: string
        name4:
          description: Fourth name in address
          nullable: true
          type: string
      required:
      - contact
      - country
      title: Contact address
      type: object
    saveCreditNote:
      properties:
        creditNote:
          $ref: '#/components/schemas/Model_creditNote'
        creditNotePosSave:
          $ref: '#/components/schemas/Model_creditNotePos'
        creditNotePosDelete:
          $ref: '#/components/schemas/saveCreditNote_creditNotePosDelete'
        filename:
          description: Filename of a previously upload file which should be attached.
          format: binary
          type: string
        discountSave:
          $ref: '#/components/schemas/saveCreditNote_discountSave'
        discountDelete:
          $ref: '#/components/schemas/saveCreditNote_discountDelete'
      required:
      - creditNote
      - creditNotePos
      type: object
    Model_VoucherPosResponse:
      description: Voucher position model
      example:
        sumTax: "19"
        sumGrossAccounting: "0"
        sevClient:
          objectName: SevClient
          id: "0"
        voucher:
          objectName: Voucher
          id: "0"
        accountingType:
          objectName: AccountingType
          id: "0"
        sumGross: "119"
        update: 01.01.2020
        taxRate: "19"
        sumNet: "100"
        isAsset: false
        sumNetAccounting: "0"
        objectName: objectName
        create: 01.01.2020
        estimatedAccountingType:
          objectName: AccountingType
          id: "0"
        comment: comment
        id: "0"
        sumTaxAccounting: "0"
        net: true
      properties:
        id:
          description: The voucher position id
          example: "0"
          nullable: false
          readOnly: true
          type: string
        objectName:
          description: The voucher position object name
          nullable: false
          readOnly: true
          type: string
        create:
          description: Date of voucher position creation
          example: 01.01.2020
          readOnly: true
          type: string
        update:
          description: Date of last voucher position update
          example: 01.01.2020
          readOnly: true
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_VoucherPosResponse_sevClient'
        voucher:
          $ref: '#/components/schemas/Model_VoucherPosResponse_voucher'
        accountingType:
          $ref: '#/components/schemas/Model_VoucherPosResponse_accountingType'
        estimatedAccountingType:
          $ref: '#/components/schemas/Model_VoucherPosResponse_estimatedAccountingType'
        taxRate:
          description: Tax rate of the voucher position.
          example: "19"
          type: string
        net:
          description: "Determines whether 'sumNet' or 'sumGross' is regarded.<br>\r\
            \n     If both are not given, 'sum' is regarded and treated as net or\
            \ gross depending on 'net'.\n All positions must be either net or gross,\
            \ a mixture of the two is not possible."
          example: true
          type: boolean
        isAsset:
          description: Determines whether position is regarded as an asset which can
            be depreciated.
          example: false
          type: boolean
        sumNet:
          description: "Net sum of the voucher position.<br>\r\n    Only regarded\
            \ if 'net' is 'true', otherwise its readOnly."
          example: "100"
          type: string
        sumTax:
          description: Tax sum of the voucher position.
          example: "19"
          readOnly: true
          type: string
        sumGross:
          description: "Gross sum of the voucher position.<br>\r\n    Only regarded\
            \ if 'net' is 'false', otherwise its readOnly."
          example: "119"
          type: string
        sumNetAccounting:
          description: Net accounting sum. Is equal to sumNet.
          example: "0"
          readOnly: true
          type: string
        sumTaxAccounting:
          description: Tax accounting sum. Is equal to sumTax.
          example: "0"
          readOnly: true
          type: string
        sumGrossAccounting:
          description: Gross accounting sum. Is equal to sumGross.
          example: "0"
          readOnly: true
          type: string
        comment:
          description: Comment for the voucher position.
          nullable: true
          type: string
      required:
      - accountingType
      - net
      - sumGross
      - sumNet
      - taxRate
      - voucher
      title: VoucherPos model
      type: object
    Model_ContactCustomFieldResponse:
      description: contact fields model
      example:
        sevClient:
          objectName: SevClient
          id: "0"
        contact:
          objectName: Contact
          id: "0"
        contactCustomFieldSetting: null
        objectName: ContactCustomField
        create: 2000-01-23T04:56:07.000+00:00
        update: 2000-01-23T04:56:07.000+00:00
        id: "0"
        value: value
      properties:
        id:
          description: id of the contact field
          example: "0"
          type: string
        objectName:
          description: Internal object name which is 'ContactCustomField'.
          example: ContactCustomField
          type: string
        create:
          description: Date of contact field creation
          format: date-time
          type: string
        update:
          description: Date of contact field update
          format: date-time
          type: string
        sevClient:
          $ref: '#/components/schemas/Model_ContactCustomFieldResponse_sevClient'
        contact:
          $ref: '#/components/schemas/Model_ContactCustomFieldResponse_contact'
        contactCustomFieldSetting:
          $ref: '#/components/schemas/Model_ContactCustomFieldResponse_contactCustomFieldSetting'
        value:
          description: The value of the contact field
          type: string
      title: contact fields model
    Model_Discount:
      description: Discount model
      example:
        sevClient: "0"
        percentage: "1"
        objectName: Discounts
        create: 2000-01-23T04:56:07.000+00:00
        update: 2000-01-23T04:56:07.000+00:00
        id: "0"
        text: text
        value: "10"
        isNet: "1"
        object:
          objectName: Order
          id: "0"
      properties:
        id:
          description: the id of the discount
          example: "0"
          readOnly: true
          type: string
        objectName:
          description: "Model name, which is 'Discounts'"
          example: Discounts
          readOnly: true
          type: string
        create:
          description: Date of discount creation
          format: date-time
          readOnly: true
          type: string
        update:
          description: Date of last discount update
          format: date-time
          readOnly: true
          type: string
        object:
          $ref: '#/components/schemas/Model_Discount_object'
        sevClient:
          description: Client to which invoice belongs. Will be filled automatically
          example: "0"
          readOnly: true
          type: string
        text:
          description: A text describing your position.
          readOnly: true
          type: string
        percentage:
          description: Defines if this is a percentage or an absolute discount
          example: "1"
          type: string
        value:
          description: Value of the discount
          example: "10"
          type: string
        isNet:
          description: |-
            Defines is the Discount net or gross
            0 - gross
            1 - net
          example: "1"
          type: string
      title: Discounts
    bookVoucher_request_checkAccount:
      description: The check account on which should be booked.
      properties:
        id:
          description: The id of the check account on which should be booked.
          type: integer
        objectName:
          description: Internal object name which is 'CheckAccount'.
          example: CheckAccount
          type: string
      required:
      - id
      - objectName
      type: object
    bookVoucher_request_checkAccountTransaction:
      description: "The check account transaction on which should be booked.<br>\r\
        \n    The transaction will be linked to the voucher."
      properties:
        id:
          description: The id of the check account transaction on which should be
            booked.
          type: integer
        objectName:
          description: Internal object name which is 'CheckAccountTransaction'.
          example: CheckAccountTransaction
          type: string
      required:
      - id
      - objectName
      type: object
    bookVoucher_request:
      properties:
        amount:
          description: Amount which should be booked. Can also be a partial amount.
          type: number
        date:
          description: The booking date. Most likely the current date.
          format: date-time
          nullable: false
          type: string
        type:
          description: "Define a type for the booking.<br>\r\n    The following type\
            \ abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\
            \n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <->\
            \ Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher\
            \ amount due to currency fluctuations</li>\r\n    <li>O <-> Reduced/Higher\
            \ amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due\
            \ to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the\
            \ monetary traffic costs</li>\r\n    </ul>"
          enum:
          - "N"
          - CB
          - CF
          - O
          - OF
          - MTC
          type: string
        checkAccount:
          $ref: '#/components/schemas/bookVoucher_request_checkAccount'
        checkAccountTransaction:
          $ref: '#/components/schemas/bookVoucher_request_checkAccountTransaction'
        createFeed:
          description: Determines if a feed is created for the booking process.
          type: boolean
      required:
      - amount
      - checkAccount
      - date
      - type
      type: object
    bookVoucher_200_response:
      example:
        objects:
        - "{}"
        - "{}"
      properties:
        objects:
          description: "TODO: Document VoucherLog and enter scheme here"
          items:
            type: object
          type: array
      type: object
    invoiceGetPdf_200_response:
      example:
        filename: filename
        base64encoded: base64encoded
        mimeType: mimeType
        content: ""
      properties:
        filename:
          type: string
        mimeType:
          type: string
        content:
          format: binary
          type: string
        base64encoded:
          type: string
      type: object
    getAccountingContactById_200_response:
      example:
        objects:
        - debitorNumber: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          contact:
            objectName: Contact
            id: "0"
          creditorNumber: "0"
          objectName: AccountingContact
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          id: "0"
        - debitorNumber: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          contact:
            objectName: Contact
            id: "0"
          creditorNumber: "0"
          objectName: AccountingContact
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          id: "0"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_AccountingContactResponse'
          type: array
      type: object
    deleteAccountingContact_200_response:
      example:
        objects:
        - objects
        - objects
      properties:
        objects:
          items:
            type: string
          type: array
      type: object
    getCheckAccountTransactionById_200_response:
      example:
        objects:
        - amount: "100"
          sevClient:
            objectName: SevClient
            id: "0"
          entryDate: 2000-01-23T04:56:07.000+00:00
          enshrined: 2000-01-23T04:56:07.000+00:00
          sourceTransaction:
            objectName: CheckAccountTransaction
            id: "0"
          targetTransaction:
            objectName: CheckAccountTransaction
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          valueDate: 2000-01-23T04:56:07.000+00:00
          checkAccount:
            objectName: CheckAccount
            id: "0"
          objectName: CheckAccountTransaction
          create: 2000-01-23T04:56:07.000+00:00
          paymtPurpose: salary
          id: "0"
          payeePayerName: Cercei Lannister
          status: "100"
        - amount: "100"
          sevClient:
            objectName: SevClient
            id: "0"
          entryDate: 2000-01-23T04:56:07.000+00:00
          enshrined: 2000-01-23T04:56:07.000+00:00
          sourceTransaction:
            objectName: CheckAccountTransaction
            id: "0"
          targetTransaction:
            objectName: CheckAccountTransaction
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          valueDate: 2000-01-23T04:56:07.000+00:00
          checkAccount:
            objectName: CheckAccount
            id: "0"
          objectName: CheckAccountTransaction
          create: 2000-01-23T04:56:07.000+00:00
          paymtPurpose: salary
          id: "0"
          payeePayerName: Cercei Lannister
          status: "100"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_CheckAccountTransactionResponse'
          type: array
      type: object
    sendCreditNoteByPrinting_200_response:
      example:
        objects:
        - sumTax: "0"
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          creditNoteNumber: Offer-1000
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: headText
          sumGrossForeignCurrency: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: "0"
          id: "0"
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          creditNoteType: CN
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          creditNoteDate: 2000-01-23T04:56:07.000+00:00
          version: "0"
          taxRate: "19"
          sumNet: "0"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: objectName
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          sumDiscountsForeignCurrency: "0"
          status: "100"
        - sumTax: "0"
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          creditNoteNumber: Offer-1000
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: headText
          sumGrossForeignCurrency: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: "0"
          id: "0"
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          creditNoteType: CN
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          creditNoteDate: 2000-01-23T04:56:07.000+00:00
          version: "0"
          taxRate: "19"
          sumNet: "0"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: objectName
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          sumDiscountsForeignCurrency: "0"
          status: "100"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_creditNoteResponse'
          type: array
      type: object
    getContactFieldSettings_200_response:
      example:
        objects:
        - identifier: identifier
          sevClient:
            objectName: SevClient
            id: "0"
          name: name
          objectName: ContactCustomFieldSetting
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          description: description
          id: "1"
        - identifier: identifier
          sevClient:
            objectName: SevClient
            id: "0"
          name: name
          objectName: ContactCustomFieldSetting
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          description: description
          id: "1"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_ContactCustomFieldSettingResponse'
          type: array
    exportInvoice_sevQuery_parameter_filter_contact:
      description: filters the invoices by contact
      properties:
        id:
          description: ID of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    exportInvoice_sevQuery_parameter_filter:
      properties:
        invoiceType:
          description: "Type of invoices you want to export\n1. RE - Rechnung\n2.\
            \ SR - Stornorechnung\n3. TR - Teilrechnung\n4. AR - Abschlagsrechnung\n\
            5. ER - Endrechnung\n6. WKR - Wiederkehrende Rechnung\n7. MA - Mahnung "
          items:
            enum:
            - Re
            - SR
            - TR
            - AR
            - ER
            - WKR
            - MA
            type: string
          type: array
        startDate:
          description: Start date of the invoice
          format: date-time
          type: string
        endDate:
          description: End date of the invoice
          format: date-time
          type: string
        contact:
          $ref: '#/components/schemas/exportInvoice_sevQuery_parameter_filter_contact'
        startAmount:
          description: filters the invoices by amount
          example: 100
          type: integer
        endAmount:
          description: filters the invoices by amount
          example: 150
          type: integer
      type: object
    exportInvoice_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: "Model name, which is 'Invoice'"
        objectName:
          description: "Model name, which is 'SevQuery'"
          example: SevQuery
        filter:
          $ref: '#/components/schemas/exportInvoice_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    sendInvoiceViaEMail_request:
      properties:
        toEmail:
          description: The recipient of the email.
          type: string
        subject:
          description: The subject of the email.
          type: string
        text:
          description: The text of the email. Can contain html.
          type: string
        copy:
          description: Should a copy of this email be sent to you?
          type: boolean
        additionalAttachments:
          description: "Additional attachments to the mail. String of IDs of existing\
            \ documents in your\r\n     *                      sevdesk account separated\
            \ by ','"
          type: string
        ccEmail:
          description: "String of mail addresses to be put as cc separated by ','"
          type: string
        bccEmail:
          description: "String of mail addresses to be put as bcc separated by ','"
          type: string
      required:
      - subject
      - text
      - toEmail
      type: object
    sendInvoiceViaEMail_201_response:
      example:
        objects:
        - cc: cc
          bcc: bcc
          sevClient:
            objectName: objectName
            id: 1
          subject: subject
          update: 2000-01-23T04:56:07.000+00:00
          arrived: 2000-01-23T04:56:07.000+00:00
          objectName: objectName
          create: 2000-01-23T04:56:07.000+00:00
          from: from
          id: 0
          to: to
          text: text
          object:
            objectName: objectName
            id: 6
        - cc: cc
          bcc: bcc
          sevClient:
            objectName: objectName
            id: 1
          subject: subject
          update: 2000-01-23T04:56:07.000+00:00
          arrived: 2000-01-23T04:56:07.000+00:00
          objectName: objectName
          create: 2000-01-23T04:56:07.000+00:00
          from: from
          id: 0
          to: to
          text: text
          object:
            objectName: objectName
            id: 6
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_Email'
          type: array
      type: object
    exportVoucher_sevQuery_parameter_filter_contact:
      description: filters the vouchers by contact
      properties:
        id:
          description: ID of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    exportVoucher_sevQuery_parameter_filter:
      properties:
        startDate:
          description: Start date of the voucher
          format: date-time
          type: string
        endDate:
          description: End date of the voucher
          format: date-time
          type: string
        startPayDate:
          description: Start pay date of the voucher
          format: date-time
          type: string
        endPayDate:
          description: End pay date of the voucher
          format: date-time
          type: string
        contact:
          $ref: '#/components/schemas/exportVoucher_sevQuery_parameter_filter_contact'
        startAmount:
          description: filters the vouchers by amount
          example: 100
          type: integer
        endAmount:
          description: filters the vouchers by amount
          example: 150
          type: integer
      type: object
    exportVoucher_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: "Model name, which is 'Voucher'"
        objectName:
          description: "Model name, which is 'SevQuery'"
          example: SevQuery
        filter:
          $ref: '#/components/schemas/exportVoucher_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    getOrderPositions_200_response:
      example:
        objects:
        - quantity: "1"
          sevClient:
            objectName: objectName
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          discount: discount
          optional: true
          positionNumber: "1"
          priceNet: "100"
          priceGross: "119"
          unity:
            objectName: Unity
            id: "0"
          taxRate: "19"
          price: "100"
          name: Dragonglass
          objectName: OrderPos
          create: 2000-01-23T04:56:07.000+00:00
          id: "0"
          priceTax: "19"
          text: text
          order:
            objectName: Order
            id: "0"
          sumDiscount: sumDiscount
        - quantity: "1"
          sevClient:
            objectName: objectName
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          discount: discount
          optional: true
          positionNumber: "1"
          priceNet: "100"
          priceGross: "119"
          unity:
            objectName: Unity
            id: "0"
          taxRate: "19"
          price: "100"
          name: Dragonglass
          objectName: OrderPos
          create: 2000-01-23T04:56:07.000+00:00
          id: "0"
          priceTax: "19"
          text: text
          order:
            objectName: Order
            id: "0"
          sumDiscount: sumDiscount
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_OrderPosResponse'
          type: array
      type: object
    bookInvoice_request_checkAccountTransaction:
      description: "The check account transaction on which should be booked.<br>\r\
        \n    The transaction will be linked to the invoice."
      properties:
        id:
          description: The id of the check account transaction on which should be
            booked.
          type: integer
        objectName:
          description: Internal object name which is 'CheckAccountTransaction'.
          example: CheckAccountTransaction
          type: string
      required:
      - id
      - objectName
      type: object
    bookInvoice_request:
      properties:
        amount:
          description: Amount which should be booked. Can also be a partial amount.
          type: number
        date:
          description: The booking date. Most likely the current date.
          type: integer
        type:
          description: "Define a type for the booking.<br>\r\n    The following type\
            \ abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\
            \n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <->\
            \ Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher\
            \ amount due to currency fluctuations</li>\r\n    <li>O <-> Reduced/Higher\
            \ amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due\
            \ to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the\
            \ monetary traffic costs</li>\r\n    </ul>"
          enum:
          - "N"
          - CB
          - CF
          - O
          - OF
          - MTC
          type: string
        checkAccount:
          $ref: '#/components/schemas/bookVoucher_request_checkAccount'
        checkAccountTransaction:
          $ref: '#/components/schemas/bookInvoice_request_checkAccountTransaction'
        createFeed:
          description: Determines if a feed is created for the booking process.
          type: boolean
      required:
      - amount
      - checkAccount
      - date
      - type
      type: object
    bookInvoice_200_response:
      example:
        objects:
        - "{}"
        - "{}"
      properties:
        objects:
          description: "TODO: Document InvoiceLog and enter scheme here"
          items:
            type: object
          type: array
      type: object
    getDiscounts_200_response:
      example:
        objects:
        - sevClient: "0"
          percentage: "1"
          objectName: Discounts
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          id: "0"
          text: text
          value: "10"
          isNet: "1"
          object:
            objectName: Order
            id: "0"
        - sevClient: "0"
          percentage: "1"
          objectName: Discounts
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          id: "0"
          text: text
          value: "10"
          isNet: "1"
          object:
            objectName: Order
            id: "0"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_Discount'
          type: array
      type: object
    createPackingListFromOrder_200_response:
      example:
        objects:
        - sumTax: sumTax
          orderType: AN
          orderNumber: Offer-1000
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: Order
            id: "0"
          sumGross: sumGross
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: sumTaxForeignCurrency
          headText: headText
          sumGrossForeignCurrency: sumGrossForeignCurrency
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: sumDiscounts
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: sumNetForeignCurrency
          id: "0"
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: objectName
            id: id
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          version: "0"
          taxRate: "19"
          sumNet: sumNet
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: Order
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          orderDate: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: sumDiscountsForeignCurrency
          status: "100"
        - sumTax: sumTax
          orderType: AN
          orderNumber: Offer-1000
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: Order
            id: "0"
          sumGross: sumGross
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: sumTaxForeignCurrency
          headText: headText
          sumGrossForeignCurrency: sumGrossForeignCurrency
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: sumDiscounts
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: sumNetForeignCurrency
          id: "0"
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: objectName
            id: id
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          version: "0"
          taxRate: "19"
          sumNet: sumNet
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: Order
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          orderDate: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: sumDiscountsForeignCurrency
          status: "100"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_OrderResponse'
          type: array
      type: object
    getIsInvoicePartiallyPaid_200_response:
      example:
        objects: true
      properties:
        objects:
          type: boolean
      type: object
    getInvoiceById_200_response:
      example:
        objects:
        - sumTax: "19"
          sumGrossAccounting: "0"
          sendDate: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          reminderDebit: "0"
          reminderTotal: "0"
          reminderCharge: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          dunningLevel: "0"
          create: 2000-01-23T04:56:07.000+00:00
          invoiceType: RE
          sumNetForeignCurrency: "0"
          id: "0"
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          costCentre:
            objectName: CostCentre
            id: "0"
          taxRate: "19"
          accountNextInvoice: "1647259198"
          sumNet: "100"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          header: My RE-1000
          paymentMethod:
            objectName: PaymentMethod
            id: "0"
          deliveryDateUntil: "0"
          sumTaxAccounting: "0"
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          status: "100"
          footText: footer information
          accountIntervall: 2022-03-14
          reminderDeadline: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: objectName
            id: "0"
          sumGross: "119"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: header information
          sumGrossForeignCurrency: "0"
          sumNetAccounting: "0"
          invoiceNumber: RE-1000
          showNet: false
          sendPaymentReceivedNotificationDate: "0"
          smallSettlement: false
          currency: EUR
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxText: Umsatzsteuer 19%
          address: |-
            name
            street
            postCode city
          sevClient:
            objectName: SevClient
            id: "0"
          enshrined: 2000-01-23T04:56:07.000+00:00
          invoiceDate: 01.01.20
          datevConnectOnline: "{}"
          discountTime: "0"
          timeToPay: "10"
          objectName: Invoice
          createUser:
            objectName: SevUser
            id: "0"
          payDate: 2000-01-23T04:56:07.000+00:00
        - sumTax: "19"
          sumGrossAccounting: "0"
          sendDate: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          reminderDebit: "0"
          reminderTotal: "0"
          reminderCharge: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          dunningLevel: "0"
          create: 2000-01-23T04:56:07.000+00:00
          invoiceType: RE
          sumNetForeignCurrency: "0"
          id: "0"
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          costCentre:
            objectName: CostCentre
            id: "0"
          taxRate: "19"
          accountNextInvoice: "1647259198"
          sumNet: "100"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          header: My RE-1000
          paymentMethod:
            objectName: PaymentMethod
            id: "0"
          deliveryDateUntil: "0"
          sumTaxAccounting: "0"
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          status: "100"
          footText: footer information
          accountIntervall: 2022-03-14
          reminderDeadline: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: objectName
            id: "0"
          sumGross: "119"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: header information
          sumGrossForeignCurrency: "0"
          sumNetAccounting: "0"
          invoiceNumber: RE-1000
          showNet: false
          sendPaymentReceivedNotificationDate: "0"
          smallSettlement: false
          currency: EUR
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxText: Umsatzsteuer 19%
          address: |-
            name
            street
            postCode city
          sevClient:
            objectName: SevClient
            id: "0"
          enshrined: 2000-01-23T04:56:07.000+00:00
          invoiceDate: 01.01.20
          datevConnectOnline: "{}"
          discountTime: "0"
          timeToPay: "10"
          objectName: Invoice
          createUser:
            objectName: SevUser
            id: "0"
          payDate: 2000-01-23T04:56:07.000+00:00
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_InvoiceResponse'
          type: array
      type: object
    contactAddressId_200_response:
      example:
        objects:
        - zip: "12345"
          country:
            objectName: StaticCountry
            id: 1
          sevClient:
            objectName: objectName
            id: 5
          city: The North
          update: 2000-01-23T04:56:07.000+00:00
          name4: name4
          name3: name3
          street: South road 15
          contact:
            objectName: Contact
            id: 6
          name: John Snow
          objectName: ContactAddress
          create: 2000-01-23T04:56:07.000+00:00
          id: 0
          category:
            objectName: objectName
            id: 5
          name2: Targaryen
        - zip: "12345"
          country:
            objectName: StaticCountry
            id: 1
          sevClient:
            objectName: objectName
            id: 5
          city: The North
          update: 2000-01-23T04:56:07.000+00:00
          name4: name4
          name3: name3
          street: South road 15
          contact:
            objectName: Contact
            id: 6
          name: John Snow
          objectName: ContactAddress
          create: 2000-01-23T04:56:07.000+00:00
          id: 0
          category:
            objectName: objectName
            id: 5
          name2: Targaryen
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_ContactAddressResponse'
          type: array
      type: object
    getContactFieldsById_200_response:
      example:
        objects:
        - sevClient:
            objectName: SevClient
            id: "0"
          contact:
            objectName: Contact
            id: "0"
          contactCustomFieldSetting: null
          objectName: ContactCustomField
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          id: "0"
          value: value
        - sevClient:
            objectName: SevClient
            id: "0"
          contact:
            objectName: Contact
            id: "0"
          contactCustomFieldSetting: null
          objectName: ContactCustomField
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          id: "0"
          value: value
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_ContactCustomFieldResponse'
          type: array
    getLetterpapersWithThumb_200_response_letterpapers:
      example:
        default: 0
        img: img
        pdf: pdf
        sevClient: "0"
        name: Blanko
        id: 57d7ff34f23ada297d265f21
      properties:
        id:
          example: 57d7ff34f23ada297d265f21
          type: string
        pdf:
          type: string
        sevClient:
          example: "0"
          type: string
        name:
          example: Blanko
          type: string
        default:
          type: integer
        img:
          type: string
      type: object
    getLetterpapersWithThumb_200_response:
      example:
        result: "1"
        letterpapers:
          default: 0
          img: img
          pdf: pdf
          sevClient: "0"
          name: Blanko
          id: 57d7ff34f23ada297d265f21
      properties:
        result:
          example: "1"
          type: string
        letterpapers:
          $ref: '#/components/schemas/getLetterpapersWithThumb_200_response_letterpapers'
    reportInvoice_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: Model name which is exported
          example: Order
        objectName:
          description: SevQuery object name
          example: SevQuery
        filter:
          $ref: '#/components/schemas/exportInvoice_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    reportOrder_sevQuery_parameter_filter_contact:
      description: filters the orders by contact
      properties:
        id:
          description: ID of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    reportOrder_sevQuery_parameter_filter:
      properties:
        orderType:
          description: |-
            Type of orders you want to export
            1. AN - Angebote
            2. AB - Aufträge
            3. LI - Lieferscheine
          enum:
          - AN
          - AB
          - LI
          type: string
        startDate:
          description: Start date of the order
          format: date-time
          type: string
        endDate:
          description: End date of the order
          format: date-time
          type: string
        contact:
          $ref: '#/components/schemas/reportOrder_sevQuery_parameter_filter_contact'
        startAmount:
          description: filters the orders by amount
          example: 100
          type: integer
        endAmount:
          description: filters the orders by amount
          example: 150
          type: integer
      type: object
    reportOrder_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: Model name which is exported
          example: Order
        objectName:
          description: SevQuery object name
          example: SevQuery
        filter:
          $ref: '#/components/schemas/reportOrder_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    getCommunicationWayKeys_200_response:
      example:
        translationCode: COMM_WAY_KEY_WORK
        name: Arbeit
        objectName: CommunicationWayKey
        create: 2000-01-23T04:56:07.000+00:00
        upadate: 2000-01-23T04:56:07.000+00:00
        id: "2"
      properties:
        id:
          description: |-
            The id of the communication way key
            1. ID: 1 - Privat
            2. ID: 2 - Arbeit
            3. ID: 3 - Fax
            4. ID: 4 - Mobil
            5. ID: 5 - " "
            6. ID: 6 - Autobox
            7. ID: 7 - Newsletter
            8. ID: 8 - Rechnungsadresse
          example: "2"
          type: string
        objectName:
          description: object name which is 'CommunicationWayKey'.
          example: CommunicationWayKey
          type: string
        create:
          description: Date the communication way key was created
          format: date-time
          type: string
        upadate:
          description: Date the communication way key was last updated
          format: date-time
          type: string
        name:
          description: Name of the communication way key
          enum:
          - Arbeit
          - Autobox
          - Fax
          - Mobil
          - Newsletter
          - Privat
          - Rechnungsadresse
          - ' '
          example: Arbeit
          type: string
        translationCode:
          example: COMM_WAY_KEY_WORK
          type: string
    updateOrderTemplate_200_response:
      example:
        objects:
        - result: "1"
          metadaten:
            pages: 1
            docId: docId
            thumbs: "{}"
        - result: "1"
          metadaten:
            pages: 1
            docId: docId
            thumbs: "{}"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_ChangeLayoutResponse'
          type: array
      type: object
    getContactTabsItemCountById_200_response:
      example:
        persons: 5.637376656633329
        creditNotes: 1.4658129805029452
        invoicePos: 9.301444243932576
        invoices: 6.027456183070403
        documents: 5.962133916683182
        parts: "0"
        orders: 0.8008281904610115
        vouchers: 2.3021358869347655
        letters: 7.061401241503109
      properties:
        orders:
          type: number
        invoices:
          type: number
        creditNotes:
          type: number
        documents:
          type: number
        persons:
          type: number
        vouchers:
          type: number
        letters:
          type: number
        parts:
          example: "0"
          type: string
        invoicePos:
          type: number
      type: object
    getTagById_200_response:
      example:
        objects:
        - sevClient:
            objectName: SevClient
            id: "0"
          name: name
          objectName: Tag
          create: 2000-01-23T04:56:07.000+00:00
          id: "1"
        - sevClient:
            objectName: SevClient
            id: "0"
          name: name
          objectName: Tag
          create: 2000-01-23T04:56:07.000+00:00
          id: "1"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_TagResponse'
          type: array
    updateTag_request:
      properties:
        name:
          description: The name of the tag u want to update
          type: string
    getVoucherById_200_response:
      example:
        objects:
        - sumTax: "0"
          sumGrossAccounting: "0"
          recurringLastVoucher: 2000-01-23T04:56:07.000+00:00
          document:
            objectName: Document
            id: "0"
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          description: Voucher-1000
          supplier:
            objectName: Contact
            id: "0"
          sumNetAccounting: "0"
          sumDiscounts: "0"
          create: 2000-01-23T04:56:07.000+00:00
          voucherDate: 2000-01-23T04:56:07.000+00:00
          currency: EUR
          id: "0"
          creditDebit: C
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxType: default
          recurringInterval: P0Y0M1W
          supplierName: John Snow
          sevClient:
            objectName: SevClient
            id: "0"
          voucherType: VOU
          recurringStartDate: 2000-01-23T04:56:07.000+00:00
          enshrined: 2000-01-23T04:56:07.000+00:00
          propertyExchangeRate: "0.8912"
          recurringEndDate: 2000-01-23T04:56:07.000+00:00
          costCentre:
            objectName: objectName
            id: "0"
          mapAll: true
          sumNet: "0"
          taxSet:
            objectName: TaxSet
            id: "0"
          objectName: objectName
          createUser:
            objectName: SevUser
            id: "0"
          recurringNextVoucher: 2000-01-23T04:56:07.000+00:00
          paymentDeadline: 2000-01-23T04:56:07.000+00:00
          deliveryDateUntil: 2000-01-23T04:56:07.000+00:00
          sumTaxAccounting: "0"
          propertyForeignCurrencyDeadline: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          payDate: 2000-01-23T04:56:07.000+00:00
          status: "50"
        - sumTax: "0"
          sumGrossAccounting: "0"
          recurringLastVoucher: 2000-01-23T04:56:07.000+00:00
          document:
            objectName: Document
            id: "0"
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          description: Voucher-1000
          supplier:
            objectName: Contact
            id: "0"
          sumNetAccounting: "0"
          sumDiscounts: "0"
          create: 2000-01-23T04:56:07.000+00:00
          voucherDate: 2000-01-23T04:56:07.000+00:00
          currency: EUR
          id: "0"
          creditDebit: C
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxType: default
          recurringInterval: P0Y0M1W
          supplierName: John Snow
          sevClient:
            objectName: SevClient
            id: "0"
          voucherType: VOU
          recurringStartDate: 2000-01-23T04:56:07.000+00:00
          enshrined: 2000-01-23T04:56:07.000+00:00
          propertyExchangeRate: "0.8912"
          recurringEndDate: 2000-01-23T04:56:07.000+00:00
          costCentre:
            objectName: objectName
            id: "0"
          mapAll: true
          sumNet: "0"
          taxSet:
            objectName: TaxSet
            id: "0"
          objectName: objectName
          createUser:
            objectName: SevUser
            id: "0"
          recurringNextVoucher: 2000-01-23T04:56:07.000+00:00
          paymentDeadline: 2000-01-23T04:56:07.000+00:00
          deliveryDateUntil: 2000-01-23T04:56:07.000+00:00
          sumTaxAccounting: "0"
          propertyForeignCurrencyDeadline: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          payDate: 2000-01-23T04:56:07.000+00:00
          status: "50"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_VoucherResponse'
          type: array
      type: object
    exportTransactions_sevQuery_parameter_filter_checkAccount:
      properties:
        id:
          description: Id of the checkAccount
          type: integer
        objectName:
          description: "Model name, which is 'CheckAccount'"
          type: string
      required:
      - id
      - objectName
      type: object
    exportTransactions_sevQuery_parameter_filter:
      properties:
        paymtPurpose:
          description: the payment purpose
          example: salary
          type: string
        name:
          description: the name of the payee/payer
          example: Cercei Lannister
          type: string
        startDate:
          description: Start date of the transactions
          format: date-time
          type: string
        endDate:
          description: End date of the transactions
          format: date-time
          type: string
        startAmount:
          description: filters the transactions by amount
          example: 100
          type: integer
        endAmount:
          description: filters the transactions by amount
          example: 150
          type: integer
        checkAccount:
          $ref: '#/components/schemas/exportTransactions_sevQuery_parameter_filter_checkAccount'
      type: object
    exportTransactions_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: "Model name, which is 'CheckAccountTransaction'"
        objectName:
          description: "Model name, which is 'SevQuery'"
          example: SevQuery
        filter:
          $ref: '#/components/schemas/exportTransactions_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    reportVoucher_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: Model name which is exported
          example: Voucher
        objectName:
          description: SevQuery object name
          example: SevQuery
        filter:
          $ref: '#/components/schemas/exportVoucher_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    getPartById_200_response:
      example:
        objects:
        - sevClient:
            objectName: objectName
            id: 1
          stockEnabled: false
          update: 2000-01-23T04:56:07.000+00:00
          priceNet: 100
          priceGross: 119
          pricePurchase: 50
          internalComment: internalComment
          unity:
            objectName: Unity
            id: 1
          taxRate: 19
          price: 100
          name: Dragonglass
          objectName: objectName
          create: 2000-01-23T04:56:07.000+00:00
          partNumber: Part-1000
          id: 0
          text: text
          category:
            objectName: Category
            id: 6
          stock: 10000
          status: 100
        - sevClient:
            objectName: objectName
            id: 1
          stockEnabled: false
          update: 2000-01-23T04:56:07.000+00:00
          priceNet: 100
          priceGross: 119
          pricePurchase: 50
          internalComment: internalComment
          unity:
            objectName: Unity
            id: 1
          taxRate: 19
          price: 100
          name: Dragonglass
          objectName: objectName
          create: 2000-01-23T04:56:07.000+00:00
          partNumber: Part-1000
          id: 0
          text: text
          category:
            objectName: Category
            id: 6
          stock: 10000
          status: 100
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_Part'
          type: array
      type: object
    getInvoicePos_200_response:
      example:
        objects:
        - sumGrossAccounting: "0"
          quantity: "1"
          sevClient:
            objectName: SevClient
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          positionNumber: "0"
          priceNet: "0"
          priceGross: "100"
          unity:
            objectName: Unity
            id: "1"
          taxRate: "19"
          price: "100"
          sumNetAccounting: "0"
          name: Dragonglass
          objectName: InvoicePos
          create: 2000-01-23T04:56:07.000+00:00
          id: id
          invoice:
            objectName: Invoice
            id: "0"
          text: text
          sumTaxAccounting: "0"
          priceTax: "0"
          sumDiscount: "0"
        - sumGrossAccounting: "0"
          quantity: "1"
          sevClient:
            objectName: SevClient
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          positionNumber: "0"
          priceNet: "0"
          priceGross: "100"
          unity:
            objectName: Unity
            id: "1"
          taxRate: "19"
          price: "100"
          sumNetAccounting: "0"
          name: Dragonglass
          objectName: InvoicePos
          create: 2000-01-23T04:56:07.000+00:00
          id: id
          invoice:
            objectName: Invoice
            id: "0"
          text: text
          sumTaxAccounting: "0"
          priceTax: "0"
          sumDiscount: "0"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_InvoicePosResponse'
          type: array
      type: object
    invoiceRender_request:
      properties:
        forceReload:
          description: Define if a forceful re-render should occur.
          type: boolean
      type: object
    invoiceRender_201_response_objects_inner:
      example:
        pdfUrl: pdfUrl
        pages: 0
        docId: docId
      properties:
        docId:
          description: ID of the (temporary) document.
          type: string
        pdfUrl:
          description: The url location of the (temporary) document.
          type: string
        pages:
          description: The amount of pages of the document.
          type: integer
      type: object
    invoiceRender_201_response:
      example:
        objects:
        - pdfUrl: pdfUrl
          pages: 0
          docId: docId
        - pdfUrl: pdfUrl
          pages: 0
          docId: docId
      properties:
        objects:
          items:
            $ref: '#/components/schemas/invoiceRender_201_response_objects_inner'
          type: array
      type: object
    getContacts_200_response:
      example:
        objects:
        - birthday: 2000-01-23
          parent:
            objectName: Contact
            id: "0"
          gender: gender
          familyname: Snow
          defaultCashbackPercent: string
          exemptVat: "false"
          update: 2000-01-23T04:56:07.000+00:00
          description: Rightful king of the seven kingdoms
          defaultDiscountAmount: string
          surename: John
          defaultCashbackTime: string
          titel: Commander
          create: 2000-01-23T04:56:07.000+00:00
          defaultTimeToPay: string
          id: "0"
          taxOffice: string
          taxType: default
          bankAccount: bankAccount
          bankNumber: bankNumber
          defaultDiscountPercentage: "false"
          additionalInformation: string
          sevClient:
            objectName: SevClient
            id: 0
          buyerReference: string
          taxNumber: taxNumber
          governmentAgency: "false"
          customerNumber: Customer-1337
          academicTitle: academicTitle
          taxSet:
            objectName: TaxSet
            id: "0"
          name: string
          objectName: Contact
          category:
            objectName: Category
            id: "3"
          name2: Targaryen
          status: "100"
          vatNumber: vatNumber
        - birthday: 2000-01-23
          parent:
            objectName: Contact
            id: "0"
          gender: gender
          familyname: Snow
          defaultCashbackPercent: string
          exemptVat: "false"
          update: 2000-01-23T04:56:07.000+00:00
          description: Rightful king of the seven kingdoms
          defaultDiscountAmount: string
          surename: John
          defaultCashbackTime: string
          titel: Commander
          create: 2000-01-23T04:56:07.000+00:00
          defaultTimeToPay: string
          id: "0"
          taxOffice: string
          taxType: default
          bankAccount: bankAccount
          bankNumber: bankNumber
          defaultDiscountPercentage: "false"
          additionalInformation: string
          sevClient:
            objectName: SevClient
            id: 0
          buyerReference: string
          taxNumber: taxNumber
          governmentAgency: "false"
          customerNumber: Customer-1337
          academicTitle: academicTitle
          taxSet:
            objectName: TaxSet
            id: "0"
          name: string
          objectName: Contact
          category:
            objectName: Category
            id: "3"
          name2: Targaryen
          status: "100"
          vatNumber: vatNumber
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_ContactResponse'
          type: array
      type: object
    getCheckAccountById_200_response:
      example:
        objects:
        - sevClient:
            objectName: SevClient
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          defaultAccount: "0"
          type: online
          bankServer: bankServer
          autoMapTransactions: "1"
          importType: CSV
          name: Iron Bank
          objectName: CheckAccount
          create: 2000-01-23T04:56:07.000+00:00
          currency: EUR
          id: "0"
          status: "100"
        - sevClient:
            objectName: SevClient
            id: "0"
          update: 2000-01-23T04:56:07.000+00:00
          defaultAccount: "0"
          type: online
          bankServer: bankServer
          autoMapTransactions: "1"
          importType: CSV
          name: Iron Bank
          objectName: CheckAccount
          create: 2000-01-23T04:56:07.000+00:00
          currency: EUR
          id: "0"
          status: "100"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_CheckAccountResponse'
          type: array
      type: object
    exportCreditNote_sevQuery_parameter_filter_contact:
      description: filters the credit notes by contact
      properties:
        id:
          description: ID of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    exportCreditNote_sevQuery_parameter_filter:
      properties:
        startDate:
          description: Start date of the credit note
          format: date-time
          type: string
        endDate:
          description: End date of the credit note
          format: date-time
          type: string
        contact:
          $ref: '#/components/schemas/exportCreditNote_sevQuery_parameter_filter_contact'
        startAmount:
          description: filters the credit notes by amount
          example: 100
          type: integer
        endAmount:
          description: filters the credit notes by amount
          example: 150
          type: integer
      type: object
    exportCreditNote_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: "Model name, which is 'CreditNote'"
        objectName:
          description: "Model name, which is 'SevQuery'"
          example: SevQuery
        filter:
          $ref: '#/components/schemas/exportCreditNote_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    getCommunicationWayById_200_response:
      example:
        objects:
        - sevClient:
            objectName: SevClient
            id: "0"
          contact:
            objectName: Contact
            id: "0"
          objectName: CommunicationWay
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          main: "0"
          id: "0"
          type: EMAIL
          value: value
          key:
            objectName: CommunicationWayKey
            id: "0"
        - sevClient:
            objectName: SevClient
            id: "0"
          contact:
            objectName: Contact
            id: "0"
          objectName: CommunicationWay
          create: 2000-01-23T04:56:07.000+00:00
          update: 2000-01-23T04:56:07.000+00:00
          main: "0"
          id: "0"
          type: EMAIL
          value: value
          key:
            objectName: CommunicationWayKey
            id: "0"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_CommunicationWayResponse'
          type: array
      type: object
    partGetStock_200_response:
      example:
        objects: 0
      properties:
        objects:
          description: Stock amount
          type: integer
      type: object
    orderSendBy_request:
      properties:
        sendType:
          description: "Specifies the way in which the order was sent to the customer.<br>\r\
            \n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded\
            \ pfd)."
          enum:
          - VPR
          - VP
          - VM
          - VPDF
          type: string
        sendDraft:
          description: Specify if the should be enshrined after marking it as sent.
          type: boolean
      required:
      - sendDraft
      - sendType
      type: object
    orderSendBy_200_response:
      example:
        objects:
        - sumTax: sumTax
          orderType: AN
          orderNumber: Offer-1000
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: Order
            id: "0"
          sumGross: sumGross
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: sumTaxForeignCurrency
          headText: headText
          sumGrossForeignCurrency: sumGrossForeignCurrency
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: sumDiscounts
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: sumNetForeignCurrency
          id: "0"
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: objectName
            id: id
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          version: "0"
          taxRate: "19"
          sumNet: sumNet
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: Order
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          orderDate: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: sumDiscountsForeignCurrency
          status: "100"
        - sumTax: sumTax
          orderType: AN
          orderNumber: Offer-1000
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: Order
            id: "0"
          sumGross: sumGross
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: sumTaxForeignCurrency
          headText: headText
          sumGrossForeignCurrency: sumGrossForeignCurrency
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: sumDiscounts
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: sumNetForeignCurrency
          id: "0"
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: objectName
            id: id
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          version: "0"
          taxRate: "19"
          sumNet: sumNet
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: Order
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          orderDate: 2000-01-23T04:56:07.000+00:00
          sumDiscountsForeignCurrency: sumDiscountsForeignCurrency
          status: "100"
      properties:
        objects:
          description: The order object which was marked as sent.
          items:
            $ref: '#/components/schemas/Model_OrderResponse'
          type: array
      type: object
    getPlaceholder_200_response_value_inner:
      example:
        value: "[%BANKNUMBER%]"
        key: BANK_NUMBER
      properties:
        key:
          example: BANK_NUMBER
          type: string
        value:
          example: "[%BANKNUMBER%]"
          type: string
    getPlaceholder_200_response:
      example:
        value:
        - value: "[%BANKNUMBER%]"
          key: BANK_NUMBER
        - value: "[%BANKNUMBER%]"
          key: BANK_NUMBER
        key: CONTACT
      properties:
        key:
          example: CONTACT
          type: string
        value:
          items:
            $ref: '#/components/schemas/getPlaceholder_200_response_value_inner'
          type: array
      type: object
    bookCreditNote_request_checkAccountTransaction:
      description: "The check account transaction on which should be booked.<br>\r\
        \n    The transaction will be linked to the credit note."
      properties:
        id:
          description: The id of the check account transaction on which should be
            booked.
          type: integer
        objectName:
          description: Internal object name which is 'CheckAccountTransaction'.
          example: CheckAccountTransaction
          type: string
      required:
      - id
      - objectName
      type: object
    bookCreditNote_request:
      properties:
        amount:
          description: Amount which should be booked. Can also be a partial amount.
          type: number
        date:
          description: The booking date. Most likely the current date.
          type: integer
        type:
          description: "Define a type for the booking.<br>\r\n    The following type\
            \ abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\
            \n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <->\
            \ Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher\
            \ amount due to currency fluctuations</li>\r\n    <li>O <-> Reduced/Higher\
            \ amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due\
            \ to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the\
            \ monetary traffic costs</li>\r\n    </ul>"
          enum:
          - "N"
          - CB
          - CF
          - O
          - OF
          - MTC
          type: string
        checkAccount:
          $ref: '#/components/schemas/bookVoucher_request_checkAccount'
        checkAccountTransaction:
          $ref: '#/components/schemas/bookCreditNote_request_checkAccountTransaction'
        createFeed:
          description: Determines if a feed is created for the booking process.
          type: boolean
      required:
      - amount
      - checkAccount
      - date
      - type
      type: object
    reportContact_sevQuery_parameter_filter_country:
      properties:
        id:
          description: id of the country
          example: 1
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    reportContact_sevQuery_parameter_filter:
      properties:
        zip:
          description: filters the contacts by zip code
          example: 77656
          type: integer
        city:
          description: filters the contacts by city
          example: Offenburg
          type: string
        country:
          $ref: '#/components/schemas/reportContact_sevQuery_parameter_filter_country'
        depth:
          description: export only organisations
          type: boolean
        onlyPeople:
          description: export only people
          type: boolean
      type: object
    reportContact_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: Model name which is exported
          example: Invoice
        objectName:
          description: SevQuery object name
          example: SevQuery
        filter:
          $ref: '#/components/schemas/reportContact_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    invoiceSendBy_request:
      properties:
        sendType:
          description: "Specifies the way in which the invoice was sent to the customer.<br>\r\
            \n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded\
            \ pfd)."
          enum:
          - VPR
          - VP
          - VM
          - VPDF
          type: string
        sendDraft:
          description: Specify if the should be enshrined after marking it as sent.
          type: boolean
      required:
      - sendDraft
      - sendType
      type: object
    invoiceSendBy_200_response:
      example:
        objects:
        - sumTax: "19"
          sumGrossAccounting: "0"
          sendDate: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          reminderDebit: "0"
          reminderTotal: "0"
          reminderCharge: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          dunningLevel: "0"
          create: 2000-01-23T04:56:07.000+00:00
          invoiceType: RE
          sumNetForeignCurrency: "0"
          id: "0"
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          costCentre:
            objectName: CostCentre
            id: "0"
          taxRate: "19"
          accountNextInvoice: "1647259198"
          sumNet: "100"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          header: My RE-1000
          paymentMethod:
            objectName: PaymentMethod
            id: "0"
          deliveryDateUntil: "0"
          sumTaxAccounting: "0"
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          status: "100"
          footText: footer information
          accountIntervall: 2022-03-14
          reminderDeadline: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: objectName
            id: "0"
          sumGross: "119"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: header information
          sumGrossForeignCurrency: "0"
          sumNetAccounting: "0"
          invoiceNumber: RE-1000
          showNet: false
          sendPaymentReceivedNotificationDate: "0"
          smallSettlement: false
          currency: EUR
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxText: Umsatzsteuer 19%
          address: |-
            name
            street
            postCode city
          sevClient:
            objectName: SevClient
            id: "0"
          enshrined: 2000-01-23T04:56:07.000+00:00
          invoiceDate: 01.01.20
          datevConnectOnline: "{}"
          discountTime: "0"
          timeToPay: "10"
          objectName: Invoice
          createUser:
            objectName: SevUser
            id: "0"
          payDate: 2000-01-23T04:56:07.000+00:00
        - sumTax: "19"
          sumGrossAccounting: "0"
          sendDate: 2000-01-23T04:56:07.000+00:00
          discount: "0"
          reminderDebit: "0"
          reminderTotal: "0"
          reminderCharge: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          dunningLevel: "0"
          create: 2000-01-23T04:56:07.000+00:00
          invoiceType: RE
          sumNetForeignCurrency: "0"
          id: "0"
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          costCentre:
            objectName: CostCentre
            id: "0"
          taxRate: "19"
          accountNextInvoice: "1647259198"
          sumNet: "100"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          header: My RE-1000
          paymentMethod:
            objectName: PaymentMethod
            id: "0"
          deliveryDateUntil: "0"
          sumTaxAccounting: "0"
          sumDiscountsForeignCurrency: "0"
          paidAmount: 0
          status: "100"
          footText: footer information
          accountIntervall: 2022-03-14
          reminderDeadline: 2000-01-23T04:56:07.000+00:00
          origin:
            objectName: objectName
            id: "0"
          sumGross: "119"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: header information
          sumGrossForeignCurrency: "0"
          sumNetAccounting: "0"
          invoiceNumber: RE-1000
          showNet: false
          sendPaymentReceivedNotificationDate: "0"
          smallSettlement: false
          currency: EUR
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          taxText: Umsatzsteuer 19%
          address: |-
            name
            street
            postCode city
          sevClient:
            objectName: SevClient
            id: "0"
          enshrined: 2000-01-23T04:56:07.000+00:00
          invoiceDate: 01.01.20
          datevConnectOnline: "{}"
          discountTime: "0"
          timeToPay: "10"
          objectName: Invoice
          createUser:
            objectName: SevUser
            id: "0"
          payDate: 2000-01-23T04:56:07.000+00:00
      properties:
        objects:
          description: The invoice object which was marked as sent.
          items:
            $ref: '#/components/schemas/Model_InvoiceResponse'
          type: array
      type: object
    getTagRelations_200_response:
      example:
        objects:
        - sevClient:
            objectName: SevClient
            id: "0"
          objectName: Tag
          create: 2000-01-23T04:56:07.000+00:00
          id: "1"
          tag:
            objectName: Tag
            id: "0"
          object:
            objectName: Object
            id: "0"
        - sevClient:
            objectName: SevClient
            id: "0"
          objectName: Tag
          create: 2000-01-23T04:56:07.000+00:00
          id: "1"
          tag:
            objectName: Tag
            id: "0"
          object:
            objectName: Object
            id: "0"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_TagCreateResponse'
          type: array
    getVoucherPositions_200_response:
      example:
        objects:
        - sumTax: "19"
          sumGrossAccounting: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          voucher:
            objectName: Voucher
            id: "0"
          accountingType:
            objectName: AccountingType
            id: "0"
          sumGross: "119"
          update: 01.01.2020
          taxRate: "19"
          sumNet: "100"
          isAsset: false
          sumNetAccounting: "0"
          objectName: objectName
          create: 01.01.2020
          estimatedAccountingType:
            objectName: AccountingType
            id: "0"
          comment: comment
          id: "0"
          sumTaxAccounting: "0"
          net: true
        - sumTax: "19"
          sumGrossAccounting: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          voucher:
            objectName: Voucher
            id: "0"
          accountingType:
            objectName: AccountingType
            id: "0"
          sumGross: "119"
          update: 01.01.2020
          taxRate: "19"
          sumNet: "100"
          isAsset: false
          sumNetAccounting: "0"
          objectName: objectName
          create: 01.01.2020
          estimatedAccountingType:
            objectName: AccountingType
            id: "0"
          comment: comment
          id: "0"
          sumTaxAccounting: "0"
          net: true
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_VoucherPosResponse'
          type: array
      type: object
    creditNoteSendBy_request:
      properties:
        sendType:
          description: "Specifies the way in which the credit note was sent to the\
            \ customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail)\
            \ and 'VPDF' (downloaded pfd)."
          enum:
          - VPR
          - VP
          - VM
          - VPDF
          example: VPDF
          type: string
        sendDraft:
          description: Specify if the should be enshrined after marking it as sent.
          example: false
          type: boolean
      required:
      - sendDraft
      - sendType
      type: object
    creditNoteSendBy_200_response:
      example:
        objects:
        - sumTax: "0"
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          creditNoteNumber: Offer-1000
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: headText
          sumGrossForeignCurrency: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: "0"
          id: "0"
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          creditNoteType: CN
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          creditNoteDate: 2000-01-23T04:56:07.000+00:00
          version: "0"
          taxRate: "19"
          sumNet: "0"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: objectName
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          sumDiscountsForeignCurrency: "0"
          status: "100"
        - sumTax: "0"
          footText: footText
          sendDate: 2000-01-23T04:56:07.000+00:00
          creditNoteNumber: Offer-1000
          sumGross: "0"
          update: 2000-01-23T04:56:07.000+00:00
          contactPerson:
            objectName: SevUser
            id: "0"
          sumTaxForeignCurrency: "0"
          headText: headText
          sumGrossForeignCurrency: "0"
          contact:
            objectName: Contact
            id: "0"
          sumDiscounts: "0"
          showNet: false
          create: 2000-01-23T04:56:07.000+00:00
          smallSettlement: false
          currency: EUR
          sumNetForeignCurrency: "0"
          id: "0"
          deliveryDate: 2000-01-23T04:56:07.000+00:00
          paymentTerms: paymentTerms
          taxType: default
          addressCountry:
            objectName: StaticCountry
            id: "1"
          creditNoteType: CN
          deliveryTerms: deliveryTerms
          taxText: Umsatzsteuer 19%
          address: address
          sevClient:
            objectName: SevClient
            id: "0"
          creditNoteDate: 2000-01-23T04:56:07.000+00:00
          version: "0"
          taxRate: "19"
          sumNet: "0"
          customerInternalNote: customerInternalNote
          taxSet:
            objectName: TaxSet
            id: "0"
          sendType: VPR
          objectName: objectName
          header: My Offer-1000
          createUser:
            objectName: SevUser
            id: "0"
          sumDiscountsForeignCurrency: "0"
          status: "100"
      properties:
        objects:
          description: The credit note object which was marked as sent.
          items:
            $ref: '#/components/schemas/Model_creditNoteResponse'
          type: array
      type: object
    createInvoiceReminder_request_invoice:
      description: Invoice for the reminder
      properties:
        id:
          description: Id of the invoice
          type: integer
        objectName:
          description: "Model name, which is 'Invoice'"
          example: Invoice
          type: string
      required:
      - id
      - objectName
    createInvoiceReminder_request:
      properties:
        invoice:
          $ref: '#/components/schemas/createInvoiceReminder_request_invoice'
      required:
      - invoice
      type: object
    voucherUploadFile_request:
      properties:
        file:
          description: The file to upload
          format: binary
          type: string
      type: object
    voucherUploadFile_201_response_objects_inner:
      example:
        filename: filename
        mimeType: mimeType
      properties:
        filename:
          type: string
        mimeType:
          type: string
      type: object
    voucherUploadFile_201_response:
      example:
        objects:
        - filename: filename
          mimeType: mimeType
        - filename: filename
          mimeType: mimeType
      properties:
        objects:
          items:
            $ref: '#/components/schemas/voucherUploadFile_201_response_objects_inner'
          type: array
      type: object
    getcreditNotePositions_200_response:
      example:
        objects:
        - quantity: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 01.01.2020
          discount: "0"
          optional: true
          positionNumber: "1"
          priceNet: "100"
          priceGross: "119"
          creditNote:
            objectName: creditNote
            id: "0"
          unity:
            objectName: Unity
            id: "0"
          taxRate: "19"
          price: "100"
          name: Dragonglass
          objectName: objectName
          create: 01.01.2020
          id: "0"
          priceTax: "19"
          text: text
          sumDiscount: "0"
        - quantity: "0"
          sevClient:
            objectName: SevClient
            id: "0"
          part:
            objectName: Part
            id: "0"
          update: 01.01.2020
          discount: "0"
          optional: true
          positionNumber: "1"
          priceNet: "100"
          priceGross: "119"
          creditNote:
            objectName: creditNote
            id: "0"
          unity:
            objectName: Unity
            id: "0"
          taxRate: "19"
          price: "100"
          name: Dragonglass
          objectName: objectName
          create: 01.01.2020
          id: "0"
          priceTax: "19"
          text: text
          sumDiscount: "0"
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_creditNotePosResponse'
          type: array
      type: object
    getReferenceCount_200_response:
      example:
        objects: 1
      properties:
        objects:
          description: the count of all references
          example: 1
          type: integer
      type: object
    getNextCustomerNumber_200_response:
      example:
        objects: objects
      properties:
        objects:
          description: Next available customer number
          type: string
      type: object
    createTag_request_object:
      description: Invoice for the reminder
      properties:
        id:
          description: Id of the invoice/order/voucher/creditNote
          type: integer
        objectName:
          description: Model name
          enum:
          - Invoice
          - Voucher
          - Order
          - CreditNote
          example: Invoice
          type: string
      required:
      - id
      - objectName
      type: object
    createTag_request:
      properties:
        name:
          description: Name of the tag
          type: string
        object:
          $ref: '#/components/schemas/createTag_request_object'
      required:
      - invoice
    getBalanceAtDate_200_response:
      example:
        objects: "105.56"
      properties:
        objects:
          example: "105.56"
          format: float
          type: string
      type: object
    exportContact_sevQuery_parameter:
      properties:
        limit:
          description: Limit export
          example: 999999
          type: integer
        modelName:
          description: "Model name, which is 'Contact'"
        objectName:
          description: "Model name, which is 'SevQuery'"
          example: SevQuery
        filter:
          $ref: '#/components/schemas/reportContact_sevQuery_parameter_filter'
      required:
      - modelName
      - objectName
      type: object
    getTemplates_200_response_templates:
      example:
        translationCode: SEVDOC_TEMPLATE_STANDARD
        default: 0
        premium: false
        sevClient: "0"
        name: SEVDOC_TEMPLATE_STANDARD
        html: html
        id: 57986aee6bd2d53306068da1
        type: Invoice
      properties:
        id:
          example: 57986aee6bd2d53306068da1
          type: string
        name:
          example: SEVDOC_TEMPLATE_STANDARD
          type: string
        translationCode:
          example: SEVDOC_TEMPLATE_STANDARD
          type: string
        sevClient:
          example: "0"
          type: string
        type:
          example: Invoice
          type: string
        html:
          type: string
        default:
          type: integer
        premium:
          example: false
          type: boolean
      type: object
    getTemplates_200_response:
      example:
        result: "1"
        templates:
          translationCode: SEVDOC_TEMPLATE_STANDARD
          default: 0
          premium: false
          sevClient: "0"
          name: SEVDOC_TEMPLATE_STANDARD
          html: html
          id: 57986aee6bd2d53306068da1
          type: Invoice
      properties:
        result:
          example: "1"
          type: string
        templates:
          $ref: '#/components/schemas/getTemplates_200_response_templates'
    sendorderViaEMail_201_response:
      example:
        objects:
        - cc: cc
          bcc: bcc
          sevClient:
            objectName: objectName
            id: 1
          subject: subject
          update: 2000-01-23T04:56:07.000+00:00
          arrived: 2000-01-23T04:56:07.000+00:00
          objectName: objectName
          create: 2000-01-23T04:56:07.000+00:00
          from: from
          id: 0
          to: to
          text: text
          object:
            objectName: objectName
            id: 6
        - cc: cc
          bcc: bcc
          sevClient:
            objectName: objectName
            id: 1
          subject: subject
          update: 2000-01-23T04:56:07.000+00:00
          arrived: 2000-01-23T04:56:07.000+00:00
          objectName: objectName
          create: 2000-01-23T04:56:07.000+00:00
          from: from
          id: 0
          to: to
          text: text
          object:
            objectName: objectName
            id: 6
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Model_EmailOrder'
          type: array
      type: object
    getRelatedObjects_200_response:
      example:
        objects: "{}"
      properties:
        objects:
          type: object
      type: object
    Model_InvoicePosResponse_invoice:
      description: The invoice to which the position belongs.
      example:
        objectName: Invoice
        id: "0"
      properties:
        id:
          description: Unique identifier of the invoice
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Invoice'"
          example: Invoice
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoicePosResponse_part:
      description: Part from your inventory which is used in the position.
      example:
        objectName: Part
        id: "0"
      properties:
        id:
          description: Unique identifier of the part
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Part'"
          example: Part
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoicePosResponse_unity:
      description: The unit in which the positions part is measured
      example:
        objectName: Unity
        id: "1"
      properties:
        id:
          description: Unique identifier of the unit
          example: "1"
          type: string
        objectName:
          description: "Model name, which is 'Unity'"
          example: Unity
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoicePosResponse_sevClient:
      description: Client to which invoice position belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_AccountingContactUpdate_contact:
      description: The contact to which this accounting contact belongs.
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNote_contact:
      description: The contact used in the creditNote
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNote_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      nullable: true
      properties:
        id:
          description: Unique identifier of the country
          example: 1
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNote_createUser:
      description: Will be filled automatically by our system and can't be changed
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_creditNote_sevClient:
      description: Client to which creditNote belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_creditNote_contactPerson:
      description: The user who acts as a contact person for the creditNote
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNote_taxSet:
      description: Tax set of the creditNote. Needs to be added if you chose the tax
        type custom
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNoteUpdate_contact:
      description: The contact used in the creditNote
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNoteUpdate_contactPerson:
      description: The user who acts as a contact person for the creditNote
      nullable: true
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePosResponse_creditNote:
      description: The creditNote to which the position belongs.
      example:
        objectName: creditNote
        id: "0"
      properties:
        id:
          description: Unique identifier of the creditNote
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'creditNote'"
          example: creditNote
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePosResponse_part:
      description: Part from your inventory which is used in the position.
      example:
        objectName: Part
        id: "0"
      properties:
        id:
          description: Unique identifier of the part
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Part'"
          example: Part
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePosResponse_unity:
      description: The unit in which the positions part is measured
      example:
        objectName: Unity
        id: "0"
      properties:
        id:
          description: Unique identifier of the unit
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Unity'"
          example: Unity
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePosResponse_sevClient:
      description: Client to which creditNote position belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_Order_contact:
      description: The contact used in the order
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Order_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      nullable: false
      properties:
        id:
          description: Unique identifier of the country
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Order_contactPerson:
      description: The user who acts as a contact person for the order
      nullable: false
      properties:
        id:
          description: Unique identifier of the user
          example: 0
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Order_taxSet:
      description: Tax set of the order. Needs to be added if you chose the tax type
        custom
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Order_origin:
      description: Object from which the order was created. For example an offer.
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: Model name of the object. Could be 'Order'.
          type: string
      required:
      - id
      - objectName
      type: object
    Model_TagCreateResponse_tag:
      description: The tag information
      example:
        objectName: Tag
        id: "0"
      properties:
        id:
          description: Unique identifier of the tag
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Tag'"
          example: Tag
          type: string
      required:
      - id
      - objectName
      type: object
    Model_TagCreateResponse_object:
      description: the related object
      example:
        objectName: Object
        id: "0"
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Object'"
          example: Object
          type: string
      required:
      - id
      - objectName
      type: object
    Model_TagCreateResponse_sevClient:
      description: Client to which invoice belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWay_contact:
      description: The contact to which this communication way belongs.
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWay_key:
      description: |-
        The key of the communication way.<br>
        Similar to the category of addresses.<br>
        For all communication way keys please send a GET to /CommunicationWayKey.
      nullable: false
      properties:
        id:
          description: Unique identifier of the key
          type: integer
        objectName:
          description: "Model name, which is 'CommunicationWayKey'"
          example: CommunicationWayKey
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWay_sevClient:
      description: Client to which communication way key belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherUpdate_supplier:
      description: |-
        The contact used in the voucher as a supplier.<br>
        If you don't have a contact as a supplier, you can set this object to null.
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          default: Contact
          description: "Model name, which is 'Contact'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherUpdate_taxSet:
      description: Tax set of the voucher. Needs to be added if you chose the tax
        type custom
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
      example: null
    Model_VoucherUpdate_document:
      description: The document of the voucher.
      nullable: true
      properties:
        id:
          description: Unique identifier of the document
          type: integer
        objectName:
          description: "Model name, which is 'Document'"
          example: Document
          type: string
      required:
      - id
      - objectName
      type: object
      example: null
    Model_VoucherUpdate_costCentre:
      description: Cost centre for the voucher
      properties:
        id:
          description: Unique identifier of the cost centre
          type: integer
        objectName:
          description: "Model name, which is 'CostCentre'"
          example: CostCentre
          type: string
      required:
      - id
      - objectName
      type: object
      example: null
    Model_AccountingContact_contact:
      description: The contact to which this accounting contact belongs.
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactCustomFieldSettingResponse_sevClient:
      description: Client to which invoice belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoicePos_invoice:
      description: The invoice to which the position belongs.
      properties:
        id:
          description: Unique identifier of the invoice
          type: integer
        objectName:
          description: "Model name, which is 'Invoice'"
          example: Invoice
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoicePos_part:
      description: Part from your inventory which is used in the position.
      properties:
        id:
          description: Unique identifier of the part
          type: integer
        objectName:
          description: "Model name, which is 'Part'"
          example: Part
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoicePos_unity:
      description: The unit in which the positions part is measured
      properties:
        id:
          description: Unique identifier of the unit
          example: 1
          type: integer
        objectName:
          description: "Model name, which is 'Unity'"
          example: Unity
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoicePos_sevClient:
      description: Client to which invoice position belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWayUpdate_contact:
      description: The contact to which this communication way belongs.
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWayUpdate_key:
      description: |-
        The key of the communication way.<br>
        Similar to the category of addresses.<br>
        For all communication way keys please send a GET to /CommunicationWayKey.
      nullable: true
      properties:
        id:
          description: Unique identifier of the key
          type: integer
        objectName:
          description: "Model name, which is 'CommunicationWayKey'"
          example: CommunicationWayKey
          type: string
      required:
      - id
      - objectName
      type: object
    Model_EmailOrder_object:
      description: The contact used in the invoice
      example:
        objectName: objectName
        id: 6
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: "Model name, which is 'Invoice' or 'Order' or 'CreditNote'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_EmailOrder_sevClient:
      description: Client to which mail belongs. Will be filled automatically
      example:
        objectName: objectName
        id: 1
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_contact:
      description: The contact used in the invoice
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_sevClient:
      description: Client to which invoice belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_contactPerson:
      description: The user who acts as a contact person for the invoice
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_paymentMethod:
      description: Payment method used for the invoice
      properties:
        id:
          description: Unique identifier of the payment method
          type: integer
        objectName:
          description: "Model name, which is 'PaymentMethod'"
          example: PaymentMethod
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_costCentre:
      description: Cost centre for the invoice
      properties:
        id:
          description: Unique identifier of the cost centre
          type: integer
        objectName:
          description: "Model name, which is 'CostCentre'"
          example: CostCentre
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_origin:
      description: Origin of the invoice. Could f.e. be an order
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: Model name. Could f.e. be 'Order''
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoiceUpdate_taxSet:
      description: Tax set of the invoice. Needs to be added if you chose the tax
        type custom
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_contact:
      description: The contact used in the invoice
      example:
        objectName: Contact
        id: "0"
      properties:
        id:
          description: Unique identifier of the contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      example:
        objectName: StaticCountry
        id: "1"
      properties:
        id:
          description: Unique identifier of the country
          example: "1"
          type: string
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_createUser:
      description: Will be filled automatically by our system and can't be changed
      example:
        objectName: SevUser
        id: "0"
      properties:
        id:
          description: Unique identifier of the user
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_contactPerson:
      description: The user who acts as a contact person for the invoice
      example:
        objectName: SevUser
        id: "0"
      properties:
        id:
          description: Unique identifier of the user
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_paymentMethod:
      description: Payment method used for the invoice
      example:
        objectName: PaymentMethod
        id: "0"
      properties:
        id:
          description: Unique identifier of the payment method
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'PaymentMethod'"
          example: PaymentMethod
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_costCentre:
      description: Cost centre for the invoice
      example:
        objectName: CostCentre
        id: "0"
      properties:
        id:
          description: Unique identifier of the cost centre
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'CostCentre'"
          example: CostCentre
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_origin:
      description: Origin of the invoice. Could f.e. be an order
      example:
        objectName: objectName
        id: "0"
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: Model name. Could f.e. be 'Order''
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_InvoiceResponse_taxSet:
      description: Tax set of the invoice. Needs to be added if you chose the tax
        type custom
      example:
        objectName: TaxSet
        id: "0"
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ContactCustomField_contact:
      description: name of the contact
      properties:
        id:
          description: Unique identifier of contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactCustomField_contactCustomFieldSetting:
      description: name of the contact custom field setting
      properties:
        id:
          description: Unique identifier of contact custom field setting
          type: integer
        objectName:
          description: "Model name, which is 'contactCustomFieldSetting'"
          example: contactCustomFieldSetting
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePos_creditNote:
      description: The creditNote to which the position belongs.  <span style='color:red'>Required</span>
        if you want to create/update an credit note position for an existing credit
        note"
      properties:
        id:
          description: Unique identifier of the creditNote
          type: integer
        objectName:
          description: "Model name, which is 'creditNote'"
          example: creditNote
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePos_unity:
      description: The unit in which the positions part is measured
      properties:
        id:
          description: Unique identifier of the unit
          type: integer
        objectName:
          description: "Model name, which is 'Unity'"
          example: Unity
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNotePos_sevClient:
      description: Client to which creditNote position belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    saveVoucher_voucherPosDelete:
      default: null
      properties:
        id:
          description: Id of voucher position
          type: integer
        objectName:
          description: Object name of voucher position
          type: string
      required:
      - id
      - objectName
    Model_ContactResponse_parent:
      description: The parent contact to which this contact belongs. Must be an organization.
      example:
        objectName: Contact
        id: "0"
      properties:
        id:
          description: Unique identifier of the parent contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ContactResponse_category:
      description: "Category of the contact.<br> For more information,\r\n     see\
        \ <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>."
      example:
        objectName: Category
        id: "3"
      properties:
        id:
          description: Unique identifier of the category
          example: "3"
          type: string
        objectName:
          description: "Model name, which is 'Category'"
          example: Category
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ContactResponse_sevClient:
      description: Client to which contact belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: 0
      properties:
        id:
          description: Unique identifier of the client
          example: 0
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ContactResponse_taxSet:
      description: Tax set which is used in every invoice of the contact.
      example:
        objectName: TaxSet
        id: "0"
      properties:
        id:
          description: Unique identifier of the tax set
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ContactAddress_contact:
      description: The contact to which this contact address belongs.
      example:
        objectName: Contact
        id: 6
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactAddress_country:
      description: "Country of the contact address.<br>\r\n    For all countries,\
        \ send a GET to /StaticCountry"
      example:
        objectName: StaticCountry
        id: 1
      nullable: false
      properties:
        id:
          description: Unique identifier of the country
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactAddress_category:
      description: "Category of the contact address.<br>\r\n     For all categories,\
        \ send a GET to /Category?objectType=ContactAddress."
      example:
        objectName: objectName
        id: 5
      nullable: true
      properties:
        id:
          description: Unique identifier of the category
          type: integer
        objectName:
          description: "Model name, which is 'Category'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactAddress_sevClient:
      description: Client to which contact address belongs. Will be filled automatically
      example:
        objectName: objectName
        id: 5
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_Part_category:
      description: "Category of the part.<br>\r\n    For all categories, send a GET\
        \ to /Category?objectType=Part"
      example:
        objectName: Category
        id: 6
      nullable: true
      properties:
        id:
          description: Unique identifier of the category
          type: integer
        objectName:
          description: "Model name, which is 'Category'"
          example: Category
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Part_unity:
      description: The unit in which the part is measured
      example:
        objectName: Unity
        id: 1
      properties:
        id:
          description: Unique identifier of the unit
          example: 1
          type: integer
        objectName:
          description: "Model name, which is 'Unity'"
          example: Unity
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Part_sevClient:
      description: Client to which part belongs. Will be filled automatically
      example:
        objectName: objectName
        id: 1
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountResponse_sevClient:
      description: Client to which check account belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransaction_sevClient:
      description: Client to which check account transaction belongs. Will be filled
        automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransaction_checkAccount:
      description: The check account to which the transaction belongs
      nullable: false
      properties:
        id:
          description: Unique identifier of the check account
          type: integer
        objectName:
          default: CheckAccount
          description: "Model name, which is 'CheckAccount'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransaction_sourceTransaction:
      description: The check account transaction serving as the source of the rebooking
      nullable: true
      properties:
        id:
          description: Unique identifier of the check account transaction
          type: integer
        objectName:
          default: CheckAccountTransaction
          description: "Model name, which is 'CheckAccountTransaction'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransaction_targetTransaction:
      description: The check account transaction serving as the target of the rebooking
      nullable: true
      properties:
        id:
          description: Unique identifier of the check account transaction
          type: integer
        objectName:
          default: CheckAccountTransaction
          description: "Model name, which is 'CheckAccountTransaction'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNoteResponse_contact:
      description: The contact used in the creditNote
      example:
        objectName: Contact
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNoteResponse_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      example:
        objectName: StaticCountry
        id: "1"
      nullable: true
      properties:
        id:
          description: Unique identifier of the country
          example: "1"
          type: string
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNoteResponse_sevClient:
      description: Client to which creditNote belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_creditNoteResponse_contactPerson:
      description: The user who acts as a contact person for the creditNote
      example:
        objectName: SevUser
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the user
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_creditNoteResponse_taxSet:
      description: Tax set of the creditNote. Needs to be added if you chose the tax
        type custom
      example:
        objectName: TaxSet
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
    Model_InvoicePosUpdate_invoice:
      description: The invoice to which the position belongs.
      nullable: true
      properties:
        id:
          description: Unique identifier of the invoice
          type: integer
        objectName:
          description: "Model name, which is 'Invoice'"
          example: Invoice
          type: string
      readOnly: false
      required:
      - id
      - objectName
      type: object
    Model_OrderPosResponse_order:
      description: The order to which the position belongs.
      example:
        objectName: Order
        id: "0"
      properties:
        id:
          description: Unique identifier of the order
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Order'"
          example: Order
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderPosResponse_sevClient:
      description: Client to which order position belongs. Will be filled automatically
      example:
        objectName: objectName
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    saveOrder_orderPosDelete:
      default: null
      properties:
        id:
          description: Id of order position
          type: integer
        objectName:
          description: Object name of order position
          type: string
      required:
      - id
      - objectName
    Model_AccountingContactResponse_contact:
      description: The contact to which this accounting contact belongs.
      example:
        objectName: Contact
        id: "0"
      properties:
        id:
          description: Unique identifier of the contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_AccountingContactResponse_sevClient:
      description: Client to which accounting contact belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_OrderPos_order:
      description: The order to which the position belongs.
      properties:
        id:
          description: Unique identifier of the order
          type: integer
        objectName:
          description: "Model name, which is 'Order'"
          example: Order
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderPos_sevClient:
      description: Client to which order position belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherResponse_sevClient:
      description: Client to which voucher belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherResponse_createUser:
      description: User who created the voucher. Will be filled automatically.
      example:
        objectName: SevUser
        id: "0"
      properties:
        id:
          description: Unique identifier of the user
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherResponse_supplier:
      description: |-
        The contact used in the voucher as a supplier.<br>
        If you don't have a contact as a supplier, you can set this object to null.
      example:
        objectName: Contact
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherResponse_document:
      description: The document of the voucher.
      example:
        objectName: Document
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the document
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Document'"
          example: Document
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherResponse_costCentre:
      description: Cost centre for the voucher
      example:
        objectName: objectName
        id: "0"
      properties:
        id:
          description: Unique identifier of the cost centre
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'CostCentre'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherResponse_taxSet:
      description: Tax set of the voucher. Needs to be added if you chose the tax
        type custom
      example:
        objectName: TaxSet
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Voucher_sevClient:
      description: Client to which voucher belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_Voucher_createUser:
      description: User who created the voucher. Will be filled automatically.
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_Voucher_supplier:
      description: |-
        The contact used in the voucher as a supplier.<br>
        If you don't have a contact as a supplier, you can set this object to null.
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Contact_parent:
      description: The parent contact to which this contact belongs. Must be an organization.
      nullable: true
      properties:
        id:
          description: Unique identifier of the parent contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Contact_category:
      description: "Category of the contact.<br> For more information,\r\n     see\
        \ <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>."
      nullable: false
      properties:
        id:
          description: Unique identifier of the category
          example: 3
          type: integer
        objectName:
          description: "Model name, which is 'Category'"
          example: Category
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Contact_taxSet:
      description: Tax set which is used in every invoice of the contact.
      nullable: true
      properties:
        id:
          description: Unique identifier of the tax set
          type: integer
        objectName:
          description: "Model name, which is 'TaxSet'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CheckAccount_sevClient:
      description: Client to which check account belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_OrderUpdate_contact:
      description: The contact used in the order
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderUpdate_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      nullable: true
      properties:
        id:
          description: Unique identifier of the country
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderUpdate_createUser:
      description: Will be filled automatically by our system and can't be changed
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_OrderUpdate_sevClient:
      description: Client to which order belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_OrderUpdate_contactPerson:
      description: The user who acts as a contact person for the order
      properties:
        id:
          description: Unique identifier of the user
          type: integer
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderUpdate_taxSet:
      description: Tax set of the order. Needs to be added if you chose the tax type
        custom
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          type: integer
        objectName:
          description: "Model name, which is 'TaxSet'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransactionUpdate_checkAccount:
      description: The check account to which the transaction belongs
      properties:
        id:
          description: Unique identifier of the check account
          type: integer
        objectName:
          default: CheckAccount
          description: "Model name, which is 'CheckAccount'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransactionResponse_sevClient:
      description: Client to which check account transaction belongs. Will be filled
        automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransactionResponse_checkAccount:
      description: The check account to which the transaction belongs
      example:
        objectName: CheckAccount
        id: "0"
      properties:
        id:
          description: Unique identifier of the check account
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'CheckAccount'"
          example: CheckAccount
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransactionResponse_sourceTransaction:
      description: The check account transaction serving as the source of the rebooking
      example:
        objectName: CheckAccountTransaction
        id: "0"
      properties:
        id:
          description: Unique identifier of the check account transaction
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'CheckAccountTransaction'"
          example: CheckAccountTransaction
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CheckAccountTransactionResponse_targetTransaction:
      description: The check account transaction serving as the target of the rebooking
      example:
        objectName: CheckAccountTransaction
        id: "0"
      properties:
        id:
          description: Unique identifier of the check account transaction
          example: "0"
          type: string
        objectName:
          default: CheckAccountTransaction
          description: "Model name, which is 'CheckAccountTransaction'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_Invoice_contact:
      description: The contact used in the invoice
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Invoice_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      nullable: false
      properties:
        id:
          description: Unique identifier of the country
          example: 1
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Invoice_taxSet:
      description: Tax set of the invoice. Needs to be added if you chose the tax
        type custom
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
      example: null
    Model_Invoice_paymentMethod:
      description: Payment method used for the invoice
      properties:
        id:
          description: Unique identifier of the payment method
          example: 21919
          type: integer
        objectName:
          description: "Model name, which is 'PaymentMethod'"
          example: PaymentMethod
          type: string
      required:
      - id
      - objectName
      type: object
    Model_Invoice_origin:
      description: Origin of the invoice. Could f.e. be an order
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which could be 'Order'"
          example: Order
          type: string
      required:
      - id
      - objectName
      type: object
      example: null
    Model_ContactAddressUpdate_contact:
      description: The contact to which this contact address belongs.
      nullable: true
      properties:
        id:
          description: Unique identifier of the contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactAddressUpdate_country:
      description: "Country of the contact address.<br>\r\n    For all countries,\
        \ send a GET to /StaticCountry"
      nullable: true
      properties:
        id:
          description: Unique identifier of the country
          type: integer
        objectName:
          description: "Model name, which is 'StaticCountry'"
          example: StaticCountry
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactUpdate_parent:
      description: The parent contact to which this contact belongs. Must be an organization.
      nullable: true
      properties:
        id:
          description: Unique identifier of the parent contact
          type: integer
        objectName:
          description: "Model name, which is 'Contact'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactUpdate_category:
      description: "Category of the contact.<br> For more information,\r\n     see\
        \ <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>."
      nullable: true
      properties:
        id:
          description: Unique identifier of the category
          example: 3
          type: integer
        objectName:
          description: "Model name, which is 'Category'"
          example: Category
          type: string
      required:
      - id
      - objectName
      type: object
    saveInvoice_invoicePosDelete:
      default: null
      properties:
        id:
          description: Id of invoice position
          type: integer
        objectName:
          description: Object name of invoice position
          type: string
      required:
      - id
      - objectName
    saveInvoice_discountSave:
      properties:
        discount:
          description: Defines if this is a discount or a surcharge
          example: true
          type: boolean
        text:
          description: A text for your discount
          type: string
        percentage:
          description: Defines if this is a percentage or an absolute discount
          type: boolean
        value:
          description: Value of the discount
          type: number
        objectName:
          description: Object name of the discount
          example: Discounts
          type: string
        mapAll:
          description: Internal param
          example: true
          type: boolean
      required:
      - discount
      - mapAll
      - objectName
      - percentage
      - text
      - value
    saveInvoice_discountDelete:
      properties:
        id:
          description: ID of discount to delete
          type: integer
        objectName:
          description: Object name of discount
          example: Discounts
          type: string
      type: object
      example: null
    Model_OrderResponse_contact:
      description: The contact used in the order
      example:
        objectName: Contact
        id: "0"
      nullable: false
      properties:
        id:
          description: Unique identifier of the contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderResponse_addressCountry:
      description: Can be omitted as complete address is defined in address attribute
      example:
        objectName: objectName
        id: id
      nullable: true
      properties:
        id:
          description: Unique identifier of the country
          type: string
        objectName:
          description: "Model name, which is 'StaticCountry'"
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderResponse_sevClient:
      description: Client to which order belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_OrderResponse_origin:
      description: Object from which the order was created. For example an offer.
      example:
        objectName: Order
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: Model name of the object. Could be 'Order'.
          example: Order
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderResponse_contactPerson:
      description: The user who acts as a contact person for the order
      example:
        objectName: SevUser
        id: "0"
      properties:
        id:
          description: Unique identifier of the user
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevUser'"
          example: SevUser
          type: string
      required:
      - id
      - objectName
      type: object
    Model_OrderResponse_taxSet:
      description: Tax set of the order. Needs to be added if you chose the tax type
        custom
      example:
        objectName: TaxSet
        id: "0"
      nullable: true
      properties:
        id:
          description: Unique identifier of the object
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'TaxSet'"
          example: TaxSet
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherPos_sevClient:
      description: Client to which voucher position belongs. Will be filled automatically
      properties:
        id:
          description: Unique identifier of the client
          type: integer
        objectName:
          description: "Model name, which is 'SevClient'"
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherPos_voucher:
      description: The voucher to which the position belongs.
      properties:
        id:
          description: Unique identifier of the voucher
          type: integer
        objectName:
          description: "Model name, which is 'Voucher'"
          example: Voucher
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherPos_accountingType:
      description: "The accounting type to which the position belongs.<br>\r\n   \
        \  An accounting type is the booking account to which the position belongs.<br>\r\
        \n     For more information, please refer to\r\n     <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a>\
        \ section."
      properties:
        id:
          description: Unique identifier of the accounting type
          type: integer
        objectName:
          description: "Model name, which is 'AccountingType'"
          example: AccountingType
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherPos_estimatedAccountingType:
      description: "The accounting type to which the position belongs estimated by\
        \ our voucher recognition.<br>\r\n    An accounting type is the booking account\
        \ to which the position belongs.<br>\r\n    For more information, please refer\
        \ to\r\n    <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a>\
        \ section."
      properties:
        id:
          description: Unique identifier of the accounting type
          type: integer
        objectName:
          description: "Model name, which is 'AccountingType'"
          example: AccountingType
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWayResponse_contact:
      description: The contact to which this communication way belongs.
      example:
        objectName: Contact
        id: "0"
      properties:
        id:
          description: Unique identifier of the contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWayResponse_key:
      description: |-
        The key of the communication way.<br>
        Similar to the category of addresses.<br>
        For all communication way keys please send a GET to /CommunicationWayKey.
      example:
        objectName: CommunicationWayKey
        id: "0"
      properties:
        id:
          description: Unique identifier of the key
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'CommunicationWayKey'"
          example: CommunicationWayKey
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_CommunicationWayResponse_sevClient:
      description: Client to which communication way key belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ChangeLayoutResponse_metadaten:
      example:
        pages: 1
        docId: docId
        thumbs: "{}"
      properties:
        thumbs:
          description: the pdf file
          type: object
        pages:
          description: the number of pages in the document
          example: 1
          type: integer
        docId:
          description: the id of the document
          readOnly: true
          type: string
      type: object
    Model_CreateInvoiceFromOrder_order:
      description: select the order for which you want to create the invoice
      nullable: false
      properties:
        id:
          description: Unique identifier of the order
          type: integer
        objectName:
          description: "Model name, which is 'Order'"
          example: Order
          type: string
      required:
      - id
      - objectName
      type: object
    saveCreditNote_creditNotePosDelete:
      default: null
      properties:
        id:
          description: Id of credit note position
          type: integer
        objectName:
          description: Object name of credit note position
          type: string
      required:
      - id
      - objectName
    saveCreditNote_discountSave:
      default: null
      properties:
        discount:
          description: Defines if this is a discount or a surcharge
          example: true
          type: boolean
        text:
          description: A text for your discount
          type: string
        percentage:
          description: Defines if this is a percentage or an absolute discount
          type: boolean
        value:
          description: Value of the discount
          type: number
        objectName:
          description: Object name of the discount
          example: Discounts
          type: string
        mapAll:
          description: Internal param
          example: true
          type: boolean
      required:
      - discount
      - mapAll
      - objectName
      - percentage
      - text
      - value
    saveCreditNote_discountDelete:
      default: null
      properties:
        id:
          description: ID of discount to delete
          type: integer
        objectName:
          description: Object name of discount
          example: Discounts
          type: string
      required:
      - id
      - objectName
    Model_VoucherPosResponse_sevClient:
      description: Client to which voucher position belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherPosResponse_voucher:
      description: The voucher to which the position belongs.
      example:
        objectName: Voucher
        id: "0"
      properties:
        id:
          description: Unique identifier of the voucher
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Voucher'"
          example: Voucher
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_VoucherPosResponse_accountingType:
      description: "The accounting type to which the position belongs.<br>\r\n   \
        \  An accounting type is the booking account to which the position belongs.<br>\r\
        \n     For more information, please refer to\r\n     <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a>\
        \ section."
      example:
        objectName: AccountingType
        id: "0"
      properties:
        id:
          description: Unique identifier of the accounting type
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'AccountingType'"
          example: AccountingType
          type: string
      required:
      - id
      - objectName
      type: object
    Model_VoucherPosResponse_estimatedAccountingType:
      description: "The accounting type to which the position belongs estimated by\
        \ our voucher recognition.<br>\r\n    An accounting type is the booking account\
        \ to which the position belongs.<br>\r\n    For more information, please refer\
        \ to\r\n    <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a>\
        \ section."
      example:
        objectName: AccountingType
        id: "0"
      properties:
        id:
          description: Unique identifier of the accounting type
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'AccountingType'"
          example: AccountingType
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
    Model_ContactCustomFieldResponse_sevClient:
      description: Client to which contact field belongs. Will be filled automatically
      example:
        objectName: SevClient
        id: "0"
      properties:
        id:
          description: Unique identifier of the client
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'SevClient'"
          example: SevClient
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactCustomFieldResponse_contact:
      description: name of the contact
      example:
        objectName: Contact
        id: "0"
      properties:
        id:
          description: Unique identifier of contact
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Contact'"
          example: Contact
          type: string
      required:
      - id
      - objectName
      type: object
    Model_ContactCustomFieldResponse_contactCustomFieldSetting:
      allOf:
      - $ref: '#/components/schemas/Model_ContactCustomFieldSettingResponse'
      description: the contact custom field setting
      type: object
    Model_Discount_object:
      description: The order used for the discount
      example:
        objectName: Order
        id: "0"
      properties:
        id:
          description: Unique identifier of the order
          example: "0"
          type: string
        objectName:
          description: "Model name, which is 'Order'"
          example: Order
          type: string
      readOnly: true
      required:
      - id
      - objectName
      type: object
  securitySchemes:
    api_key:
      in: header
      name: Authorization
      type: apiKey
x-tagGroups:
- name: Invoices and Receipts
  tags:
  - Invoice
  - InvoicePos
  - Voucher
  - VoucherPos
- name: Contact
  tags:
  - Contact
  - ContactAddress
  - CommunicationWay
  - AccountingContact
  - ContactField
- name: Payment accounts
  tags:
  - CheckAccount
  - CheckAccountTransaction
- name: "Orders, CreditNotes and Parts"
  tags:
  - Order
  - OrderPos
  - CreditNote
  - CreditNotePos
  - Part
- name: Layouts and Tags
  tags:
  - Layout
  - Tag
- name: Exports and Reports
  tags:
  - Export
  - Report
