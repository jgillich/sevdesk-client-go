/*
sevDesk API

Testing InvoiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_InvoiceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InvoiceApiService BookInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.BookInvoice(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService CancelInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.CancelInvoice(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService CreateInvoiceByFactory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoiceApi.CreateInvoiceByFactory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService CreateInvoiceFromOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoiceApi.CreateInvoiceFromOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService CreateInvoiceReminder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoiceApi.CreateInvoiceReminder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetInvoiceById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.GetInvoiceById(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetInvoicePositionsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.GetInvoicePositionsById(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoiceApi.GetInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetIsInvoicePartiallyPaid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.GetIsInvoicePartiallyPaid(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService InvoiceGetPdf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.InvoiceGetPdf(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService InvoiceRender", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.InvoiceRender(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService InvoiceSendBy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.InvoiceSendBy(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService SendInvoiceViaEMail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId int32

		resp, httpRes, err := apiClient.InvoiceApi.SendInvoiceViaEMail(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
