/*
sevDesk API

Testing CommunicationWayApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CommunicationWayApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CommunicationWayApiService CreateCommunicationWay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CommunicationWayApi.CreateCommunicationWay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommunicationWayApiService DeleteCommunicationWay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationWayId int32

		resp, httpRes, err := apiClient.CommunicationWayApi.DeleteCommunicationWay(context.Background(), communicationWayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommunicationWayApiService GetCommunicationWayById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationWayId int32

		resp, httpRes, err := apiClient.CommunicationWayApi.GetCommunicationWayById(context.Background(), communicationWayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommunicationWayApiService GetCommunicationWayKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CommunicationWayApi.GetCommunicationWayKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommunicationWayApiService GetCommunicationWays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CommunicationWayApi.GetCommunicationWays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommunicationWayApiService UpdateCommunicationWay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationWayId int32

		resp, httpRes, err := apiClient.CommunicationWayApi.UpdateCommunicationWay(context.Background(), communicationWayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
