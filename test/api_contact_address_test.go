/*
sevDesk API

Testing ContactAddressApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ContactAddressApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContactAddressApiService ContactAddressId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactAddressId int32

		resp, httpRes, err := apiClient.ContactAddressApi.ContactAddressId(context.Background(), contactAddressId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAddressApiService CreateContactAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactAddressApi.CreateContactAddress(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAddressApiService DeleteContactAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactAddressId int32

		resp, httpRes, err := apiClient.ContactAddressApi.DeleteContactAddress(context.Background(), contactAddressId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAddressApiService GetContactAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactAddressApi.GetContactAddresses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactAddressApiService UpdateContactAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactAddressId int32

		resp, httpRes, err := apiClient.ContactAddressApi.UpdateContactAddress(context.Background(), contactAddressId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
