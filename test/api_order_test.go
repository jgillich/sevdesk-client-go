/*
sevDesk API

Testing OrderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OrderApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrderApiService CreateContractNoteFromOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrderApi.CreateContractNoteFromOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService CreateOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrderApi.CreateOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService CreatePackingListFromOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrderApi.CreatePackingListFromOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService DeleteOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.DeleteOrder(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService GetDiscounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.GetDiscounts(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService GetOrderById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.GetOrderById(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService GetOrderPositionsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.GetOrderPositionsById(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService GetOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrderApi.GetOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService GetRelatedObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.GetRelatedObjects(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService OrderGetPdf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.OrderGetPdf(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService OrderSendBy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.OrderSendBy(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService SendorderViaEMail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.SendorderViaEMail(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrderApiService UpdateOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrderApi.UpdateOrder(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
